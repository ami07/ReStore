// $ANTLR 3.4 /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g 2012-11-17 23:26:43

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g, 
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO 
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "CUBE", "DATETIME", "DCOLON", "DEFINE", "DENSE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RANK", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "ROLLUP", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "BOOL_COND", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "REALIAS", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int CUBE=18;
    public static final int DATETIME=19;
    public static final int DCOLON=20;
    public static final int DEFINE=21;
    public static final int DENSE=22;
    public static final int DESC=23;
    public static final int DIGIT=24;
    public static final int DISTINCT=25;
    public static final int DIV=26;
    public static final int DOLLAR=27;
    public static final int DOLLARVAR=28;
    public static final int DOUBLE=29;
    public static final int DOUBLENUMBER=30;
    public static final int DOUBLE_PERIOD=31;
    public static final int EQUAL=32;
    public static final int EXECCOMMAND=33;
    public static final int FALSE=34;
    public static final int FILTER=35;
    public static final int FLATTEN=36;
    public static final int FLOAT=37;
    public static final int FLOATINGPOINT=38;
    public static final int FLOATNUMBER=39;
    public static final int FOREACH=40;
    public static final int FULL=41;
    public static final int GENERATE=42;
    public static final int GROUP=43;
    public static final int ID=44;
    public static final int IDENTIFIER_L=45;
    public static final int IF=46;
    public static final int IMPORT=47;
    public static final int INNER=48;
    public static final int INPUT=49;
    public static final int INT=50;
    public static final int INTEGER=51;
    public static final int INTO=52;
    public static final int IS=53;
    public static final int JOIN=54;
    public static final int LEFT=55;
    public static final int LEFT_BRACKET=56;
    public static final int LEFT_CURLY=57;
    public static final int LEFT_PAREN=58;
    public static final int LETTER=59;
    public static final int LIMIT=60;
    public static final int LOAD=61;
    public static final int LONG=62;
    public static final int LONGINTEGER=63;
    public static final int MAP=64;
    public static final int MAPREDUCE=65;
    public static final int MINUS=66;
    public static final int ML_COMMENT=67;
    public static final int MULTILINE_QUOTEDSTRING=68;
    public static final int NOT=69;
    public static final int NUM_OP_EQ=70;
    public static final int NUM_OP_GT=71;
    public static final int NUM_OP_GTE=72;
    public static final int NUM_OP_LT=73;
    public static final int NUM_OP_LTE=74;
    public static final int NUM_OP_NE=75;
    public static final int ONSCHEMA=76;
    public static final int OR=77;
    public static final int ORDER=78;
    public static final int OTHERWISE=79;
    public static final int OUTER=80;
    public static final int OUTPUT=81;
    public static final int PARALLEL=82;
    public static final int PARTITION=83;
    public static final int PERCENT=84;
    public static final int PERIOD=85;
    public static final int PLUS=86;
    public static final int POUND=87;
    public static final int QMARK=88;
    public static final int QUOTEDSTRING=89;
    public static final int RANK=90;
    public static final int RETURNS=91;
    public static final int RIGHT=92;
    public static final int RIGHT_BRACKET=93;
    public static final int RIGHT_CURLY=94;
    public static final int RIGHT_PAREN=95;
    public static final int ROLLUP=96;
    public static final int SAMPLE=97;
    public static final int SEMI_COLON=98;
    public static final int SHIP=99;
    public static final int SL_COMMENT=100;
    public static final int SPECIALCHAR=101;
    public static final int SPLIT=102;
    public static final int STAR=103;
    public static final int STDERROR=104;
    public static final int STDIN=105;
    public static final int STDOUT=106;
    public static final int STORE=107;
    public static final int STREAM=108;
    public static final int STR_OP_EQ=109;
    public static final int STR_OP_GT=110;
    public static final int STR_OP_GTE=111;
    public static final int STR_OP_LT=112;
    public static final int STR_OP_LTE=113;
    public static final int STR_OP_MATCHES=114;
    public static final int STR_OP_NE=115;
    public static final int THROUGH=116;
    public static final int TRUE=117;
    public static final int TUPLE=118;
    public static final int UNION=119;
    public static final int USING=120;
    public static final int VOID=121;
    public static final int WS=122;
    public static final int ANY=123;
    public static final int BAG_TYPE=124;
    public static final int BAG_TYPE_CAST=125;
    public static final int BAG_VAL=126;
    public static final int BIN_EXPR=127;
    public static final int BOOL=128;
    public static final int BOOL_COND=129;
    public static final int CAST_EXPR=130;
    public static final int COL_RANGE=131;
    public static final int EXPR_IN_PAREN=132;
    public static final int FIELD_DEF=133;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=134;
    public static final int FOREACH_PLAN_COMPLEX=135;
    public static final int FOREACH_PLAN_SIMPLE=136;
    public static final int FUNC=137;
    public static final int FUNC_EVAL=138;
    public static final int FUNC_REF=139;
    public static final int IDENTIFIER=140;
    public static final int JOIN_ITEM=141;
    public static final int KEY_VAL_PAIR=142;
    public static final int MACRO_BODY=143;
    public static final int MACRO_DEF=144;
    public static final int MACRO_INLINE=145;
    public static final int MAP_TYPE=146;
    public static final int MAP_VAL=147;
    public static final int NEG=148;
    public static final int NESTED_CMD=149;
    public static final int NESTED_CMD_ASSI=150;
    public static final int NESTED_PROJ=151;
    public static final int NULL=152;
    public static final int PARAMS=153;
    public static final int QUERY=154;
    public static final int REALIAS=155;
    public static final int RETURN_VAL=156;
    public static final int SPLIT_BRANCH=157;
    public static final int STATEMENT=158;
    public static final int TOBAG=159;
    public static final int TOMAP=160;
    public static final int TOTUPLE=161;
    public static final int TUPLE_TYPE=162;
    public static final int TUPLE_TYPE_CAST=163;
    public static final int TUPLE_VAL=164;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) 
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }
        
        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:148:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:148:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:148:9: ( statement )* EOF
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:148:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COGROUP||(LA1_0 >= CROSS && LA1_0 <= CUBE)||LA1_0==DEFINE||LA1_0==DISTINCT||LA1_0==FILTER||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER_L||LA1_0==IMPORT||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||LA1_0==RANK||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==UNION) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:148:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query363);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:6: -> ^( QUERY ( statement )* )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:149:9: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:149:18: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:152:1: statement : ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement | realias_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON3=null;
        QueryParser.general_statement_return general_statement4 =null;

        QueryParser.foreach_statement_return foreach_statement5 =null;

        QueryParser.split_statement_return split_statement6 =null;

        QueryParser.inline_statement_return inline_statement7 =null;

        QueryParser.import_statement_return import_statement8 =null;

        QueryParser.realias_statement_return realias_statement9 =null;


        Object SEMI_COLON3_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:152:11: ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement | realias_statement )
            int alt2=7;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case CUBE:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case RANK:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case LEFT_PAREN:
                        {
                        int LA2_10 = input.LA(4);

                        if ( (LA2_10==COGROUP||(LA2_10 >= CROSS && LA2_10 <= CUBE)||LA2_10==DEFINE||LA2_10==DISTINCT||LA2_10==FILTER||LA2_10==GROUP||LA2_10==JOIN||(LA2_10 >= LIMIT && LA2_10 <= LOAD)||LA2_10==MAPREDUCE||LA2_10==ORDER||LA2_10==RANK||LA2_10==SAMPLE||(LA2_10 >= STORE && LA2_10 <= STREAM)||LA2_10==UNION) ) {
                            alt2=2;
                        }
                        else if ( (LA2_10==FOREACH) ) {
                            alt2=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=3;
                        }
                        break;
                    case IDENTIFIER_L:
                        {
                        int LA2_11 = input.LA(4);

                        if ( (LA2_11==LEFT_PAREN) ) {
                            alt2=5;
                        }
                        else if ( (LA2_11==SEMI_COLON) ) {
                            alt2=7;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 8, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_2==COMMA||LA2_2==LEFT_PAREN) ) {
                    alt2=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case COGROUP:
            case CROSS:
            case CUBE:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case RANK:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case LEFT_PAREN:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==COGROUP||(LA2_4 >= CROSS && LA2_4 <= CUBE)||LA2_4==DEFINE||LA2_4==DISTINCT||LA2_4==FILTER||LA2_4==GROUP||LA2_4==JOIN||(LA2_4 >= LIMIT && LA2_4 <= LOAD)||LA2_4==MAPREDUCE||LA2_4==ORDER||LA2_4==RANK||LA2_4==SAMPLE||(LA2_4 >= STORE && LA2_4 <= STREAM)||LA2_4==UNION) ) {
                    alt2=2;
                }
                else if ( (LA2_4==FOREACH) ) {
                    alt2=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                alt2=3;
                }
                break;
            case SPLIT:
                {
                alt2=4;
                }
                break;
            case IMPORT:
                {
                alt2=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:152:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON3=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement391); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:153:13: general_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement406);
                    general_statement4=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement4.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:154:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement420);
                    foreach_statement5=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement5.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:155:13: split_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_statement_in_statement434);
                    split_statement6=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_statement6.getTree());

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:156:13: inline_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_statement_in_statement450);
                    inline_statement7=inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_statement7.getTree());

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:157:13: import_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_statement_in_statement472);
                    import_statement8=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement8.getTree());

                    }
                    break;
                case 7 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:158:13: realias_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_realias_statement_in_statement486);
                    realias_statement9=realias_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_statement9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:161:1: import_statement : import_clause SEMI_COLON !;
    public final QueryParser.import_statement_return import_statement() throws RecognitionException {
        QueryParser.import_statement_return retval = new QueryParser.import_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON11=null;
        QueryParser.import_clause_return import_clause10 =null;


        Object SEMI_COLON11_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:161:18: ( import_clause SEMI_COLON !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:161:20: import_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_import_clause_in_import_statement495);
            import_clause10=import_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause10.getTree());

            SEMI_COLON11=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_import_statement497); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_statement"


    public static class inline_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:164:1: inline_statement : inline_clause SEMI_COLON !;
    public final QueryParser.inline_statement_return inline_statement() throws RecognitionException {
        QueryParser.inline_statement_return retval = new QueryParser.inline_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON13=null;
        QueryParser.inline_clause_return inline_clause12 =null;


        Object SEMI_COLON13_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:164:18: ( inline_clause SEMI_COLON !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:164:20: inline_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_inline_clause_in_inline_statement507);
            inline_clause12=inline_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause12.getTree());

            SEMI_COLON13=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_inline_statement509); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_statement"


    public static class split_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:167:1: split_statement : split_clause SEMI_COLON !;
    public final QueryParser.split_statement_return split_statement() throws RecognitionException {
        QueryParser.split_statement_return retval = new QueryParser.split_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON15=null;
        QueryParser.split_clause_return split_clause14 =null;


        Object SEMI_COLON15_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:167:17: ( split_clause SEMI_COLON !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:167:19: split_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_split_clause_in_split_statement519);
            split_clause14=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause14.getTree());

            SEMI_COLON15=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_split_statement521); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:1: general_statement : ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL17=null;
        Token LEFT_PAREN20=null;
        Token RIGHT_PAREN23=null;
        Token SEMI_COLON24=null;
        QueryParser.alias_return alias16 =null;

        QueryParser.op_clause_return op_clause18 =null;

        QueryParser.parallel_clause_return parallel_clause19 =null;

        QueryParser.op_clause_return op_clause21 =null;

        QueryParser.parallel_clause_return parallel_clause22 =null;


        Object EQUAL17_tree=null;
        Object LEFT_PAREN20_tree=null;
        Object RIGHT_PAREN23_tree=null;
        Object SEMI_COLON24_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:19: ( ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:21: ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:21: ( alias EQUAL )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER_L) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:23: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_general_statement533);
                    alias16=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias16.getTree());

                    EQUAL17=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL17);


                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:38: ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==COGROUP||(LA6_0 >= CROSS && LA6_0 <= CUBE)||LA6_0==DEFINE||LA6_0==DISTINCT||LA6_0==FILTER||LA6_0==GROUP||LA6_0==JOIN||(LA6_0 >= LIMIT && LA6_0 <= LOAD)||LA6_0==MAPREDUCE||LA6_0==ORDER||LA6_0==RANK||LA6_0==SAMPLE||(LA6_0 >= STORE && LA6_0 <= STREAM)||LA6_0==UNION) ) {
                alt6=1;
            }
            else if ( (LA6_0==LEFT_PAREN) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:39: op_clause ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_op_clause_in_general_statement541);
                    op_clause18=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause18.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:49: ( parallel_clause )?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==PARALLEL) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:49: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement543);
                            parallel_clause19=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause19.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:68: LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN20=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_general_statement548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN20);


                    pushFollow(FOLLOW_op_clause_in_general_statement550);
                    op_clause21=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause21.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:89: ( parallel_clause )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==PARALLEL) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:170:89: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement552);
                            parallel_clause22=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause22.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN23=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_general_statement555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN23);


                    }
                    break;

            }


            SEMI_COLON24=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_general_statement558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON24);


            // AST REWRITE
            // elements: op_clause, alias, parallel_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 171:18: -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:171:21: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:171:34: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_op_clause.nextTree());

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:171:51: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class realias_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:174:1: realias_statement : realias_clause SEMI_COLON !;
    public final QueryParser.realias_statement_return realias_statement() throws RecognitionException {
        QueryParser.realias_statement_return retval = new QueryParser.realias_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON26=null;
        QueryParser.realias_clause_return realias_clause25 =null;


        Object SEMI_COLON26_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:174:19: ( realias_clause SEMI_COLON !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:174:21: realias_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_realias_clause_in_realias_statement601);
            realias_clause25=realias_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, realias_clause25.getTree());

            SEMI_COLON26=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_realias_statement603); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_statement"


    public static class realias_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "realias_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:177:1: realias_clause : alias EQUAL identifier -> ^( REALIAS alias identifier ) ;
    public final QueryParser.realias_clause_return realias_clause() throws RecognitionException {
        QueryParser.realias_clause_return retval = new QueryParser.realias_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL28=null;
        QueryParser.alias_return alias27 =null;

        QueryParser.identifier_return identifier29 =null;


        Object EQUAL28_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:177:16: ( alias EQUAL identifier -> ^( REALIAS alias identifier ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:177:18: alias EQUAL identifier
            {
            pushFollow(FOLLOW_alias_in_realias_clause613);
            alias27=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias27.getTree());

            EQUAL28=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_realias_clause615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL28);


            pushFollow(FOLLOW_identifier_in_realias_clause617);
            identifier29=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier29.getTree());

            // AST REWRITE
            // elements: identifier, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:5: -> ^( REALIAS alias identifier )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:178:8: ^( REALIAS alias identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(REALIAS, "REALIAS")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "realias_clause"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:181:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL30=null;
        Token INTEGER31=null;

        Object PARALLEL30_tree=null;
        Object INTEGER31_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:181:17: ( PARALLEL ^ INTEGER )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:181:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL30=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL30_tree = 
            (Object)adaptor.create(PARALLEL30)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL30_tree, root_0);
            }

            INTEGER31=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER31_tree = 
            (Object)adaptor.create(INTEGER31)
            ;
            adaptor.addChild(root_0, INTEGER31_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:1: foreach_statement : ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.foreach_complex_statement_return foreach_complex_statement32 =null;

        QueryParser.foreach_simple_statement_return foreach_simple_statement33 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:19: ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement )
            int alt7=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                int LA7_1 = input.LA(2);

                if ( (((synpred13_QueryParser()&&synpred13_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt7=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                int LA7_2 = input.LA(2);

                if ( (synpred13_QueryParser()) ) {
                    alt7=1;
                }
                else if ( (true) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                alt7=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_complex_statement_in_foreach_statement679);
                    foreach_complex_statement32=foreach_complex_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_complex_statement32.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:189:21: foreach_simple_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_simple_statement_in_foreach_statement701);
                    foreach_simple_statement33=foreach_simple_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_simple_statement33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_complex_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_complex_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:1: foreach_complex_statement : ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) ;
    public final QueryParser.foreach_complex_statement_return foreach_complex_statement() throws RecognitionException {
        QueryParser.foreach_complex_statement_return retval = new QueryParser.foreach_complex_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL35=null;
        Token SEMI_COLON37=null;
        QueryParser.alias_return alias34 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex36 =null;


        Object EQUAL35_tree=null;
        Object SEMI_COLON37_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_complex");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:27: ( ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:29: ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )?
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:29: ( alias EQUAL )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==IDENTIFIER_L) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:31: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_complex_statement712);
                    alias34=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias34.getTree());

                    EQUAL35=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_complex_statement714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL35);


                    }
                    break;

            }


            pushFollow(FOLLOW_foreach_clause_complex_in_foreach_complex_statement719);
            foreach_clause_complex36=foreach_clause_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_foreach_clause_complex.add(foreach_clause_complex36.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:69: ( SEMI_COLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMI_COLON) ) {
                int LA9_1 = input.LA(2);

                if ( (synpred15_QueryParser()) ) {
                    alt9=1;
                }
            }
            switch (alt9) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:69: SEMI_COLON
                    {
                    SEMI_COLON37=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_complex_statement721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON37);


                    }
                    break;

            }


            // AST REWRITE
            // elements: foreach_clause_complex, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:26: -> ^( STATEMENT ( alias )? foreach_clause_complex )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:193:29: ^( STATEMENT ( alias )? foreach_clause_complex )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:193:42: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_complex.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_complex_statement"


    public static class foreach_simple_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_simple_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:1: foreach_simple_statement : ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) ;
    public final QueryParser.foreach_simple_statement_return foreach_simple_statement() throws RecognitionException {
        QueryParser.foreach_simple_statement_return retval = new QueryParser.foreach_simple_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL39=null;
        Token LEFT_PAREN42=null;
        Token RIGHT_PAREN45=null;
        Token SEMI_COLON46=null;
        QueryParser.alias_return alias38 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple40 =null;

        QueryParser.parallel_clause_return parallel_clause41 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple43 =null;

        QueryParser.parallel_clause_return parallel_clause44 =null;


        Object EQUAL39_tree=null;
        Object LEFT_PAREN42_tree=null;
        Object RIGHT_PAREN45_tree=null;
        Object SEMI_COLON46_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_simple");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:26: ( ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:28: ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:28: ( alias EQUAL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IDENTIFIER_L) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:30: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_simple_statement771);
                    alias38=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias38.getTree());

                    EQUAL39=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_simple_statement773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL39);


                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:45: ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==FOREACH) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEFT_PAREN) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:46: foreach_clause_simple ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement779);
                    foreach_clause_simple40=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple40.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:68: ( parallel_clause )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==PARALLEL) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:196:68: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement781);
                            parallel_clause41=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause41.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:197:51: LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN42=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_foreach_simple_statement835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN42);


                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement837);
                    foreach_clause_simple43=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple43.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:197:84: ( parallel_clause )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==PARALLEL) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:197:84: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement839);
                            parallel_clause44=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause44.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN45=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_foreach_simple_statement842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN45);


                    }
                    break;

            }


            SEMI_COLON46=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_simple_statement845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON46);


            // AST REWRITE
            // elements: foreach_clause_simple, alias, parallel_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:25: -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:198:28: ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:198:41: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_simple.nextTree());

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:198:70: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_simple_statement"


    public static class alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:201:1: alias : identifier ;
    public final QueryParser.alias_return alias() throws RecognitionException {
        QueryParser.alias_return retval = new QueryParser.alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_return identifier47 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:201:7: ( identifier )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:201:9: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_alias894);
            identifier47=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier47.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:204:1: parameter : ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INTEGER49=null;
        Token DOUBLENUMBER50=null;
        Token QUOTEDSTRING51=null;
        Token DOLLARVAR52=null;
        QueryParser.identifier_return identifier48 =null;


        Object INTEGER49_tree=null;
        Object DOUBLENUMBER50_tree=null;
        Object QUOTEDSTRING51_tree=null;
        Object DOLLARVAR52_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:205:5: ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR )
            int alt14=5;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                alt14=1;
                }
                break;
            case INTEGER:
                {
                alt14=2;
                }
                break;
            case DOUBLENUMBER:
                {
                alt14=3;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=4;
                }
                break;
            case DOLLARVAR:
                {
                alt14=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:205:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_parameter908);
                    identifier48=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier48.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:206:7: INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    INTEGER49=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parameter917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER49_tree = 
                    (Object)adaptor.create(INTEGER49)
                    ;
                    adaptor.addChild(root_0, INTEGER49_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:207:7: DOUBLENUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLENUMBER50=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_parameter926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER50_tree = 
                    (Object)adaptor.create(DOUBLENUMBER50)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER50_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:208:7: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING51=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_parameter934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING51_tree = 
                    (Object)adaptor.create(QUOTEDSTRING51)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING51_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:209:7: DOLLARVAR
                    {
                    root_0 = (Object)adaptor.nil();


                    DOLLARVAR52=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_parameter942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLARVAR52_tree = 
                    (Object)adaptor.create(DOLLARVAR52)
                    ;
                    adaptor.addChild(root_0, DOLLARVAR52_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "content"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:1: content : LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.content_return content() throws RecognitionException {
        QueryParser.content_return retval = new QueryParser.content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY53=null;
        Token set55=null;
        Token RIGHT_CURLY56=null;
        QueryParser.content_return content54 =null;


        Object LEFT_CURLY53_tree=null;
        Object set55_tree=null;
        Object RIGHT_CURLY56_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:9: ( LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:11: LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY53=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_content951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY53_tree = 
            (Object)adaptor.create(LEFT_CURLY53)
            ;
            adaptor.addChild(root_0, LEFT_CURLY53_tree);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:22: ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop15:
            do {
                int alt15=3;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==LEFT_CURLY) ) {
                    alt15=1;
                }
                else if ( ((LA15_0 >= ALL && LA15_0 <= LEFT_BRACKET)||(LA15_0 >= LEFT_PAREN && LA15_0 <= RIGHT_BRACKET)||(LA15_0 >= RIGHT_PAREN && LA15_0 <= TUPLE_VAL)) ) {
                    alt15=2;
                }


                switch (alt15) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:24: content
            	    {
            	    pushFollow(FOLLOW_content_in_content955);
            	    content54=content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, content54.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:212:34: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set55=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set55)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            RIGHT_CURLY56=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_content971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY56_tree = 
            (Object)adaptor.create(RIGHT_CURLY56)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY56_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "content"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:215:1: op_clause : ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause57 =null;

        QueryParser.load_clause_return load_clause58 =null;

        QueryParser.group_clause_return group_clause59 =null;

        QueryParser.cube_clause_return cube_clause60 =null;

        QueryParser.store_clause_return store_clause61 =null;

        QueryParser.filter_clause_return filter_clause62 =null;

        QueryParser.distinct_clause_return distinct_clause63 =null;

        QueryParser.limit_clause_return limit_clause64 =null;

        QueryParser.sample_clause_return sample_clause65 =null;

        QueryParser.order_clause_return order_clause66 =null;

        QueryParser.rank_clause_return rank_clause67 =null;

        QueryParser.cross_clause_return cross_clause68 =null;

        QueryParser.join_clause_return join_clause69 =null;

        QueryParser.union_clause_return union_clause70 =null;

        QueryParser.stream_clause_return stream_clause71 =null;

        QueryParser.mr_clause_return mr_clause72 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:215:11: ( define_clause | load_clause | group_clause | cube_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | rank_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt16=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt16=1;
                }
                break;
            case LOAD:
                {
                alt16=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt16=3;
                }
                break;
            case CUBE:
                {
                alt16=4;
                }
                break;
            case STORE:
                {
                alt16=5;
                }
                break;
            case FILTER:
                {
                alt16=6;
                }
                break;
            case DISTINCT:
                {
                alt16=7;
                }
                break;
            case LIMIT:
                {
                alt16=8;
                }
                break;
            case SAMPLE:
                {
                alt16=9;
                }
                break;
            case ORDER:
                {
                alt16=10;
                }
                break;
            case RANK:
                {
                alt16=11;
                }
                break;
            case CROSS:
                {
                alt16=12;
                }
                break;
            case JOIN:
                {
                alt16=13;
                }
                break;
            case UNION:
                {
                alt16=14;
                }
                break;
            case STREAM:
                {
                alt16=15;
                }
                break;
            case MAPREDUCE:
                {
                alt16=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:215:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause980);
                    define_clause57=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause57.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:216:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause995);
                    load_clause58=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause58.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:217:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause1009);
                    group_clause59=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause59.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:218:13: cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cube_clause_in_op_clause1023);
                    cube_clause60=cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_clause60.getTree());

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:219:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause1037);
                    store_clause61=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause61.getTree());

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:220:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause1051);
                    filter_clause62=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause62.getTree());

                    }
                    break;
                case 7 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:221:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause1065);
                    distinct_clause63=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause63.getTree());

                    }
                    break;
                case 8 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:222:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause1079);
                    limit_clause64=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause64.getTree());

                    }
                    break;
                case 9 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:223:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause1093);
                    sample_clause65=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause65.getTree());

                    }
                    break;
                case 10 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:224:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause1107);
                    order_clause66=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause66.getTree());

                    }
                    break;
                case 11 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:225:13: rank_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_clause_in_op_clause1121);
                    rank_clause67=rank_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_clause67.getTree());

                    }
                    break;
                case 12 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:226:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause1135);
                    cross_clause68=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause68.getTree());

                    }
                    break;
                case 13 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:227:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause1149);
                    join_clause69=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause69.getTree());

                    }
                    break;
                case 14 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:228:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause1163);
                    union_clause70=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause70.getTree());

                    }
                    break;
                case 15 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:229:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause1177);
                    stream_clause71=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause71.getTree());

                    }
                    break;
                case 16 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:230:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause1191);
                    mr_clause72=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause72.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:1: macro_param_clause : LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN73=null;
        Token COMMA75=null;
        Token RIGHT_PAREN77=null;
        QueryParser.alias_return alias74 =null;

        QueryParser.alias_return alias76 =null;


        Object LEFT_PAREN73_tree=null;
        Object COMMA75_tree=null;
        Object RIGHT_PAREN77_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:20: ( LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:22: LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN
            {
            LEFT_PAREN73=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN73);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:33: ( alias ( COMMA alias )* )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==IDENTIFIER_L) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:35: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_param_clause1204);
                    alias74=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias74.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:41: ( COMMA alias )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==COMMA) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:233:42: COMMA alias
                    	    {
                    	    COMMA75=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1207); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA75);


                    	    pushFollow(FOLLOW_alias_in_macro_param_clause1209);
                    	    alias76=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias76.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN77=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN77);


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 234:5: -> ^( PARAMS ( alias )* )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:234:8: ^( PARAMS ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:234:17: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:237:1: macro_return_clause : RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS78=null;
        Token COMMA80=null;
        Token VOID82=null;
        QueryParser.alias_return alias79 =null;

        QueryParser.alias_return alias81 =null;


        Object RETURNS78_tree=null;
        Object COMMA80_tree=null;
        Object VOID82_tree=null;
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:5: ( RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:7: RETURNS ( ( alias ( COMMA alias )* ) | VOID )
            {
            RETURNS78=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS78);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:15: ( ( alias ( COMMA alias )* ) | VOID )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IDENTIFIER_L) ) {
                alt20=1;
            }
            else if ( (LA20_0==VOID) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:16: ( alias ( COMMA alias )* )
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:16: ( alias ( COMMA alias )* )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:17: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_return_clause1247);
                    alias79=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias79.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:23: ( COMMA alias )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:24: COMMA alias
                    	    {
                    	    COMMA80=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1250); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA80);


                    	    pushFollow(FOLLOW_alias_in_macro_return_clause1252);
                    	    alias81=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias81.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:238:41: VOID
                    {
                    VOID82=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID82);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 239:9: -> ^( RETURN_VAL ( alias )* )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:239:12: ^( RETURN_VAL ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:239:25: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:242:1: macro_body_clause : content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.content_return content83 =null;


        RewriteRuleSubtreeStream stream_content=new RewriteRuleSubtreeStream(adaptor,"rule content");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:242:19: ( content -> ^( MACRO_BODY ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:242:21: content
            {
            pushFollow(FOLLOW_content_in_macro_body_clause1286);
            content83=content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_content.add(content83.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 243:5: -> ^( MACRO_BODY )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:243:8: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (content83!=null?input.toString(content83.start,content83.stop):null)), this.getSourceName(), (content83!=null?((Token)content83.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:246:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause84 =null;

        QueryParser.macro_return_clause_return macro_return_clause85 =null;

        QueryParser.macro_body_clause_return macro_body_clause86 =null;


        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:246:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:246:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1308);
            macro_param_clause84=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause84.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1310);
            macro_return_clause85=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause85.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1312);
            macro_body_clause86=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause86.getTree());

            // AST REWRITE
            // elements: macro_return_clause, macro_param_clause, macro_body_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:247:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:250:1: inline_return_clause : ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL88=null;
        Token COMMA90=null;
        Token EQUAL92=null;
        QueryParser.alias_return alias87 =null;

        QueryParser.alias_return alias89 =null;

        QueryParser.alias_return alias91 =null;


        Object EQUAL88_tree=null;
        Object COMMA90_tree=null;
        Object EQUAL92_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:251:5: ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) )
            int alt22=3;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==IDENTIFIER_L) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt22=1;
                    }
                    break;
                case COMMA:
                    {
                    alt22=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt22=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:251:7: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1342);
                    alias87=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias87.getTree());

                    EQUAL88=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL88);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 251:19: -> ^( RETURN_VAL alias )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:251:22: ^( RETURN_VAL alias )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_alias.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:252:4: alias ( COMMA alias )+ EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1357);
                    alias89=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias89.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:252:10: ( COMMA alias )+
                    int cnt21=0;
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:252:11: COMMA alias
                    	    {
                    	    COMMA90=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1360); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA90);


                    	    pushFollow(FOLLOW_alias_in_inline_return_clause1362);
                    	    alias91=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt21 >= 1 ) break loop21;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(21, input);
                                throw eee;
                        }
                        cnt21++;
                    } while (true);


                    EQUAL92=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL92);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 252:31: -> ^( RETURN_VAL ( alias )+ )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:252:34: ^( RETURN_VAL ( alias )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_alias.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_alias.hasNext() ) {
                            adaptor.addChild(root_1, stream_alias.nextTree());

                        }
                        stream_alias.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:253:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 253:4: -> ^( RETURN_VAL )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:253:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN93=null;
        Token COMMA95=null;
        Token RIGHT_PAREN97=null;
        QueryParser.parameter_return parameter94 =null;

        QueryParser.parameter_return parameter96 =null;


        Object LEFT_PAREN93_tree=null;
        Object COMMA95_tree=null;
        Object RIGHT_PAREN97_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN93=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN93);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:34: ( parameter ( COMMA parameter )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==DOLLARVAR||LA24_0==DOUBLENUMBER||LA24_0==IDENTIFIER_L||LA24_0==INTEGER||LA24_0==QUOTEDSTRING) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1399);
                    parameter94=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter94.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:46: ( COMMA parameter )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:256:47: COMMA parameter
                    	    {
                    	    COMMA95=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1402); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA95);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1404);
                    	    parameter96=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter96.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN97=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN97);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:5: -> ^( PARAMS ( parameter )* )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:257:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:257:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:260:1: inline_clause : inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause98 =null;

        QueryParser.alias_return alias99 =null;

        QueryParser.inline_param_clause_return inline_param_clause100 =null;


        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:260:15: ( inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:260:17: inline_return_clause alias inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1433);
            inline_return_clause98=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause98.getTree());

            pushFollow(FOLLOW_alias_in_inline_clause1435);
            alias99=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias99.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1437);
            inline_param_clause100=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause100.getTree());

            // AST REWRITE
            // elements: inline_param_clause, alias, inline_return_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:5: -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:261:8: ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:264:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT101=null;
        Token QUOTEDSTRING102=null;

        Object IMPORT101_tree=null;
        Object QUOTEDSTRING102_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:264:15: ( IMPORT ^ QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:264:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT101=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT101_tree = 
            (Object)adaptor.create(IMPORT101)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT101_tree, root_0);
            }

            QUOTEDSTRING102=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING102_tree = 
            (Object)adaptor.create(QUOTEDSTRING102)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING102_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:1: define_clause : DEFINE ^ alias ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE103=null;
        QueryParser.alias_return alias104 =null;

        QueryParser.cmd_return cmd105 =null;

        QueryParser.func_clause_return func_clause106 =null;

        QueryParser.macro_clause_return macro_clause107 =null;


        Object DEFINE103_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:15: ( DEFINE ^ alias ( cmd | func_clause | macro_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:17: DEFINE ^ alias ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE103=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE103_tree = 
            (Object)adaptor.create(DEFINE103)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE103_tree, root_0);
            }

            pushFollow(FOLLOW_alias_in_define_clause1477);
            alias104=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alias104.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:31: ( cmd | func_clause | macro_clause )
            int alt25=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt25=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case CUBE:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt25=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt25=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:33: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1481);
                    cmd105=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd105.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:39: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1485);
                    func_clause106=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause106.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:267:53: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1489);
                    macro_clause107=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause107.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND108=null;
        QueryParser.ship_clause_return ship_clause109 =null;

        QueryParser.cache_clause_return cache_clause110 =null;

        QueryParser.input_clause_return input_clause111 =null;

        QueryParser.output_clause_return output_clause112 =null;

        QueryParser.error_clause_return error_clause113 =null;


        Object EXECCOMMAND108_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND108=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd1499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND108_tree = 
            (Object)adaptor.create(EXECCOMMAND108)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND108_tree, root_0);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop26:
            do {
                int alt26=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt26=1;
                    }
                    break;
                case CACHE:
                    {
                    alt26=2;
                    }
                    break;
                case INPUT:
                    {
                    alt26=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt26=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt26=5;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd1504);
            	    ship_clause109=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause109.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd1508);
            	    cache_clause110=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause110.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd1512);
            	    input_clause111=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause111.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd1516);
            	    output_clause112=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause112.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:270:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd1520);
            	    error_clause113=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause113.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:273:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP114=null;
        Token LEFT_PAREN115=null;
        Token RIGHT_PAREN117=null;
        QueryParser.path_list_return path_list116 =null;


        Object SHIP114_tree=null;
        Object LEFT_PAREN115_tree=null;
        Object RIGHT_PAREN117_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:273:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:273:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP114=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause1532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP114_tree = 
            (Object)adaptor.create(SHIP114)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP114_tree, root_0);
            }

            LEFT_PAREN115=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause1535); if (state.failed) return retval;

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:273:33: ( path_list )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==QUOTEDSTRING) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:273:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause1538);
                    path_list116=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list116.getTree());

                    }
                    break;

            }


            RIGHT_PAREN117=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause1541); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:276:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING118=null;
        Token COMMA119=null;
        Token QUOTEDSTRING120=null;

        Object QUOTEDSTRING118_tree=null;
        Object COMMA119_tree=null;
        Object QUOTEDSTRING120_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:276:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:276:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING118=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING118);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:276:26: ( COMMA QUOTEDSTRING )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:276:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA119=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list1555); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA119);


            	    QUOTEDSTRING120=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1557); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING120);


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:10: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:280:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE121=null;
        Token LEFT_PAREN122=null;
        Token RIGHT_PAREN124=null;
        QueryParser.path_list_return path_list123 =null;


        Object CACHE121_tree=null;
        Object LEFT_PAREN122_tree=null;
        Object RIGHT_PAREN124_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:280:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:280:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE121=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause1584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE121_tree = 
            (Object)adaptor.create(CACHE121)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE121_tree, root_0);
            }

            LEFT_PAREN122=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause1587); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause1590);
            path_list123=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list123.getTree());

            RIGHT_PAREN124=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause1592); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:283:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT125=null;
        Token LEFT_PAREN126=null;
        Token RIGHT_PAREN128=null;
        QueryParser.stream_cmd_list_return stream_cmd_list127 =null;


        Object INPUT125_tree=null;
        Object LEFT_PAREN126_tree=null;
        Object RIGHT_PAREN128_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:283:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:283:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT125=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause1602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT125_tree = 
            (Object)adaptor.create(INPUT125)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT125_tree, root_0);
            }

            LEFT_PAREN126=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause1605); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause1608);
            stream_cmd_list127=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list127.getTree());

            RIGHT_PAREN128=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause1610); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:286:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA130=null;
        QueryParser.stream_cmd_return stream_cmd129 =null;

        QueryParser.stream_cmd_return stream_cmd131 =null;


        Object COMMA130_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:286:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:286:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1620);
            stream_cmd129=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd129.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:286:30: ( COMMA stream_cmd )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:286:32: COMMA stream_cmd
            	    {
            	    COMMA130=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list1624); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA130);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1626);
            	    stream_cmd131=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd131.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:16: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set132=null;
        Token USING133=null;
        QueryParser.func_clause_return func_clause134 =null;


        Object set132_tree=null;
        Object USING133_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )?
            {
            root_0 = (Object)adaptor.nil();


            set132=(Token)input.LT(1);

            set132=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set132)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:49: ( USING ! ( func_clause ) )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==USING) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:51: USING ! ( func_clause )
                    {
                    USING133=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd1675); if (state.failed) return retval;

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:58: ( func_clause )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:290:60: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_stream_cmd1680);
                    func_clause134=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause134.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:293:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT135=null;
        Token LEFT_PAREN136=null;
        Token RIGHT_PAREN138=null;
        QueryParser.stream_cmd_list_return stream_cmd_list137 =null;


        Object OUTPUT135_tree=null;
        Object LEFT_PAREN136_tree=null;
        Object RIGHT_PAREN138_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:293:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:293:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT135=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause1694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT135_tree = 
            (Object)adaptor.create(OUTPUT135)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT135_tree, root_0);
            }

            LEFT_PAREN136=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause1697); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause1700);
            stream_cmd_list137=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list137.getTree());

            RIGHT_PAREN138=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause1702); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR139=null;
        Token LEFT_PAREN140=null;
        Token QUOTEDSTRING141=null;
        Token LIMIT142=null;
        Token INTEGER143=null;
        Token RIGHT_PAREN144=null;

        Object STDERROR139_tree=null;
        Object LEFT_PAREN140_tree=null;
        Object QUOTEDSTRING141_tree=null;
        Object LIMIT142_tree=null;
        Object INTEGER143_tree=null;
        Object RIGHT_PAREN144_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR139=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause1712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR139_tree = 
            (Object)adaptor.create(STDERROR139)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR139_tree, root_0);
            }

            LEFT_PAREN140=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause1715); if (state.failed) return retval;

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==QUOTEDSTRING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING141=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause1720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING141_tree = 
                    (Object)adaptor.create(QUOTEDSTRING141)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING141_tree);
                    }

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:53: ( LIMIT ! INTEGER )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==LIMIT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:296:55: LIMIT ! INTEGER
                            {
                            LIMIT142=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause1724); if (state.failed) return retval;

                            INTEGER143=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause1727); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER143_tree = 
                            (Object)adaptor.create(INTEGER143)
                            ;
                            adaptor.addChild(root_0, INTEGER143_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN144=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause1735); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:1: load_clause : LOAD ^ filename ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD145=null;
        Token USING147=null;
        QueryParser.filename_return filename146 =null;

        QueryParser.func_clause_return func_clause148 =null;

        QueryParser.as_clause_return as_clause149 =null;


        Object LOAD145_tree=null;
        Object USING147_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:13: ( LOAD ^ filename ( USING ! func_clause )? ( as_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:15: LOAD ^ filename ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD145=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause1745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD145_tree = 
            (Object)adaptor.create(LOAD145)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD145_tree, root_0);
            }

            pushFollow(FOLLOW_filename_in_load_clause1748);
            filename146=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename146.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:30: ( USING ! func_clause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==USING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:32: USING ! func_clause
                    {
                    USING147=(Token)match(input,USING,FOLLOW_USING_in_load_clause1752); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause1755);
                    func_clause148=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause148.getTree());

                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:54: ( as_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:299:54: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause1760);
                    as_clause149=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause149.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:302:1: filename : QUOTEDSTRING ;
    public final QueryParser.filename_return filename() throws RecognitionException {
        QueryParser.filename_return retval = new QueryParser.filename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING150=null;

        Object QUOTEDSTRING150_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:302:10: ( QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:302:12: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING150=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename1770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING150_tree = 
            (Object)adaptor.create(QUOTEDSTRING150)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING150_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:1: as_clause : AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS151=null;
        Token LEFT_PAREN152=null;
        Token RIGHT_PAREN154=null;
        QueryParser.field_def_list_return field_def_list153 =null;

        QueryParser.field_def_return field_def155 =null;


        Object AS151_tree=null;
        Object LEFT_PAREN152_tree=null;
        Object RIGHT_PAREN154_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:10: ( AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:12: AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
            {
            root_0 = (Object)adaptor.nil();


            AS151=(Token)match(input,AS,FOLLOW_AS_in_as_clause1778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS151_tree = 
            (Object)adaptor.create(AS151)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS151_tree, root_0);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:16: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==LEFT_PAREN) ) {
                int LA35_1 = input.LA(2);

                if ( (synpred68_QueryParser()) ) {
                    alt35=1;
                }
                else if ( (true) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA35_0 >= BAG && LA35_0 <= BOOLEAN)||LA35_0==BYTEARRAY||LA35_0==CHARARRAY||LA35_0==DATETIME||LA35_0==DOUBLE||LA35_0==FLOAT||LA35_0==IDENTIFIER_L||LA35_0==INT||(LA35_0 >= LEFT_BRACKET && LA35_0 <= LEFT_CURLY)||LA35_0==LONG||LA35_0==MAP||LA35_0==TUPLE) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:18: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:18: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:20: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN152=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause1785); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_as_clause1788);
                    field_def_list153=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list153.getTree());

                    RIGHT_PAREN154=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause1790); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:64: field_def
                    {
                    pushFollow(FOLLOW_field_def_in_as_clause1797);
                    field_def155=field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def155.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:308:1: field_def : ( identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) | type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) );
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON157=null;
        QueryParser.identifier_return identifier156 =null;

        QueryParser.type_return type158 =null;

        QueryParser.type_return type159 =null;


        Object COLON157_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:308:11: ( identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) | type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==IDENTIFIER_L) ) {
                alt37=1;
            }
            else if ( ((LA37_0 >= BAG && LA37_0 <= BOOLEAN)||LA37_0==BYTEARRAY||LA37_0==CHARARRAY||LA37_0==DATETIME||LA37_0==DOUBLE||LA37_0==FLOAT||LA37_0==INT||(LA37_0 >= LEFT_BRACKET && LA37_0 <= LEFT_PAREN)||LA37_0==LONG||LA37_0==MAP||LA37_0==TUPLE) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:308:13: identifier ( COLON type )?
                    {
                    pushFollow(FOLLOW_identifier_in_field_def1808);
                    identifier156=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier156.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:308:24: ( COLON type )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==COLON) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:308:26: COLON type
                            {
                            COLON157=(Token)match(input,COLON,FOLLOW_COLON_in_field_def1812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON157);


                            pushFollow(FOLLOW_type_in_field_def1814);
                            type158=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type158.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: type, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 309:10: -> ^( FIELD_DEF identifier ( type )? )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:309:13: ^( FIELD_DEF identifier ( type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:309:37: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:310:13: type
                    {
                    pushFollow(FOLLOW_type_in_field_def1853);
                    type159=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type159.getTree());

                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 311:10: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:311:13: ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:314:1: field_def_list : field_def ( COMMA field_def )* -> ( field_def )+ ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA161=null;
        QueryParser.field_def_return field_def160 =null;

        QueryParser.field_def_return field_def162 =null;


        Object COMMA161_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_field_def=new RewriteRuleSubtreeStream(adaptor,"rule field_def");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:314:16: ( field_def ( COMMA field_def )* -> ( field_def )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:314:18: field_def ( COMMA field_def )*
            {
            pushFollow(FOLLOW_field_def_in_field_def_list1881);
            field_def160=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_def.add(field_def160.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:314:28: ( COMMA field_def )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==COMMA) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:314:30: COMMA field_def
            	    {
            	    COMMA161=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list1885); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA161);


            	    pushFollow(FOLLOW_field_def_in_field_def_list1887);
            	    field_def162=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_def.add(field_def162.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            // AST REWRITE
            // elements: field_def
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:15: -> ( field_def )+
            {
                if ( !(stream_field_def.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_def.hasNext() ) {
                    adaptor.addChild(root_0, stream_field_def.nextTree());

                }
                stream_field_def.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:1: type : ( simple_type | tuple_type | bag_type | map_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type163 =null;

        QueryParser.tuple_type_return tuple_type164 =null;

        QueryParser.bag_type_return bag_type165 =null;

        QueryParser.map_type_return map_type166 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:6: ( simple_type | tuple_type | bag_type | map_type )
            int alt39=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt39=1;
                }
                break;
            case LEFT_PAREN:
            case TUPLE:
                {
                alt39=2;
                }
                break;
            case BAG:
            case LEFT_CURLY:
                {
                alt39=3;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt39=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:8: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type1918);
                    simple_type163=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type163.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:22: tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_in_type1922);
                    tuple_type164=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type164.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:35: bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_in_type1926);
                    bag_type165=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type165.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:318:46: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type1930);
                    map_type166=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type166.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:321:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set167=null;

        Object set167_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:321:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | DATETIME | CHARARRAY | BYTEARRAY )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set167=(Token)input.LT(1);

            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DATETIME||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set167)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:1: tuple_type : ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE168=null;
        Token LEFT_PAREN169=null;
        Token RIGHT_PAREN171=null;
        QueryParser.field_def_list_return field_def_list170 =null;


        Object TUPLE168_tree=null;
        Object LEFT_PAREN169_tree=null;
        Object RIGHT_PAREN171_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:12: ( ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:14: ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:14: ( TUPLE )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==TUPLE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:14: TUPLE
                    {
                    TUPLE168=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type1976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE168);


                    }
                    break;

            }


            LEFT_PAREN169=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type1979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN169);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:32: ( field_def_list )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0 >= BAG && LA41_0 <= BOOLEAN)||LA41_0==BYTEARRAY||LA41_0==CHARARRAY||LA41_0==DATETIME||LA41_0==DOUBLE||LA41_0==FLOAT||LA41_0==IDENTIFIER_L||LA41_0==INT||(LA41_0 >= LEFT_BRACKET && LA41_0 <= LEFT_PAREN)||LA41_0==LONG||LA41_0==MAP||LA41_0==TUPLE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:324:32: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_tuple_type1981);
                    field_def_list170=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list170.getTree());

                    }
                    break;

            }


            RIGHT_PAREN171=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type1984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN171);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:11: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:325:14: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:325:28: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:1: bag_type : ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) );
    public final QueryParser.bag_type_return bag_type() throws RecognitionException {
        QueryParser.bag_type_return retval = new QueryParser.bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG172=null;
        Token LEFT_CURLY173=null;
        Token COLON175=null;
        Token RIGHT_CURLY177=null;
        Token BAG178=null;
        Token LEFT_CURLY179=null;
        Token COLON181=null;
        Token RIGHT_CURLY183=null;
        QueryParser.null_keyword_return null_keyword174 =null;

        QueryParser.tuple_type_return tuple_type176 =null;

        QueryParser.identifier_return identifier180 =null;

        QueryParser.tuple_type_return tuple_type182 =null;


        Object BAG172_tree=null;
        Object LEFT_CURLY173_tree=null;
        Object COLON175_tree=null;
        Object RIGHT_CURLY177_tree=null;
        Object BAG178_tree=null;
        Object LEFT_CURLY179_tree=null;
        Object COLON181_tree=null;
        Object RIGHT_CURLY183_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        RewriteRuleSubtreeStream stream_null_keyword=new RewriteRuleSubtreeStream(adaptor,"rule null_keyword");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:10: ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY -> ^( BAG_TYPE ( tuple_type )? ) | ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==BAG) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred86_QueryParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA47_0==LEFT_CURLY) ) {
                int LA47_2 = input.LA(2);

                if ( (synpred86_QueryParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: ( BAG )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==BAG) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: BAG
                            {
                            BAG172=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type2014); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BAG.add(BAG172);


                            }
                            break;

                    }


                    LEFT_CURLY173=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type2017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY173);


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:28: ( null_keyword COLON ( tuple_type )? )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:30: null_keyword COLON ( tuple_type )?
                    {
                    pushFollow(FOLLOW_null_keyword_in_bag_type2021);
                    null_keyword174=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_keyword.add(null_keyword174.getTree());

                    COLON175=(Token)match(input,COLON,FOLLOW_COLON_in_bag_type2023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON175);


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:49: ( tuple_type )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==LEFT_PAREN||LA43_0==TUPLE) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:49: tuple_type
                            {
                            pushFollow(FOLLOW_tuple_type_in_bag_type2025);
                            tuple_type176=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type176.getTree());

                            }
                            break;

                    }


                    }


                    RIGHT_CURLY177=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type2030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY177);


                    // AST REWRITE
                    // elements: tuple_type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 329:9: -> ^( BAG_TYPE ( tuple_type )? )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:329:12: ^( BAG_TYPE ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:329:24: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:12: ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:12: ( BAG )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==BAG) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:12: BAG
                            {
                            BAG178=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type2062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BAG.add(BAG178);


                            }
                            break;

                    }


                    LEFT_CURLY179=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type2065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY179);


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:28: ( ( identifier COLON )? tuple_type )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==IDENTIFIER_L||LA46_0==LEFT_PAREN||LA46_0==TUPLE) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:30: ( identifier COLON )? tuple_type
                            {
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:30: ( identifier COLON )?
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==IDENTIFIER_L) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:330:32: identifier COLON
                                    {
                                    pushFollow(FOLLOW_identifier_in_bag_type2071);
                                    identifier180=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_identifier.add(identifier180.getTree());

                                    COLON181=(Token)match(input,COLON,FOLLOW_COLON_in_bag_type2073); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON181);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_tuple_type_in_bag_type2078);
                            tuple_type182=tuple_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type182.getTree());

                            }
                            break;

                    }


                    RIGHT_CURLY183=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type2083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY183);


                    // AST REWRITE
                    // elements: tuple_type, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 331:9: -> ^( BAG_TYPE ( identifier )? ( tuple_type )? )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:331:12: ^( BAG_TYPE ( identifier )? ( tuple_type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                        , root_1);

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:331:24: ( identifier )?
                        if ( stream_identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifier.nextTree());

                        }
                        stream_identifier.reset();

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:331:36: ( tuple_type )?
                        if ( stream_tuple_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple_type.nextTree());

                        }
                        stream_tuple_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:1: map_type : ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) ;
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP184=null;
        Token LEFT_BRACKET185=null;
        Token RIGHT_BRACKET187=null;
        QueryParser.type_return type186 =null;


        Object MAP184_tree=null;
        Object LEFT_BRACKET185_tree=null;
        Object RIGHT_BRACKET187_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_MAP=new RewriteRuleTokenStream(adaptor,"token MAP");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:10: ( ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:12: ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:12: ( MAP )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==MAP) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:12: MAP
                    {
                    MAP184=(Token)match(input,MAP,FOLLOW_MAP_in_map_type2114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAP.add(MAP184);


                    }
                    break;

            }


            LEFT_BRACKET185=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map_type2117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET185);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:30: ( type )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( ((LA49_0 >= BAG && LA49_0 <= BOOLEAN)||LA49_0==BYTEARRAY||LA49_0==CHARARRAY||LA49_0==DATETIME||LA49_0==DOUBLE||LA49_0==FLOAT||LA49_0==INT||(LA49_0 >= LEFT_BRACKET && LA49_0 <= LEFT_PAREN)||LA49_0==LONG||LA49_0==MAP||LA49_0==TUPLE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:334:30: type
                    {
                    pushFollow(FOLLOW_type_in_map_type2119);
                    type186=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type186.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET187=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map_type2122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET187);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:9: -> ^( MAP_TYPE ( type )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:335:12: ^( MAP_TYPE ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:335:24: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:338:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN190=null;
        Token RIGHT_PAREN192=null;
        QueryParser.func_name_return func_name188 =null;

        QueryParser.func_name_return func_name189 =null;

        QueryParser.func_args_return func_args191 =null;


        Object LEFT_PAREN190_tree=null;
        Object RIGHT_PAREN192_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:338:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:338:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2150);
                    func_name188=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name188.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 339:12: -> ^( FUNC_REF func_name )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:339:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:340:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2187);
                    func_name189=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name189.getTree());

                    LEFT_PAREN190=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN190);


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:340:36: ( func_args )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==MULTILINE_QUOTEDSTRING||LA50_0==QUOTEDSTRING) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:340:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2191);
                            func_args191=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args191.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN192=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN192);


                    // AST REWRITE
                    // elements: func_name, func_args
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 341:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:341:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:341:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:344:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set194=null;
        QueryParser.eid_return eid193 =null;

        QueryParser.eid_return eid195 =null;


        Object set194_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:344:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:344:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2227);
            eid193=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid193.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:344:17: ( ( PERIOD | DOLLAR ) eid )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==DOLLAR||LA52_0==PERIOD) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:344:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set194=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set194)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2241);
            	    eid195=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid195.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:347:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set196=null;

        Object set196_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:347:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set196=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set196)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:350:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA198=null;
        QueryParser.func_args_string_return func_args_string197 =null;

        QueryParser.func_args_string_return func_args_string199 =null;


        Object COMMA198_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:350:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:350:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2266);
            func_args_string197=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string197.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:350:30: ( COMMA func_args_string )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:350:32: COMMA func_args_string
            	    {
            	    COMMA198=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2270); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA198);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2272);
            	    func_args_string199=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string199.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set200=null;
        Token USING202=null;
        QueryParser.group_item_list_return group_item_list201 =null;

        QueryParser.group_type_return group_type203 =null;

        QueryParser.partition_clause_return partition_clause204 =null;


        Object set200_tree=null;
        Object USING202_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set200=(Token)input.LT(1);

            set200=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set200)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2309);
            group_item_list201=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list201.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:53: ( USING ! group_type )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==USING) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:55: USING ! group_type
                    {
                    USING202=(Token)match(input,USING,FOLLOW_USING_in_group_clause2313); if (state.failed) return retval;

                    pushFollow(FOLLOW_group_type_in_group_clause2316);
                    group_type203=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_type203.getTree());

                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:76: ( partition_clause )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==PARTITION) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:354:76: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2321);
                    partition_clause204=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause204.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:357:1: group_type : QUOTEDSTRING ;
    public final QueryParser.group_type_return group_type() throws RecognitionException {
        QueryParser.group_type_return retval = new QueryParser.group_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING205=null;

        Object QUOTEDSTRING205_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:357:12: ( QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:357:14: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING205=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type2331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING205_tree = 
            (Object)adaptor.create(QUOTEDSTRING205)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING205_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:360:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA207=null;
        QueryParser.group_item_return group_item206 =null;

        QueryParser.group_item_return group_item208 =null;


        Object COMMA207_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:360:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:360:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2340);
            group_item206=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item206.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:360:30: ( COMMA group_item )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:360:32: COMMA group_item
            	    {
            	    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2344); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2346);
            	    group_item208=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item208.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL211=null;
        Token ANY212=null;
        Token set213=null;
        QueryParser.rel_return rel209 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause210 =null;


        Object ALL211_tree=null;
        Object ANY212_tree=null;
        Object set213_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2378);
            rel209=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel209.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:18: ( join_group_by_clause | ALL | ANY )
            int alt57=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt57=1;
                }
                break;
            case ALL:
                {
                alt57=2;
                }
                break;
            case ANY:
                {
                alt57=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }

            switch (alt57) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2382);
                    join_group_by_clause210=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause210.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:43: ALL
                    {
                    ALL211=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL211_tree = 
                    (Object)adaptor.create(ALL211)
                    ;
                    adaptor.addChild(root_0, ALL211_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:49: ANY
                    {
                    ANY212=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY212_tree = 
                    (Object)adaptor.create(ANY212)
                    ;
                    adaptor.addChild(root_0, ANY212_tree);
                    }

                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:364:55: ( INNER | OUTER )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==INNER||LA58_0==OUTER) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                    {
                    set213=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set213)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:367:1: rel : ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !);
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN215=null;
        Token RIGHT_PAREN220=null;
        QueryParser.alias_return alias214 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex216 =null;

        QueryParser.op_clause_return op_clause217 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple218 =null;

        QueryParser.parallel_clause_return parallel_clause219 =null;


        Object LEFT_PAREN215_tree=null;
        Object RIGHT_PAREN220_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:367:5: ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !)
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==IDENTIFIER_L) ) {
                alt62=1;
            }
            else if ( (LA62_0==LEFT_PAREN) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:367:7: alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_in_rel2412);
                    alias214=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias214.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:7: LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN215=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rel2421); if (state.failed) return retval;

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:19: ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) )
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==FOREACH) ) {
                        int LA61_1 = input.LA(2);

                        if ( (synpred107_QueryParser()) ) {
                            alt61=1;
                        }
                        else if ( (true) ) {
                            alt61=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA61_0==COGROUP||(LA61_0 >= CROSS && LA61_0 <= CUBE)||LA61_0==DEFINE||LA61_0==DISTINCT||LA61_0==FILTER||LA61_0==GROUP||LA61_0==JOIN||(LA61_0 >= LIMIT && LA61_0 <= LOAD)||LA61_0==MAPREDUCE||LA61_0==ORDER||LA61_0==RANK||LA61_0==SAMPLE||(LA61_0 >= STORE && LA61_0 <= STREAM)||LA61_0==UNION) ) {
                        alt61=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);

                        throw nvae;

                    }
                    switch (alt61) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:21: foreach_clause_complex
                            {
                            pushFollow(FOLLOW_foreach_clause_complex_in_rel2426);
                            foreach_clause_complex216=foreach_clause_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_complex216.getTree());

                            }
                            break;
                        case 2 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            {
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:48: ( op_clause | foreach_clause_simple ) ( parallel_clause )?
                            {
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:48: ( op_clause | foreach_clause_simple )
                            int alt59=2;
                            int LA59_0 = input.LA(1);

                            if ( (LA59_0==COGROUP||(LA59_0 >= CROSS && LA59_0 <= CUBE)||LA59_0==DEFINE||LA59_0==DISTINCT||LA59_0==FILTER||LA59_0==GROUP||LA59_0==JOIN||(LA59_0 >= LIMIT && LA59_0 <= LOAD)||LA59_0==MAPREDUCE||LA59_0==ORDER||LA59_0==RANK||LA59_0==SAMPLE||(LA59_0 >= STORE && LA59_0 <= STREAM)||LA59_0==UNION) ) {
                                alt59=1;
                            }
                            else if ( (LA59_0==FOREACH) ) {
                                alt59=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 59, 0, input);

                                throw nvae;

                            }
                            switch (alt59) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:50: op_clause
                                    {
                                    pushFollow(FOLLOW_op_clause_in_rel2434);
                                    op_clause217=op_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause217.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:62: foreach_clause_simple
                                    {
                                    pushFollow(FOLLOW_foreach_clause_simple_in_rel2438);
                                    foreach_clause_simple218=foreach_clause_simple();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_simple218.getTree());

                                    }
                                    break;

                            }


                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:86: ( parallel_clause )?
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==PARALLEL) ) {
                                alt60=1;
                            }
                            switch (alt60) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:86: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_rel2442);
                                    parallel_clause219=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause219.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN220=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rel2449); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:1: flatten_generated_item : ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS222=null;
        Token LEFT_PAREN223=null;
        Token RIGHT_PAREN225=null;
        Token AS228=null;
        Token LEFT_PAREN229=null;
        Token RIGHT_PAREN231=null;
        Token AS234=null;
        Token STAR236=null;
        Token AS237=null;
        Token LEFT_PAREN238=null;
        Token RIGHT_PAREN240=null;
        QueryParser.flatten_clause_return flatten_clause221 =null;

        QueryParser.field_def_list_return field_def_list224 =null;

        QueryParser.field_def_return field_def226 =null;

        QueryParser.col_range_return col_range227 =null;

        QueryParser.field_def_list_return field_def_list230 =null;

        QueryParser.field_def_return field_def232 =null;

        QueryParser.expr_return expr233 =null;

        QueryParser.field_def_return field_def235 =null;

        QueryParser.field_def_list_return field_def_list239 =null;

        QueryParser.field_def_return field_def241 =null;


        Object AS222_tree=null;
        Object LEFT_PAREN223_tree=null;
        Object RIGHT_PAREN225_tree=null;
        Object AS228_tree=null;
        Object LEFT_PAREN229_tree=null;
        Object RIGHT_PAREN231_tree=null;
        Object AS234_tree=null;
        Object STAR236_tree=null;
        Object AS237_tree=null;
        Object LEFT_PAREN238_tree=null;
        Object RIGHT_PAREN240_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:24: ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? )
            int alt70=4;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:26: flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item2459);
                    flatten_clause221=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause221.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:41: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==AS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:43: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS222=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2463); if (state.failed) return retval;

                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:47: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt63=2;
                            int LA63_0 = input.LA(1);

                            if ( (LA63_0==LEFT_PAREN) ) {
                                int LA63_1 = input.LA(2);

                                if ( (synpred110_QueryParser()) ) {
                                    alt63=1;
                                }
                                else if ( (true) ) {
                                    alt63=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 63, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA63_0 >= BAG && LA63_0 <= BOOLEAN)||LA63_0==BYTEARRAY||LA63_0==CHARARRAY||LA63_0==DATETIME||LA63_0==DOUBLE||LA63_0==FLOAT||LA63_0==IDENTIFIER_L||LA63_0==INT||(LA63_0 >= LEFT_BRACKET && LA63_0 <= LEFT_CURLY)||LA63_0==LONG||LA63_0==MAP||LA63_0==TUPLE) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 0, input);

                                throw nvae;

                            }
                            switch (alt63) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:51: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN223=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2470); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2473);
                                    field_def_list224=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list224.getTree());

                                    RIGHT_PAREN225=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2475); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:95: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2482);
                                    field_def226=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def226.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:26: col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_flatten_generated_item2514);
                    col_range227=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range227.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:36: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==AS) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:38: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS228=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2518); if (state.failed) return retval;

                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:42: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt65=2;
                            int LA65_0 = input.LA(1);

                            if ( (LA65_0==LEFT_PAREN) ) {
                                int LA65_1 = input.LA(2);

                                if ( (synpred113_QueryParser()) ) {
                                    alt65=1;
                                }
                                else if ( (true) ) {
                                    alt65=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 65, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA65_0 >= BAG && LA65_0 <= BOOLEAN)||LA65_0==BYTEARRAY||LA65_0==CHARARRAY||LA65_0==DATETIME||LA65_0==DOUBLE||LA65_0==FLOAT||LA65_0==IDENTIFIER_L||LA65_0==INT||(LA65_0 >= LEFT_BRACKET && LA65_0 <= LEFT_CURLY)||LA65_0==LONG||LA65_0==MAP||LA65_0==TUPLE) ) {
                                alt65=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 65, 0, input);

                                throw nvae;

                            }
                            switch (alt65) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:46: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN229=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2525); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2528);
                                    field_def_list230=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list230.getTree());

                                    RIGHT_PAREN231=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2530); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:90: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2537);
                                    field_def232=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def232.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:26: expr ( AS ! field_def )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_flatten_generated_item2569);
                    expr233=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr233.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:31: ( AS ! field_def )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==AS) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:33: AS ! field_def
                            {
                            AS234=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2573); if (state.failed) return retval;

                            pushFollow(FOLLOW_field_def_in_flatten_generated_item2576);
                            field_def235=field_def();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def235.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:26: STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR236=(Token)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item2606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR236_tree = 
                    (Object)adaptor.create(STAR236)
                    ;
                    adaptor.addChild(root_0, STAR236_tree);
                    }

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:31: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==AS) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:33: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS237=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2610); if (state.failed) return retval;

                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:37: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt68=2;
                            int LA68_0 = input.LA(1);

                            if ( (LA68_0==LEFT_PAREN) ) {
                                int LA68_1 = input.LA(2);

                                if ( (synpred118_QueryParser()) ) {
                                    alt68=1;
                                }
                                else if ( (true) ) {
                                    alt68=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 68, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA68_0 >= BAG && LA68_0 <= BOOLEAN)||LA68_0==BYTEARRAY||LA68_0==CHARARRAY||LA68_0==DATETIME||LA68_0==DOUBLE||LA68_0==FLOAT||LA68_0==IDENTIFIER_L||LA68_0==INT||(LA68_0 >= LEFT_BRACKET && LA68_0 <= LEFT_CURLY)||LA68_0==LONG||LA68_0==MAP||LA68_0==TUPLE) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 0, input);

                                throw nvae;

                            }
                            switch (alt68) {
                                case 1 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:39: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:39: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:41: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN238=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2617); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2620);
                                    field_def_list239=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list239.getTree());

                                    RIGHT_PAREN240=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2622); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:85: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2629);
                                    field_def241=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def241.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:377:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN242=null;
        Token LEFT_PAREN243=null;
        Token RIGHT_PAREN245=null;
        QueryParser.expr_return expr244 =null;


        Object FLATTEN242_tree=null;
        Object LEFT_PAREN243_tree=null;
        Object RIGHT_PAREN245_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:377:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:377:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN242=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN242_tree = 
            (Object)adaptor.create(FLATTEN242)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN242_tree, root_0);
            }

            LEFT_PAREN243=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause2647); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause2650);
            expr244=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr244.getTree());

            RIGHT_PAREN245=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause2652); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:380:1: store_clause : STORE ^ rel INTO ! filename ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE246=null;
        Token INTO248=null;
        Token USING250=null;
        QueryParser.rel_return rel247 =null;

        QueryParser.filename_return filename249 =null;

        QueryParser.func_clause_return func_clause251 =null;


        Object STORE246_tree=null;
        Object INTO248_tree=null;
        Object USING250_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:380:14: ( STORE ^ rel INTO ! filename ( USING ! func_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:380:16: STORE ^ rel INTO ! filename ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE246=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE246_tree = 
            (Object)adaptor.create(STORE246)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE246_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2665);
            rel247=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel247.getTree());

            INTO248=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2667); if (state.failed) return retval;

            pushFollow(FOLLOW_filename_in_store_clause2670);
            filename249=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename249.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:380:42: ( USING ! func_clause )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==USING) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:380:44: USING ! func_clause
                    {
                    USING250=(Token)match(input,USING,FOLLOW_USING_in_store_clause2674); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2677);
                    func_clause251=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause251.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:383:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER252=null;
        Token BY254=null;
        QueryParser.rel_return rel253 =null;

        QueryParser.cond_return cond255 =null;


        Object FILTER252_tree=null;
        Object BY254_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:383:15: ( FILTER ^ rel BY ! cond )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:383:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER252=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER252_tree = 
            (Object)adaptor.create(FILTER252)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER252_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2692);
            rel253=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel253.getTree());

            BY254=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2694); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2697);
            cond255=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond255.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:386:1: cond : or_cond ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.or_cond_return or_cond256 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:386:6: ( or_cond )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:386:8: or_cond
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_or_cond_in_cond2706);
            or_cond256=or_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_cond256.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class or_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:389:1: or_cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.or_cond_return or_cond() throws RecognitionException {
        QueryParser.or_cond_return retval = new QueryParser.or_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR258=null;
        QueryParser.and_cond_return and_cond257 =null;

        QueryParser.and_cond_return and_cond259 =null;


        Object OR258_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:389:9: ( and_cond ( OR ^ and_cond )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:389:11: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_or_cond2715);
            and_cond257=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond257.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:389:21: ( OR ^ and_cond )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==OR) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:389:23: OR ^ and_cond
            	    {
            	    OR258=(Token)match(input,OR,FOLLOW_OR_in_or_cond2720); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR258_tree = 
            	    (Object)adaptor.create(OR258)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR258_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_or_cond2723);
            	    and_cond259=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond259.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:392:1: and_cond : unary_cond ( AND ^ unary_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND261=null;
        QueryParser.unary_cond_return unary_cond260 =null;

        QueryParser.unary_cond_return unary_cond262 =null;


        Object AND261_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:392:10: ( unary_cond ( AND ^ unary_cond )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:392:12: unary_cond ( AND ^ unary_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unary_cond_in_and_cond2735);
            unary_cond260=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond260.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:392:23: ( AND ^ unary_cond )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==AND) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:392:25: AND ^ unary_cond
            	    {
            	    AND261=(Token)match(input,AND,FOLLOW_AND_in_and_cond2739); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND261_tree = 
            	    (Object)adaptor.create(AND261)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND261_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unary_cond_in_and_cond2742);
            	    unary_cond262=unary_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond262.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:395:1: unary_cond : ( expr rel_op ^ expr | LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | func_eval | null_check_cond | bool_cond );
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN266=null;
        Token RIGHT_PAREN268=null;
        QueryParser.expr_return expr263 =null;

        QueryParser.rel_op_return rel_op264 =null;

        QueryParser.expr_return expr265 =null;

        QueryParser.cond_return cond267 =null;

        QueryParser.not_cond_return not_cond269 =null;

        QueryParser.func_eval_return func_eval270 =null;

        QueryParser.null_check_cond_return null_check_cond271 =null;

        QueryParser.bool_cond_return bool_cond272 =null;


        Object LEFT_PAREN266_tree=null;
        Object RIGHT_PAREN268_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:395:12: ( expr rel_op ^ expr | LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | func_eval | null_check_cond | bool_cond )
            int alt74=6;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:395:14: expr rel_op ^ expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_unary_cond2754);
                    expr263=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr263.getTree());

                    pushFollow(FOLLOW_rel_op_in_unary_cond2756);
                    rel_op264=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(rel_op264.getTree(), root_0);

                    pushFollow(FOLLOW_expr_in_unary_cond2759);
                    expr265=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr265.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:396:14: LEFT_PAREN ! cond RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN266=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond2774); if (state.failed) return retval;

                    pushFollow(FOLLOW_cond_in_unary_cond2777);
                    cond267=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cond267.getTree());

                    RIGHT_PAREN268=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond2779); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:397:14: not_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_not_cond_in_unary_cond2795);
                    not_cond269=not_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond269.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:398:14: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_unary_cond2810);
                    func_eval270=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval270.getTree());

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:399:14: null_check_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_check_cond_in_unary_cond2825);
                    null_check_cond271=null_check_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_check_cond271.getTree());

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:400:14: bool_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bool_cond_in_unary_cond2840);
                    bool_cond272=bool_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_cond272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class bool_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bool_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:403:1: bool_cond : expr -> ^( BOOL_COND expr ) ;
    public final QueryParser.bool_cond_return bool_cond() throws RecognitionException {
        QueryParser.bool_cond_return retval = new QueryParser.bool_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.expr_return expr273 =null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:403:11: ( expr -> ^( BOOL_COND expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:403:13: expr
            {
            pushFollow(FOLLOW_expr_in_bool_cond2849);
            expr273=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr273.getTree());

            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:18: -> ^( BOOL_COND expr )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:403:21: ^( BOOL_COND expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BOOL_COND, "BOOL_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bool_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:406:1: not_cond : NOT ^ unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT274=null;
        QueryParser.unary_cond_return unary_cond275 =null;


        Object NOT274_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:406:10: ( NOT ^ unary_cond )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:406:12: NOT ^ unary_cond
            {
            root_0 = (Object)adaptor.nil();


            NOT274=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond2866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NOT274_tree = 
            (Object)adaptor.create(NOT274)
            ;
            root_0 = (Object)adaptor.becomeRoot(NOT274_tree, root_0);
            }

            pushFollow(FOLLOW_unary_cond_in_not_cond2869);
            unary_cond275=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond275.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class func_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:409:1: func_eval : func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) ;
    public final QueryParser.func_eval_return func_eval() throws RecognitionException {
        QueryParser.func_eval_return retval = new QueryParser.func_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN277=null;
        Token RIGHT_PAREN279=null;
        QueryParser.func_name_return func_name276 =null;

        QueryParser.real_arg_list_return real_arg_list278 =null;


        Object LEFT_PAREN277_tree=null;
        Object RIGHT_PAREN279_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:409:11: ( func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:409:13: func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_func_name_in_func_eval2878);
            func_name276=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_name.add(func_name276.getTree());

            LEFT_PAREN277=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_eval2880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN277);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:409:34: ( real_arg_list )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( ((LA75_0 >= ALL && LA75_0 <= BAG)||(LA75_0 >= BY && LA75_0 <= COGROUP)||(LA75_0 >= CROSS && LA75_0 <= DATETIME)||LA75_0==DEFINE||LA75_0==DESC||LA75_0==DISTINCT||(LA75_0 >= DOLLARVAR && LA75_0 <= DOUBLE_PERIOD)||(LA75_0 >= FALSE && LA75_0 <= FLOAT)||(LA75_0 >= FLOATNUMBER && LA75_0 <= GROUP)||(LA75_0 >= IDENTIFIER_L && LA75_0 <= LEFT_PAREN)||(LA75_0 >= LIMIT && LA75_0 <= MINUS)||LA75_0==NOT||(LA75_0 >= OR && LA75_0 <= ORDER)||(LA75_0 >= OUTER && LA75_0 <= PARTITION)||LA75_0==QUOTEDSTRING||(LA75_0 >= RETURNS && LA75_0 <= RIGHT)||(LA75_0 >= ROLLUP && LA75_0 <= SAMPLE)||LA75_0==SHIP||(LA75_0 >= SPLIT && LA75_0 <= USING)||(LA75_0 >= BOOL && LA75_0 <= BOOL_COND)||LA75_0==REALIAS) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:409:34: real_arg_list
                    {
                    pushFollow(FOLLOW_real_arg_list_in_func_eval2882);
                    real_arg_list278=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list278.getTree());

                    }
                    break;

            }


            RIGHT_PAREN279=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_eval2885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN279);


            // AST REWRITE
            // elements: real_arg_list, func_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:11: -> ^( FUNC_EVAL func_name ( real_arg_list )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:410:14: ^( FUNC_EVAL func_name ( real_arg_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, stream_func_name.nextTree());

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:410:37: ( real_arg_list )?
                if ( stream_real_arg_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                }
                stream_real_arg_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:413:1: real_arg_list : real_arg ( COMMA real_arg )* -> ( real_arg )+ ;
    public final QueryParser.real_arg_list_return real_arg_list() throws RecognitionException {
        QueryParser.real_arg_list_return retval = new QueryParser.real_arg_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA281=null;
        QueryParser.real_arg_return real_arg280 =null;

        QueryParser.real_arg_return real_arg282 =null;


        Object COMMA281_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:413:15: ( real_arg ( COMMA real_arg )* -> ( real_arg )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:413:17: real_arg ( COMMA real_arg )*
            {
            pushFollow(FOLLOW_real_arg_in_real_arg_list2917);
            real_arg280=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_real_arg.add(real_arg280.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:413:26: ( COMMA real_arg )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:413:28: COMMA real_arg
            	    {
            	    COMMA281=(Token)match(input,COMMA,FOLLOW_COMMA_in_real_arg_list2921); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA281);


            	    pushFollow(FOLLOW_real_arg_in_real_arg_list2923);
            	    real_arg282=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg282.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:14: -> ( real_arg )+
            {
                if ( !(stream_real_arg.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_0, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg_list"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:417:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR284=null;
        QueryParser.expr_return expr283 =null;

        QueryParser.col_range_return col_range285 =null;


        Object STAR284_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:417:10: ( expr | STAR | col_range )
            int alt77=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt77=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA77_2 = input.LA(2);

                if ( (LA77_2==EOF||LA77_2==COMMA||(LA77_2 >= DIV && LA77_2 <= DOLLAR)||LA77_2==LEFT_PAREN||LA77_2==MINUS||(LA77_2 >= PERCENT && LA77_2 <= POUND)||(LA77_2 >= RIGHT_BRACKET && LA77_2 <= RIGHT_PAREN)||LA77_2==STAR) ) {
                    alt77=1;
                }
                else if ( (LA77_2==DOUBLE_PERIOD) ) {
                    alt77=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 2, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA77_3 = input.LA(2);

                if ( (LA77_3==EOF||LA77_3==COMMA||(LA77_3 >= DIV && LA77_3 <= DOLLAR)||LA77_3==LEFT_PAREN||LA77_3==MINUS||(LA77_3 >= PERCENT && LA77_3 <= POUND)||(LA77_3 >= RIGHT_BRACKET && LA77_3 <= RIGHT_PAREN)||LA77_3==STAR) ) {
                    alt77=1;
                }
                else if ( (LA77_3==DOUBLE_PERIOD) ) {
                    alt77=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 3, input);

                    throw nvae;

                }
                }
                break;
            case GROUP:
                {
                int LA77_4 = input.LA(2);

                if ( (LA77_4==EOF||LA77_4==COMMA||(LA77_4 >= DIV && LA77_4 <= DOLLAR)||LA77_4==LEFT_PAREN||LA77_4==MINUS||(LA77_4 >= PERCENT && LA77_4 <= POUND)||(LA77_4 >= RIGHT_BRACKET && LA77_4 <= RIGHT_PAREN)||LA77_4==STAR) ) {
                    alt77=1;
                }
                else if ( (LA77_4==DOUBLE_PERIOD) ) {
                    alt77=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA77_5 = input.LA(2);

                if ( (LA77_5==EOF||LA77_5==COMMA||LA77_5==DIV||LA77_5==MINUS||(LA77_5 >= PERCENT && LA77_5 <= POUND)||(LA77_5 >= RIGHT_BRACKET && LA77_5 <= RIGHT_PAREN)||LA77_5==STAR) ) {
                    alt77=1;
                }
                else if ( (LA77_5==DOUBLE_PERIOD) ) {
                    alt77=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 5, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt77=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }

            switch (alt77) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:417:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg2953);
                    expr283=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr283.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:417:19: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR284=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg2957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR284_tree = 
                    (Object)adaptor.create(STAR284)
                    ;
                    adaptor.addChild(root_0, STAR284_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:417:26: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg2961);
                    col_range285=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range285.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class null_check_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_check_cond"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:420:1: null_check_cond : expr IS ! ( NOT )? null_keyword ^;
    public final QueryParser.null_check_cond_return null_check_cond() throws RecognitionException {
        QueryParser.null_check_cond_return retval = new QueryParser.null_check_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS287=null;
        Token NOT288=null;
        QueryParser.expr_return expr286 =null;

        QueryParser.null_keyword_return null_keyword289 =null;


        Object IS287_tree=null;
        Object NOT288_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:420:17: ( expr IS ! ( NOT )? null_keyword ^)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:420:19: expr IS ! ( NOT )? null_keyword ^
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_null_check_cond2970);
            expr286=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr286.getTree());

            IS287=(Token)match(input,IS,FOLLOW_IS_in_null_check_cond2972); if (state.failed) return retval;

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:420:28: ( NOT )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NOT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:420:28: NOT
                    {
                    NOT288=(Token)match(input,NOT,FOLLOW_NOT_in_null_check_cond2975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT288_tree = 
                    (Object)adaptor.create(NOT288)
                    ;
                    adaptor.addChild(root_0, NOT288_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_null_keyword_in_null_check_cond2978);
            null_keyword289=null_keyword();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(null_keyword289.getTree(), root_0);

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_check_cond"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:423:1: expr : add_expr ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.add_expr_return add_expr290 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:423:6: ( add_expr )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:423:8: add_expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_add_expr_in_expr2988);
            add_expr290=add_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, add_expr290.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class add_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:426:1: add_expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.add_expr_return add_expr() throws RecognitionException {
        QueryParser.add_expr_return retval = new QueryParser.add_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set292=null;
        QueryParser.multi_expr_return multi_expr291 =null;

        QueryParser.multi_expr_return multi_expr293 =null;


        Object set292_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:426:10: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:426:12: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_add_expr2997);
            multi_expr291=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr291.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:426:23: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==MINUS||LA79_0==PLUS) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:426:25: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set292=(Token)input.LT(1);

            	    set292=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set292)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_add_expr3012);
            	    multi_expr293=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr293.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:429:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set295=null;
        QueryParser.cast_expr_return cast_expr294 =null;

        QueryParser.cast_expr_return cast_expr296 =null;


        Object set295_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:429:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:429:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr3024);
            cast_expr294=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr294.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:429:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==DIV||LA80_0==PERCENT||LA80_0==STAR) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:429:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set295=(Token)input.LT(1);

            	    set295=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set295)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr3043);
            	    cast_expr296=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr296.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:432:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN297=null;
        Token RIGHT_PAREN299=null;
        QueryParser.type_cast_return type_cast298 =null;

        QueryParser.unary_expr_return unary_expr300 =null;

        QueryParser.unary_expr_return unary_expr301 =null;


        Object LEFT_PAREN297_tree=null;
        Object RIGHT_PAREN299_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_unary_expr=new RewriteRuleSubtreeStream(adaptor,"rule unary_expr");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:432:11: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:432:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
                    {
                    LEFT_PAREN297=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN297);


                    pushFollow(FOLLOW_type_cast_in_cast_expr3057);
                    type_cast298=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast298.getTree());

                    RIGHT_PAREN299=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr3059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN299);


                    pushFollow(FOLLOW_unary_expr_in_cast_expr3061);
                    unary_expr300=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expr.add(unary_expr300.getTree());

                    // AST REWRITE
                    // elements: unary_expr, type_cast
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 433:10: -> ^( CAST_EXPR type_cast unary_expr )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:433:13: ^( CAST_EXPR type_cast unary_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_unary_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:434:13: unary_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unary_expr_in_cast_expr3096);
                    unary_expr301=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expr301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final QueryParser.type_cast_return type_cast() throws RecognitionException {
        QueryParser.type_cast_return retval = new QueryParser.type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type302 =null;

        QueryParser.map_type_return map_type303 =null;

        QueryParser.tuple_type_cast_return tuple_type_cast304 =null;

        QueryParser.bag_type_cast_return bag_type_cast305 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:11: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt82=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DATETIME:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt82=1;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt82=2;
                }
                break;
            case TUPLE:
                {
                alt82=3;
                }
                break;
            case BAG:
                {
                alt82=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }

            switch (alt82) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:13: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type_cast3105);
                    simple_type302=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type302.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:27: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type_cast3109);
                    map_type303=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type303.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:38: tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast3113);
                    tuple_type_cast304=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type_cast304.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:437:56: bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_cast_in_type_cast3117);
                    bag_type_cast305=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type_cast305.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:1: tuple_type_cast : TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final QueryParser.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        QueryParser.tuple_type_cast_return retval = new QueryParser.tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE306=null;
        Token LEFT_PAREN307=null;
        Token COMMA309=null;
        Token RIGHT_PAREN311=null;
        QueryParser.type_cast_return type_cast308 =null;

        QueryParser.type_cast_return type_cast310 =null;


        Object TUPLE306_tree=null;
        Object LEFT_PAREN307_tree=null;
        Object COMMA309_tree=null;
        Object RIGHT_PAREN311_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:17: ( TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:19: TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN
            {
            TUPLE306=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type_cast3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE306);


            LEFT_PAREN307=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type_cast3128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN307);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:36: ( type_cast ( COMMA type_cast )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( ((LA84_0 >= BAG && LA84_0 <= BOOLEAN)||LA84_0==BYTEARRAY||LA84_0==CHARARRAY||LA84_0==DATETIME||LA84_0==DOUBLE||LA84_0==FLOAT||LA84_0==INT||LA84_0==LEFT_BRACKET||LA84_0==LONG||LA84_0==MAP||LA84_0==TUPLE) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:38: type_cast ( COMMA type_cast )*
                    {
                    pushFollow(FOLLOW_type_cast_in_tuple_type_cast3132);
                    type_cast308=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast308.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:48: ( COMMA type_cast )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==COMMA) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:440:50: COMMA type_cast
                    	    {
                    	    COMMA309=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple_type_cast3136); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA309);


                    	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast3138);
                    	    type_cast310=type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_cast.add(type_cast310.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN311=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type_cast3146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN311);


            // AST REWRITE
            // elements: type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:16: -> ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:441:19: ^( TUPLE_TYPE_CAST ( type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:441:38: ( type_cast )*
                while ( stream_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_cast.nextTree());

                }
                stream_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:444:1: bag_type_cast : BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final QueryParser.bag_type_cast_return bag_type_cast() throws RecognitionException {
        QueryParser.bag_type_cast_return retval = new QueryParser.bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG312=null;
        Token LEFT_CURLY313=null;
        Token RIGHT_CURLY315=null;
        QueryParser.tuple_type_cast_return tuple_type_cast314 =null;


        Object BAG312_tree=null;
        Object LEFT_CURLY313_tree=null;
        Object RIGHT_CURLY315_tree=null;
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type_cast");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:444:15: ( BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:444:17: BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY
            {
            BAG312=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type_cast3181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG312);


            LEFT_CURLY313=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type_cast3183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY313);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:444:32: ( tuple_type_cast )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==TUPLE) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:444:32: tuple_type_cast
                    {
                    pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast3185);
                    tuple_type_cast314=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple_type_cast.add(tuple_type_cast314.getTree());

                    }
                    break;

            }


            RIGHT_CURLY315=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type_cast3188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY315);


            // AST REWRITE
            // elements: tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:14: -> ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:445:17: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:445:34: ( tuple_type_cast )?
                if ( stream_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_tuple_type_cast.nextTree());

                }
                stream_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class unary_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:448:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );
    public final QueryParser.unary_expr_return unary_expr() throws RecognitionException {
        QueryParser.unary_expr_return retval = new QueryParser.unary_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN317=null;
        Token RIGHT_PAREN319=null;
        QueryParser.expr_eval_return expr_eval316 =null;

        QueryParser.expr_return expr318 =null;

        QueryParser.neg_expr_return neg_expr320 =null;


        Object LEFT_PAREN317_tree=null;
        Object RIGHT_PAREN319_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:448:12: ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr )
            int alt86=3;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:448:14: expr_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_eval_in_unary_expr3221);
                    expr_eval316=expr_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_eval316.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:449:14: LEFT_PAREN expr RIGHT_PAREN
                    {
                    LEFT_PAREN317=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_expr3237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN317);


                    pushFollow(FOLLOW_expr_in_unary_expr3239);
                    expr318=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr318.getTree());

                    RIGHT_PAREN319=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_expr3241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN319);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 450:11: -> ^( EXPR_IN_PAREN expr )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:450:14: ^( EXPR_IN_PAREN expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:451:14: neg_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_neg_expr_in_unary_expr3276);
                    neg_expr320=neg_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg_expr320.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expr"


    public static class expr_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eval"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:1: expr_eval : ( const_expr | var_expr );
    public final QueryParser.expr_eval_return expr_eval() throws RecognitionException {
        QueryParser.expr_eval_return retval = new QueryParser.expr_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.const_expr_return const_expr321 =null;

        QueryParser.var_expr_return var_expr322 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:11: ( const_expr | var_expr )
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:13: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_expr_eval3285);
                    const_expr321=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, const_expr321.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:26: var_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_var_expr_in_expr_eval3289);
                    var_expr322=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var_expr322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eval"


    public static class var_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final QueryParser.var_expr_return var_expr() throws RecognitionException {
        QueryParser.var_expr_return retval = new QueryParser.var_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.projectable_expr_return projectable_expr323 =null;

        QueryParser.dot_proj_return dot_proj324 =null;

        QueryParser.pound_proj_return pound_proj325 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:10: ( projectable_expr ( dot_proj | pound_proj )* )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:12: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_projectable_expr_in_var_expr3298);
            projectable_expr323=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, projectable_expr323.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:29: ( dot_proj | pound_proj )*
            loop88:
            do {
                int alt88=3;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==PERIOD) ) {
                    alt88=1;
                }
                else if ( (LA88_0==POUND) ) {
                    alt88=2;
                }


                switch (alt88) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:31: dot_proj
            	    {
            	    pushFollow(FOLLOW_dot_proj_in_var_expr3302);
            	    dot_proj324=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dot_proj324.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:457:42: pound_proj
            	    {
            	    pushFollow(FOLLOW_pound_proj_in_var_expr3306);
            	    pound_proj325=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pound_proj325.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );
    public final QueryParser.projectable_expr_return projectable_expr() throws RecognitionException {
        QueryParser.projectable_expr_return retval = new QueryParser.projectable_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.func_eval_return func_eval326 =null;

        QueryParser.col_ref_return col_ref327 =null;

        QueryParser.bin_expr_return bin_expr328 =null;

        QueryParser.type_conversion_return type_conversion329 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:17: ( func_eval | col_ref | bin_expr | type_conversion )
            int alt89=4;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:19: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_projectable_expr3317);
                    func_eval326=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval326.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:31: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_projectable_expr3321);
                    col_ref327=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref327.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:41: bin_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bin_expr_in_projectable_expr3325);
                    bin_expr328=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bin_expr328.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:52: type_conversion
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_conversion_in_projectable_expr3329);
                    type_conversion329=type_conversion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_conversion329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class type_conversion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_conversion"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:463:1: type_conversion : ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) );
    public final QueryParser.type_conversion_return type_conversion() throws RecognitionException {
        QueryParser.type_conversion_return retval = new QueryParser.type_conversion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY330=null;
        Token RIGHT_CURLY332=null;
        Token LEFT_BRACKET333=null;
        Token RIGHT_BRACKET335=null;
        Token LEFT_PAREN336=null;
        Token COMMA338=null;
        Token RIGHT_PAREN340=null;
        QueryParser.real_arg_list_return real_arg_list331 =null;

        QueryParser.real_arg_list_return real_arg_list334 =null;

        QueryParser.real_arg_return real_arg337 =null;

        QueryParser.real_arg_return real_arg339 =null;


        Object LEFT_CURLY330_tree=null;
        Object RIGHT_CURLY332_tree=null;
        Object LEFT_BRACKET333_tree=null;
        Object RIGHT_BRACKET335_tree=null;
        Object LEFT_PAREN336_tree=null;
        Object COMMA338_tree=null;
        Object RIGHT_PAREN340_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:463:17: ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) )
            int alt91=3;
            switch ( input.LA(1) ) {
            case LEFT_CURLY:
                {
                alt91=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt91=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }

            switch (alt91) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:463:19: LEFT_CURLY real_arg_list RIGHT_CURLY
                    {
                    LEFT_CURLY330=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_type_conversion3338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY330);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3340);
                    real_arg_list331=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list331.getTree());

                    RIGHT_CURLY332=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_type_conversion3342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY332);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 464:16: -> ^( FUNC_EVAL TOBAG real_arg_list )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:464:19: ^( FUNC_EVAL TOBAG real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:465:18: LEFT_BRACKET real_arg_list RIGHT_BRACKET
                    {
                    LEFT_BRACKET333=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_type_conversion3389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET333);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3391);
                    real_arg_list334=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list334.getTree());

                    RIGHT_BRACKET335=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_type_conversion3393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET335);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 466:16: -> ^( FUNC_EVAL TOMAP real_arg_list )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:466:19: ^( FUNC_EVAL TOMAP real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:467:18: LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN
                    {
                    LEFT_PAREN336=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_conversion3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN336);


                    pushFollow(FOLLOW_real_arg_in_type_conversion3442);
                    real_arg337=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg337.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:467:38: ( COMMA real_arg )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==COMMA) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:467:40: COMMA real_arg
                    	    {
                    	    COMMA338=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_conversion3446); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA338);


                    	    pushFollow(FOLLOW_real_arg_in_type_conversion3448);
                    	    real_arg339=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg339.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);


                    RIGHT_PAREN340=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_conversion3453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN340);


                    // AST REWRITE
                    // elements: real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 468:16: -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:468:19: ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_conversion"


    public static class dot_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:471:1: dot_proj : PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) ;
    public final QueryParser.dot_proj_return dot_proj() throws RecognitionException {
        QueryParser.dot_proj_return retval = new QueryParser.dot_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD341=null;
        Token LEFT_PAREN343=null;
        Token COMMA345=null;
        Token RIGHT_PAREN347=null;
        QueryParser.col_alias_or_index_return col_alias_or_index342 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index344 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index346 =null;


        Object PERIOD341_tree=null;
        Object LEFT_PAREN343_tree=null;
        Object COMMA345_tree=null;
        Object RIGHT_PAREN347_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_alias_or_index=new RewriteRuleSubtreeStream(adaptor,"rule col_alias_or_index");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:471:10: ( PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:471:12: PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            {
            PERIOD341=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD341);


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:471:19: ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==CUBE||LA93_0==DOLLARVAR||LA93_0==GROUP||LA93_0==IDENTIFIER_L) ) {
                alt93=1;
            }
            else if ( (LA93_0==LEFT_PAREN) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:471:21: col_alias_or_index
                    {
                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3495);
                    col_alias_or_index342=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index342.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:472:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:472:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:472:23: LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN
                    {
                    LEFT_PAREN343=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_dot_proj3520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN343);


                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3522);
                    col_alias_or_index344=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index344.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:472:53: ( COMMA col_alias_or_index )*
                    loop92:
                    do {
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==COMMA) ) {
                            alt92=1;
                        }


                        switch (alt92) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:472:55: COMMA col_alias_or_index
                    	    {
                    	    COMMA345=(Token)match(input,COMMA,FOLLOW_COMMA_in_dot_proj3526); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA345);


                    	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3528);
                    	    col_alias_or_index346=col_alias_or_index();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index346.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop92;
                        }
                    } while (true);


                    RIGHT_PAREN347=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_dot_proj3533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN347);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: PERIOD, col_alias_or_index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:9: -> ^( PERIOD ( col_alias_or_index )+ )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:473:12: ^( PERIOD ( col_alias_or_index )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_PERIOD.nextNode()
                , root_1);

                if ( !(stream_col_alias_or_index.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_alias_or_index.hasNext() ) {
                    adaptor.addChild(root_1, stream_col_alias_or_index.nextTree());

                }
                stream_col_alias_or_index.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:476:1: col_alias_or_index : ( col_alias | col_index );
    public final QueryParser.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        QueryParser.col_alias_or_index_return retval = new QueryParser.col_alias_or_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_alias_return col_alias348 =null;

        QueryParser.col_index_return col_index349 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:476:20: ( col_alias | col_index )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==CUBE||LA94_0==GROUP||LA94_0==IDENTIFIER_L) ) {
                alt94=1;
            }
            else if ( (LA94_0==DOLLARVAR) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:476:22: col_alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index3565);
                    col_alias348=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_alias348.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:476:34: col_index
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_index_in_col_alias_or_index3569);
                    col_index349=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_index349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:479:1: col_alias : ( GROUP | CUBE | identifier );
    public final QueryParser.col_alias_return col_alias() throws RecognitionException {
        QueryParser.col_alias_return retval = new QueryParser.col_alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP350=null;
        Token CUBE351=null;
        QueryParser.identifier_return identifier352 =null;


        Object GROUP350_tree=null;
        Object CUBE351_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:479:11: ( GROUP | CUBE | identifier )
            int alt95=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                alt95=1;
                }
                break;
            case CUBE:
                {
                alt95=2;
                }
                break;
            case IDENTIFIER_L:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:479:13: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP350=(Token)match(input,GROUP,FOLLOW_GROUP_in_col_alias3578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP350_tree = 
                    (Object)adaptor.create(GROUP350)
                    ;
                    adaptor.addChild(root_0, GROUP350_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:479:21: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE351=(Token)match(input,CUBE,FOLLOW_CUBE_in_col_alias3582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE351_tree = 
                    (Object)adaptor.create(CUBE351)
                    ;
                    adaptor.addChild(root_0, CUBE351_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:479:28: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_col_alias3586);
                    identifier352=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier352.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:482:1: col_index : DOLLARVAR ;
    public final QueryParser.col_index_return col_index() throws RecognitionException {
        QueryParser.col_index_return retval = new QueryParser.col_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR353=null;

        Object DOLLARVAR353_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:482:11: ( DOLLARVAR )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:482:13: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR353=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index3595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR353_tree = 
            (Object)adaptor.create(DOLLARVAR353)
            ;
            adaptor.addChild(root_0, DOLLARVAR353_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:485:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD354=null;
        Token DOUBLE_PERIOD355=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref356 =null;


        Object DOUBLE_PERIOD354_tree=null;
        Object DOUBLE_PERIOD355_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:485:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==CUBE||LA97_0==DOLLARVAR||LA97_0==GROUP||LA97_0==IDENTIFIER_L) ) {
                alt97=1;
            }
            else if ( (LA97_0==DOUBLE_PERIOD) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:485:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range3608);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD354=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD354);


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:485:43: (c2= col_ref )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==CUBE||LA96_0==DOLLARVAR||LA96_0==GROUP||LA96_0==IDENTIFIER_L) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:485:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range3616);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c1, c2, DOUBLE_PERIOD
                    // token labels: 
                    // rule labels: retval, c1, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 486:11: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:486:14: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:486:45: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:487:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD355=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD355);


                    pushFollow(FOLLOW_col_ref_in_col_range3659);
                    col_ref356=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref356.getTree());

                    // AST REWRITE
                    // elements: DOUBLE_PERIOD, col_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 488:11: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:488:14: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:1: pound_proj : POUND ^ ( QUOTEDSTRING | null_keyword ) ;
    public final QueryParser.pound_proj_return pound_proj() throws RecognitionException {
        QueryParser.pound_proj_return retval = new QueryParser.pound_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND357=null;
        Token QUOTEDSTRING358=null;
        QueryParser.null_keyword_return null_keyword359 =null;


        Object POUND357_tree=null;
        Object QUOTEDSTRING358_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:12: ( POUND ^ ( QUOTEDSTRING | null_keyword ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:14: POUND ^ ( QUOTEDSTRING | null_keyword )
            {
            root_0 = (Object)adaptor.nil();


            POUND357=(Token)match(input,POUND,FOLLOW_POUND_in_pound_proj3690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND357_tree = 
            (Object)adaptor.create(POUND357)
            ;
            root_0 = (Object)adaptor.becomeRoot(POUND357_tree, root_0);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:21: ( QUOTEDSTRING | null_keyword )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==QUOTEDSTRING) ) {
                alt98=1;
            }
            else if ( (LA98_0==IDENTIFIER_L) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:23: QUOTEDSTRING
                    {
                    QUOTEDSTRING358=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_pound_proj3695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING358_tree = 
                    (Object)adaptor.create(QUOTEDSTRING358)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING358_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:492:38: null_keyword
                    {
                    pushFollow(FOLLOW_null_keyword_in_pound_proj3699);
                    null_keyword359=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:495:1: bin_expr : LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ;
    public final QueryParser.bin_expr_return bin_expr() throws RecognitionException {
        QueryParser.bin_expr_return retval = new QueryParser.bin_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN360=null;
        Token QMARK362=null;
        Token COLON363=null;
        Token RIGHT_PAREN364=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.cond_return cond361 =null;


        Object LEFT_PAREN360_tree=null;
        Object QMARK362_tree=null;
        Object COLON363_tree=null;
        Object RIGHT_PAREN364_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:495:10: ( LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:495:12: LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
            {
            LEFT_PAREN360=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_bin_expr3710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN360);


            pushFollow(FOLLOW_cond_in_bin_expr3712);
            cond361=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond361.getTree());

            QMARK362=(Token)match(input,QMARK,FOLLOW_QMARK_in_bin_expr3714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QMARK.add(QMARK362);


            pushFollow(FOLLOW_expr_in_bin_expr3720);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            COLON363=(Token)match(input,COLON,FOLLOW_COLON_in_bin_expr3722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON363);


            pushFollow(FOLLOW_expr_in_bin_expr3728);
            exp2=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

            RIGHT_PAREN364=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_bin_expr3730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN364);


            // AST REWRITE
            // elements: exp1, cond, exp2
            // token labels: 
            // rule labels: retval, exp2, exp1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 496:9: -> ^( BIN_EXPR cond $exp1 $exp2)
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:496:12: ^( BIN_EXPR cond $exp1 $exp2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_1, stream_exp1.nextTree());

                adaptor.addChild(root_1, stream_exp2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class neg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "neg_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:499:1: neg_expr : MINUS cast_expr -> ^( NEG cast_expr ) ;
    public final QueryParser.neg_expr_return neg_expr() throws RecognitionException {
        QueryParser.neg_expr_return retval = new QueryParser.neg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS365=null;
        QueryParser.cast_expr_return cast_expr366 =null;


        Object MINUS365_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:499:10: ( MINUS cast_expr -> ^( NEG cast_expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:499:12: MINUS cast_expr
            {
            MINUS365=(Token)match(input,MINUS,FOLLOW_MINUS_in_neg_expr3763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS365);


            pushFollow(FOLLOW_cast_expr_in_neg_expr3765);
            cast_expr366=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr366.getTree());

            // AST REWRITE
            // elements: cast_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:9: -> ^( NEG cast_expr )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:500:12: ^( NEG cast_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NEG, "NEG")
                , root_1);

                adaptor.addChild(root_1, stream_cast_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "neg_expr"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:1: limit_clause : LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT367=null;
        Token INTEGER369=null;
        Token LONGINTEGER370=null;
        QueryParser.rel_return rel368 =null;

        QueryParser.expr_return expr371 =null;


        Object LIMIT367_tree=null;
        Object INTEGER369_tree=null;
        Object LONGINTEGER370_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:14: ( LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:16: LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT367=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause3792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT367_tree = 
            (Object)adaptor.create(LIMIT367)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT367_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause3795);
            rel368=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel368.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:27: ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            int alt99=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA99_1 = input.LA(2);

                if ( (synpred164_QueryParser()) ) {
                    alt99=1;
                }
                else if ( (true) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA99_2 = input.LA(2);

                if ( (synpred165_QueryParser()) ) {
                    alt99=2;
                }
                else if ( (true) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case CUBE:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOLLARVAR:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:29: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER369=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause3807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER369_tree = 
                    (Object)adaptor.create(INTEGER369)
                    ;
                    adaptor.addChild(root_0, INTEGER369_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:63: ( LONGINTEGER SEMI_COLON )=> LONGINTEGER
                    {
                    LONGINTEGER370=(Token)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause3819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER370_tree = 
                    (Object)adaptor.create(LONGINTEGER370)
                    ;
                    adaptor.addChild(root_0, LONGINTEGER370_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:105: expr
                    {
                    pushFollow(FOLLOW_expr_in_limit_clause3823);
                    expr371=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr371.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:1: sample_clause : SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE372=null;
        Token DOUBLENUMBER374=null;
        QueryParser.rel_return rel373 =null;

        QueryParser.expr_return expr375 =null;


        Object SAMPLE372_tree=null;
        Object DOUBLENUMBER374_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:15: ( SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:17: SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE372=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause3834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE372_tree = 
            (Object)adaptor.create(SAMPLE372)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE372_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause3837);
            rel373=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel373.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:29: ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==DOUBLENUMBER) ) {
                int LA100_1 = input.LA(2);

                if ( (synpred166_QueryParser()) ) {
                    alt100=1;
                }
                else if ( (true) ) {
                    alt100=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 100, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA100_0 >= ALL && LA100_0 <= BAG)||(LA100_0 >= BY && LA100_0 <= COGROUP)||(LA100_0 >= CROSS && LA100_0 <= DATETIME)||LA100_0==DEFINE||LA100_0==DESC||LA100_0==DISTINCT||(LA100_0 >= DOLLARVAR && LA100_0 <= DOUBLE)||(LA100_0 >= FALSE && LA100_0 <= FLOAT)||(LA100_0 >= FLOATNUMBER && LA100_0 <= GROUP)||(LA100_0 >= IDENTIFIER_L && LA100_0 <= LEFT_PAREN)||(LA100_0 >= LIMIT && LA100_0 <= MINUS)||LA100_0==NOT||(LA100_0 >= OR && LA100_0 <= ORDER)||(LA100_0 >= OUTER && LA100_0 <= PARTITION)||LA100_0==QUOTEDSTRING||(LA100_0 >= RETURNS && LA100_0 <= RIGHT)||(LA100_0 >= ROLLUP && LA100_0 <= SAMPLE)||LA100_0==SHIP||LA100_0==SPLIT||(LA100_0 >= STDERROR && LA100_0 <= USING)||(LA100_0 >= BOOL && LA100_0 <= BOOL_COND)||LA100_0==REALIAS) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:31: ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER
                    {
                    DOUBLENUMBER374=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause3849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER374_tree = 
                    (Object)adaptor.create(DOUBLENUMBER374)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER374_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_sample_clause3853);
                    expr375=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr375.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class rank_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:509:1: rank_clause : RANK ^ rel ( rank_by_statement )? ;
    public final QueryParser.rank_clause_return rank_clause() throws RecognitionException {
        QueryParser.rank_clause_return retval = new QueryParser.rank_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RANK376=null;
        QueryParser.rel_return rel377 =null;

        QueryParser.rank_by_statement_return rank_by_statement378 =null;


        Object RANK376_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:509:13: ( RANK ^ rel ( rank_by_statement )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:509:15: RANK ^ rel ( rank_by_statement )?
            {
            root_0 = (Object)adaptor.nil();


            RANK376=(Token)match(input,RANK,FOLLOW_RANK_in_rank_clause3864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANK376_tree = 
            (Object)adaptor.create(RANK376)
            ;
            root_0 = (Object)adaptor.becomeRoot(RANK376_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_rank_clause3867);
            rel377=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel377.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:509:25: ( rank_by_statement )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==BY) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:509:27: rank_by_statement
                    {
                    pushFollow(FOLLOW_rank_by_statement_in_rank_clause3871);
                    rank_by_statement378=rank_by_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_statement378.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_clause"


    public static class rank_by_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_statement"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:512:1: rank_by_statement : BY ^ rank_by_clause ( DENSE )? ;
    public final QueryParser.rank_by_statement_return rank_by_statement() throws RecognitionException {
        QueryParser.rank_by_statement_return retval = new QueryParser.rank_by_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY379=null;
        Token DENSE381=null;
        QueryParser.rank_by_clause_return rank_by_clause380 =null;


        Object BY379_tree=null;
        Object DENSE381_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:512:19: ( BY ^ rank_by_clause ( DENSE )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:512:21: BY ^ rank_by_clause ( DENSE )?
            {
            root_0 = (Object)adaptor.nil();


            BY379=(Token)match(input,BY,FOLLOW_BY_in_rank_by_statement3883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY379_tree = 
            (Object)adaptor.create(BY379)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY379_tree, root_0);
            }

            pushFollow(FOLLOW_rank_by_clause_in_rank_by_statement3886);
            rank_by_clause380=rank_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_by_clause380.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:512:40: ( DENSE )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==DENSE) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:512:42: DENSE
                    {
                    DENSE381=(Token)match(input,DENSE,FOLLOW_DENSE_in_rank_by_statement3890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DENSE381_tree = 
                    (Object)adaptor.create(DENSE381)
                    ;
                    adaptor.addChild(root_0, DENSE381_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_statement"


    public static class rank_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_by_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:515:1: rank_by_clause : ( STAR ( ASC | DESC )? | rank_list );
    public final QueryParser.rank_by_clause_return rank_by_clause() throws RecognitionException {
        QueryParser.rank_by_clause_return retval = new QueryParser.rank_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR382=null;
        Token set383=null;
        QueryParser.rank_list_return rank_list384 =null;


        Object STAR382_tree=null;
        Object set383_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:515:16: ( STAR ( ASC | DESC )? | rank_list )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==STAR) ) {
                alt104=1;
            }
            else if ( (LA104_0==CUBE||LA104_0==DOLLARVAR||LA104_0==DOUBLE_PERIOD||LA104_0==GROUP||LA104_0==IDENTIFIER_L) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:515:18: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR382=(Token)match(input,STAR,FOLLOW_STAR_in_rank_by_clause3902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR382_tree = 
                    (Object)adaptor.create(STAR382)
                    ;
                    adaptor.addChild(root_0, STAR382_tree);
                    }

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:515:23: ( ASC | DESC )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==ASC||LA103_0==DESC) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set383=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set383)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:516:9: rank_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rank_list_in_rank_by_clause3923);
                    rank_list384=rank_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rank_list384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_by_clause"


    public static class rank_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:519:1: rank_list : rank_col ( COMMA rank_col )* -> ( rank_col )+ ;
    public final QueryParser.rank_list_return rank_list() throws RecognitionException {
        QueryParser.rank_list_return retval = new QueryParser.rank_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA386=null;
        QueryParser.rank_col_return rank_col385 =null;

        QueryParser.rank_col_return rank_col387 =null;


        Object COMMA386_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rank_col=new RewriteRuleSubtreeStream(adaptor,"rule rank_col");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:519:11: ( rank_col ( COMMA rank_col )* -> ( rank_col )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:519:13: rank_col ( COMMA rank_col )*
            {
            pushFollow(FOLLOW_rank_col_in_rank_list3932);
            rank_col385=rank_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rank_col.add(rank_col385.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:519:22: ( COMMA rank_col )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:519:24: COMMA rank_col
            	    {
            	    COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_rank_list3936); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA386);


            	    pushFollow(FOLLOW_rank_col_in_rank_list3938);
            	    rank_col387=rank_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rank_col.add(rank_col387.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            // AST REWRITE
            // elements: rank_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:10: -> ( rank_col )+
            {
                if ( !(stream_rank_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rank_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_rank_col.nextTree());

                }
                stream_rank_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_list"


    public static class rank_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rank_col"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:523:1: rank_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? );
    public final QueryParser.rank_col_return rank_col() throws RecognitionException {
        QueryParser.rank_col_return retval = new QueryParser.rank_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set389=null;
        Token set391=null;
        QueryParser.col_range_return col_range388 =null;

        QueryParser.col_ref_return col_ref390 =null;


        Object set389_tree=null;
        Object set391_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:523:10: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? )
            int alt108=2;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==DOUBLE_PERIOD) ) {
                    alt108=1;
                }
                else if ( (LA108_1==EOF||LA108_1==ASC||LA108_1==COMMA||(LA108_1 >= DENSE && LA108_1 <= DESC)||LA108_1==PARALLEL||LA108_1==RIGHT_PAREN||LA108_1==SEMI_COLON) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA108_2 = input.LA(2);

                if ( (LA108_2==DOUBLE_PERIOD) ) {
                    alt108=1;
                }
                else if ( (LA108_2==EOF||LA108_2==ASC||LA108_2==COMMA||(LA108_2 >= DENSE && LA108_2 <= DESC)||LA108_2==PARALLEL||LA108_2==RIGHT_PAREN||LA108_2==SEMI_COLON) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA108_3 = input.LA(2);

                if ( (LA108_3==DOUBLE_PERIOD) ) {
                    alt108=1;
                }
                else if ( (LA108_3==EOF||LA108_3==ASC||LA108_3==COMMA||(LA108_3 >= DENSE && LA108_3 <= DESC)||LA108_3==PARALLEL||LA108_3==RIGHT_PAREN||LA108_3==SEMI_COLON) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA108_4 = input.LA(2);

                if ( (LA108_4==DOUBLE_PERIOD) ) {
                    alt108=1;
                }
                else if ( (LA108_4==EOF||LA108_4==ASC||LA108_4==COMMA||(LA108_4 >= DENSE && LA108_4 <= DESC)||LA108_4==PARALLEL||LA108_4==RIGHT_PAREN||LA108_4==SEMI_COLON) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt108=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }

            switch (alt108) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:523:12: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_rank_col3964);
                    col_range388=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range388.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:523:22: ( ASC | DESC )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==ASC||LA106_0==DESC) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set389=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set389)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:524:12: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_rank_col3988);
                    col_ref390=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref390.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:524:20: ( ASC | DESC )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==ASC||LA107_0==DESC) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set391=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set391)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rank_col"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:527:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER392=null;
        Token BY394=null;
        Token USING396=null;
        QueryParser.rel_return rel393 =null;

        QueryParser.order_by_clause_return order_by_clause395 =null;

        QueryParser.func_clause_return func_clause397 =null;


        Object ORDER392_tree=null;
        Object BY394_tree=null;
        Object USING396_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:527:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:527:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER392=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause4008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER392_tree = 
            (Object)adaptor.create(ORDER392)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER392_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause4011);
            rel393=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel393.getTree());

            BY394=(Token)match(input,BY,FOLLOW_BY_in_order_clause4013); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause4016);
            order_by_clause395=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause395.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:527:47: ( USING ! func_clause )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==USING) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:527:49: USING ! func_clause
                    {
                    USING396=(Token)match(input,USING,FOLLOW_USING_in_order_clause4020); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause4023);
                    func_clause397=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause397.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:530:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR398=null;
        Token set399=null;
        QueryParser.order_col_list_return order_col_list400 =null;


        Object STAR398_tree=null;
        Object set399_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:530:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STAR) ) {
                alt111=1;
            }
            else if ( (LA111_0==CUBE||LA111_0==DOLLARVAR||LA111_0==DOUBLE_PERIOD||LA111_0==GROUP||LA111_0==IDENTIFIER_L||LA111_0==LEFT_PAREN) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:530:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR398=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause4035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR398_tree = 
                    (Object)adaptor.create(STAR398)
                    ;
                    adaptor.addChild(root_0, STAR398_tree);
                    }

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:530:24: ( ASC | DESC )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==ASC||LA110_0==DESC) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set399=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set399)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:531:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause4066);
                    order_col_list400=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:534:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA402=null;
        QueryParser.order_col_return order_col401 =null;

        QueryParser.order_col_return order_col403 =null;


        Object COMMA402_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:534:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:534:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list4075);
            order_col401=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col401.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:534:28: ( COMMA order_col )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:534:30: COMMA order_col
            	    {
            	    COMMA402=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list4079); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA402);


            	    pushFollow(FOLLOW_order_col_in_order_col_list4081);
            	    order_col403=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col403.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 535:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:538:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set405=null;
        Token set407=null;
        Token LEFT_PAREN408=null;
        Token set410=null;
        Token RIGHT_PAREN411=null;
        QueryParser.col_range_return col_range404 =null;

        QueryParser.col_ref_return col_ref406 =null;

        QueryParser.col_ref_return col_ref409 =null;


        Object set405_tree=null;
        Object set407_tree=null;
        Object LEFT_PAREN408_tree=null;
        Object set410_tree=null;
        Object RIGHT_PAREN411_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:538:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt116=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_1==EOF||LA116_1==ASC||LA116_1==COMMA||LA116_1==DESC||LA116_1==PARALLEL||LA116_1==RIGHT_PAREN||LA116_1==SEMI_COLON||LA116_1==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_2==EOF||LA116_2==ASC||LA116_2==COMMA||LA116_2==DESC||LA116_2==PARALLEL||LA116_2==RIGHT_PAREN||LA116_2==SEMI_COLON||LA116_2==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA116_3 = input.LA(2);

                if ( (LA116_3==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_3==EOF||LA116_3==ASC||LA116_3==COMMA||LA116_3==DESC||LA116_3==PARALLEL||LA116_3==RIGHT_PAREN||LA116_3==SEMI_COLON||LA116_3==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA116_4 = input.LA(2);

                if ( (LA116_4==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_4==EOF||LA116_4==ASC||LA116_4==COMMA||LA116_4==DESC||LA116_4==PARALLEL||LA116_4==RIGHT_PAREN||LA116_4==SEMI_COLON||LA116_4==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt116=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:538:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col4112);
                    col_range404=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range404.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:538:23: ( ASC | DESC )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==ASC||LA113_0==DESC) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set405=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set405)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:539:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col4135);
                    col_ref406=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref406.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:539:21: ( ASC | DESC )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==ASC||LA114_0==DESC) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set407=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set407)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:540:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN408=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col4162); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col4165);
                    col_ref409=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref409.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:540:33: ( ASC | DESC )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==ASC||LA115_0==DESC) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set410=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set410)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN411=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col4178); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:543:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT412=null;
        QueryParser.rel_return rel413 =null;

        QueryParser.partition_clause_return partition_clause414 =null;


        Object DISTINCT412_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:543:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:543:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT412=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause4188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT412_tree = 
            (Object)adaptor.create(DISTINCT412)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT412_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause4191);
            rel413=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel413.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:543:33: ( partition_clause )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==PARTITION) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:543:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause4193);
                    partition_clause414=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause414.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:546:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION415=null;
        Token BY416=null;
        QueryParser.func_name_return func_name417 =null;


        Object PARTITION415_tree=null;
        Object BY416_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:546:18: ( PARTITION ^ BY ! func_name )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:546:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION415=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause4203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION415_tree = 
            (Object)adaptor.create(PARTITION415)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION415_tree, root_0);
            }

            BY416=(Token)match(input,BY,FOLLOW_BY_in_partition_clause4206); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause4209);
            func_name417=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name417.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:549:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS418=null;
        QueryParser.rel_list_return rel_list419 =null;

        QueryParser.partition_clause_return partition_clause420 =null;


        Object CROSS418_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:549:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:549:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS418=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause4218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS418_tree = 
            (Object)adaptor.create(CROSS418)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS418_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause4221);
            rel_list419=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list419.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:549:32: ( partition_clause )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==PARTITION) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:549:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause4223);
                    partition_clause420=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause420.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:552:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA422=null;
        QueryParser.rel_return rel421 =null;

        QueryParser.rel_return rel423 =null;


        Object COMMA422_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:552:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:552:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list4233);
            rel421=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel421.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:552:16: ( COMMA rel )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:552:18: COMMA rel
            	    {
            	    COMMA422=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list4237); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA422);


            	    pushFollow(FOLLOW_rel_in_rel_list4239);
            	    rel423=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel423.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 553:9: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN424=null;
        Token USING426=null;
        QueryParser.join_sub_clause_return join_sub_clause425 =null;

        QueryParser.join_type_return join_type427 =null;

        QueryParser.partition_clause_return partition_clause428 =null;


        Object JOIN424_tree=null;
        Object USING426_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN424=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause4264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN424_tree = 
            (Object)adaptor.create(JOIN424)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN424_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause4267);
            join_sub_clause425=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause425.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:37: ( USING ! join_type )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==USING) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:39: USING ! join_type
                    {
                    USING426=(Token)match(input,USING,FOLLOW_USING_in_join_clause4271); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause4274);
                    join_type427=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type427.getTree());

                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:59: ( partition_clause )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==PARTITION) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:556:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause4279);
                    partition_clause428=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause428.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:559:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING429=null;

        Object QUOTEDSTRING429_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:559:11: ( QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:559:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING429=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type4289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING429_tree = 
            (Object)adaptor.create(QUOTEDSTRING429)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING429_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list );
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set431=null;
        Token OUTER432=null;
        Token COMMA433=null;
        QueryParser.join_item_return join_item430 =null;

        QueryParser.join_item_return join_item434 =null;

        QueryParser.join_item_list_return join_item_list435 =null;


        Object set431_tree=null;
        Object OUTER432_tree=null;
        Object COMMA433_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:17: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==IDENTIFIER_L) ) {
                int LA123_1 = input.LA(2);

                if ( (((synpred199_QueryParser()&&synpred199_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt123=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA123_0==LEFT_PAREN) ) {
                int LA123_2 = input.LA(2);

                if ( (synpred199_QueryParser()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_in_join_sub_clause4298);
                    join_item430=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item430.getTree());

                    set431=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set431)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:53: ( OUTER )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==OUTER) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:53: OUTER
                            {
                            OUTER432=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause4314); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER432_tree = 
                            (Object)adaptor.create(OUTER432)
                            ;
                            adaptor.addChild(root_0, OUTER432_tree);
                            }

                            }
                            break;

                    }


                    COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause4317); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause4320);
                    join_item434=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item434.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:563:19: join_item_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_list_in_join_sub_clause4340);
                    join_item_list435=join_item_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item_list435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:566:1: join_item_list : join_item ( COMMA ! join_item )+ ;
    public final QueryParser.join_item_list_return join_item_list() throws RecognitionException {
        QueryParser.join_item_list_return retval = new QueryParser.join_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA437=null;
        QueryParser.join_item_return join_item436 =null;

        QueryParser.join_item_return join_item438 =null;


        Object COMMA437_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:566:16: ( join_item ( COMMA ! join_item )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:566:18: join_item ( COMMA ! join_item )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_item_list4349);
            join_item436=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item436.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:566:28: ( COMMA ! join_item )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:566:30: COMMA ! join_item
            	    {
            	    COMMA437=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_item_list4353); if (state.failed) return retval;

            	    pushFollow(FOLLOW_join_item_in_join_item_list4356);
            	    join_item438=join_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item438.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item_list"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:569:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel439 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause440 =null;


        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:569:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:569:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item4368);
            rel439=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel439.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item4370);
            join_group_by_clause440=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause440.getTree());

            // AST REWRITE
            // elements: rel, join_group_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:10: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:570:13: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:573:1: join_group_by_clause : BY ^ join_group_by_expr_list ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY441=null;
        QueryParser.join_group_by_expr_list_return join_group_by_expr_list442 =null;


        Object BY441_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:573:22: ( BY ^ join_group_by_expr_list )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:573:24: BY ^ join_group_by_expr_list
            {
            root_0 = (Object)adaptor.nil();


            BY441=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause4401); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY441_tree = 
            (Object)adaptor.create(BY441)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY441_tree, root_0);
            }

            pushFollow(FOLLOW_join_group_by_expr_list_in_join_group_by_clause4404);
            join_group_by_expr_list442=join_group_by_expr_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr_list442.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );
    public final QueryParser.join_group_by_expr_list_return join_group_by_expr_list() throws RecognitionException {
        QueryParser.join_group_by_expr_list_return retval = new QueryParser.join_group_by_expr_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN443=null;
        Token COMMA445=null;
        Token RIGHT_PAREN447=null;
        QueryParser.join_group_by_expr_return join_group_by_expr444 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr446 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr448 =null;


        Object LEFT_PAREN443_tree=null;
        Object COMMA445_tree=null;
        Object RIGHT_PAREN447_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_join_group_by_expr=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_expr");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:25: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
                    {
                    LEFT_PAREN443=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN443);


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4415);
                    join_group_by_expr444=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr444.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:57: ( COMMA join_group_by_expr )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==COMMA) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:59: COMMA join_group_by_expr
                    	    {
                    	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_group_by_expr_list4419); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA445);


                    	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4421);
                    	    join_group_by_expr446=join_group_by_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr446.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);


                    RIGHT_PAREN447=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN447);


                    // AST REWRITE
                    // elements: join_group_by_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 577:24: -> ( join_group_by_expr )+
                    {
                        if ( !(stream_join_group_by_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_join_group_by_expr.hasNext() ) {
                            adaptor.addChild(root_0, stream_join_group_by_expr.nextTree());

                        }
                        stream_join_group_by_expr.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:578:27: join_group_by_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4482);
                    join_group_by_expr448=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr448.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr_list"


    public static class join_group_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:581:1: join_group_by_expr : ( col_range | expr | STAR );
    public final QueryParser.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        QueryParser.join_group_by_expr_return retval = new QueryParser.join_group_by_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR451=null;
        QueryParser.col_range_return col_range449 =null;

        QueryParser.expr_return expr450 =null;


        Object STAR451_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:581:20: ( col_range | expr | STAR )
            int alt127=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==DOUBLE_PERIOD) ) {
                    alt127=1;
                }
                else if ( (LA127_1==EOF||LA127_1==COMMA||(LA127_1 >= DIV && LA127_1 <= DOLLAR)||LA127_1==FULL||LA127_1==INNER||LA127_1==LEFT||LA127_1==LEFT_PAREN||LA127_1==MINUS||LA127_1==OUTER||(LA127_1 >= PARALLEL && LA127_1 <= POUND)||LA127_1==RIGHT||LA127_1==RIGHT_PAREN||LA127_1==SEMI_COLON||LA127_1==STAR||LA127_1==USING) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==DOUBLE_PERIOD) ) {
                    alt127=1;
                }
                else if ( (LA127_2==EOF||LA127_2==COMMA||(LA127_2 >= DIV && LA127_2 <= DOLLAR)||LA127_2==FULL||LA127_2==INNER||LA127_2==LEFT||LA127_2==LEFT_PAREN||LA127_2==MINUS||LA127_2==OUTER||(LA127_2 >= PARALLEL && LA127_2 <= POUND)||LA127_2==RIGHT||LA127_2==RIGHT_PAREN||LA127_2==SEMI_COLON||LA127_2==STAR||LA127_2==USING) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA127_3 = input.LA(2);

                if ( (LA127_3==DOUBLE_PERIOD) ) {
                    alt127=1;
                }
                else if ( (LA127_3==EOF||LA127_3==COMMA||(LA127_3 >= DIV && LA127_3 <= DOLLAR)||LA127_3==FULL||LA127_3==INNER||LA127_3==LEFT||LA127_3==LEFT_PAREN||LA127_3==MINUS||LA127_3==OUTER||(LA127_3 >= PARALLEL && LA127_3 <= POUND)||LA127_3==RIGHT||LA127_3==RIGHT_PAREN||LA127_3==SEMI_COLON||LA127_3==STAR||LA127_3==USING) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA127_4 = input.LA(2);

                if ( (LA127_4==DOUBLE_PERIOD) ) {
                    alt127=1;
                }
                else if ( (LA127_4==EOF||LA127_4==COMMA||LA127_4==DIV||LA127_4==FULL||LA127_4==INNER||LA127_4==LEFT||LA127_4==MINUS||LA127_4==OUTER||(LA127_4 >= PARALLEL && LA127_4 <= POUND)||LA127_4==RIGHT||LA127_4==RIGHT_PAREN||LA127_4==SEMI_COLON||LA127_4==STAR||LA127_4==USING) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt127=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt127=2;
                }
                break;
            case STAR:
                {
                alt127=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:581:22: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_join_group_by_expr4491);
                    col_range449=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range449.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:581:35: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_join_group_by_expr4496);
                    expr450=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr450.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:581:42: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR451=(Token)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr4500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR451_tree = 
                    (Object)adaptor.create(STAR451)
                    ;
                    adaptor.addChild(root_0, STAR451_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:584:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION452=null;
        Token ONSCHEMA453=null;
        QueryParser.rel_list_return rel_list454 =null;


        Object UNION452_tree=null;
        Object ONSCHEMA453_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:584:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:584:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION452=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause4509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION452_tree = 
            (Object)adaptor.create(UNION452)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION452_tree, root_0);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:584:23: ( ONSCHEMA )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ONSCHEMA) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:584:23: ONSCHEMA
                    {
                    ONSCHEMA453=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause4512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA453_tree = 
                    (Object)adaptor.create(ONSCHEMA453)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA453_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause4515);
            rel_list454=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list454.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_simple"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:587:1: foreach_clause_simple : FOREACH ^ rel foreach_plan_simple ;
    public final QueryParser.foreach_clause_simple_return foreach_clause_simple() throws RecognitionException {
        QueryParser.foreach_clause_simple_return retval = new QueryParser.foreach_clause_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH455=null;
        QueryParser.rel_return rel456 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple457 =null;


        Object FOREACH455_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:587:23: ( FOREACH ^ rel foreach_plan_simple )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:587:25: FOREACH ^ rel foreach_plan_simple
            {
            root_0 = (Object)adaptor.nil();


            FOREACH455=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_simple4524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH455_tree = 
            (Object)adaptor.create(FOREACH455)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH455_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_simple4527);
            rel456=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel456.getTree());

            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_clause_simple4529);
            foreach_plan_simple457=foreach_plan_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_simple457.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_simple"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:590:1: foreach_plan_simple : generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.generate_clause_return generate_clause458 =null;


        RewriteRuleSubtreeStream stream_generate_clause=new RewriteRuleSubtreeStream(adaptor,"rule generate_clause");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:590:21: ( generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:590:23: generate_clause
            {
            pushFollow(FOLLOW_generate_clause_in_foreach_plan_simple4538);
            generate_clause458=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_generate_clause.add(generate_clause458.getTree());

            // AST REWRITE
            // elements: generate_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:20: -> ^( FOREACH_PLAN_SIMPLE generate_clause )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:591:23: ^( FOREACH_PLAN_SIMPLE generate_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                adaptor.addChild(root_1, stream_generate_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class foreach_clause_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_complex"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:594:1: foreach_clause_complex : FOREACH ^ rel foreach_plan_complex ;
    public final QueryParser.foreach_clause_complex_return foreach_clause_complex() throws RecognitionException {
        QueryParser.foreach_clause_complex_return retval = new QueryParser.foreach_clause_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH459=null;
        QueryParser.rel_return rel460 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex461 =null;


        Object FOREACH459_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:594:24: ( FOREACH ^ rel foreach_plan_complex )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:594:26: FOREACH ^ rel foreach_plan_complex
            {
            root_0 = (Object)adaptor.nil();


            FOREACH459=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_complex4576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH459_tree = 
            (Object)adaptor.create(FOREACH459)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH459_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_complex4579);
            rel460=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel460.getTree());

            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_clause_complex4581);
            foreach_plan_complex461=foreach_plan_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_complex461.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_complex"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:597:1: foreach_plan_complex : nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_blk_return nested_blk462 =null;


        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:597:22: ( nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:597:24: nested_blk
            {
            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex4590);
            nested_blk462=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk462.getTree());

            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:21: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:598:24: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:601:1: cube_clause : CUBE ^ cube_item ;
    public final QueryParser.cube_clause_return cube_clause() throws RecognitionException {
        QueryParser.cube_clause_return retval = new QueryParser.cube_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CUBE463=null;
        QueryParser.cube_item_return cube_item464 =null;


        Object CUBE463_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:601:13: ( CUBE ^ cube_item )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:601:15: CUBE ^ cube_item
            {
            root_0 = (Object)adaptor.nil();


            CUBE463=(Token)match(input,CUBE,FOLLOW_CUBE_in_cube_clause4629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CUBE463_tree = 
            (Object)adaptor.create(CUBE463)
            ;
            root_0 = (Object)adaptor.becomeRoot(CUBE463_tree, root_0);
            }

            pushFollow(FOLLOW_cube_item_in_cube_clause4632);
            cube_item464=cube_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_item464.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_clause"


    public static class cube_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_item"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:604:1: cube_item : rel ( cube_by_clause ) ;
    public final QueryParser.cube_item_return cube_item() throws RecognitionException {
        QueryParser.cube_item_return retval = new QueryParser.cube_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel465 =null;

        QueryParser.cube_by_clause_return cube_by_clause466 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:604:11: ( rel ( cube_by_clause ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:604:13: rel ( cube_by_clause )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_cube_item4642);
            rel465=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel465.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:604:17: ( cube_by_clause )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:604:19: cube_by_clause
            {
            pushFollow(FOLLOW_cube_by_clause_in_cube_item4646);
            cube_by_clause466=cube_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_by_clause466.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_item"


    public static class cube_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_by_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:607:1: cube_by_clause : BY ^ cube_or_rollup ;
    public final QueryParser.cube_by_clause_return cube_by_clause() throws RecognitionException {
        QueryParser.cube_by_clause_return retval = new QueryParser.cube_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY467=null;
        QueryParser.cube_or_rollup_return cube_or_rollup468 =null;


        Object BY467_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:607:16: ( BY ^ cube_or_rollup )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:607:18: BY ^ cube_or_rollup
            {
            root_0 = (Object)adaptor.nil();


            BY467=(Token)match(input,BY,FOLLOW_BY_in_cube_by_clause4657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY467_tree = 
            (Object)adaptor.create(BY467)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY467_tree, root_0);
            }

            pushFollow(FOLLOW_cube_or_rollup_in_cube_by_clause4660);
            cube_or_rollup468=cube_or_rollup();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_or_rollup468.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_by_clause"


    public static class cube_or_rollup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_or_rollup"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:610:1: cube_or_rollup : cube_rollup_list ( COMMA cube_rollup_list )* -> ( cube_rollup_list )+ ;
    public final QueryParser.cube_or_rollup_return cube_or_rollup() throws RecognitionException {
        QueryParser.cube_or_rollup_return retval = new QueryParser.cube_or_rollup_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA470=null;
        QueryParser.cube_rollup_list_return cube_rollup_list469 =null;

        QueryParser.cube_rollup_list_return cube_rollup_list471 =null;


        Object COMMA470_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_cube_rollup_list=new RewriteRuleSubtreeStream(adaptor,"rule cube_rollup_list");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:610:16: ( cube_rollup_list ( COMMA cube_rollup_list )* -> ( cube_rollup_list )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:610:18: cube_rollup_list ( COMMA cube_rollup_list )*
            {
            pushFollow(FOLLOW_cube_rollup_list_in_cube_or_rollup4669);
            cube_rollup_list469=cube_rollup_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list469.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:610:35: ( COMMA cube_rollup_list )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:610:37: COMMA cube_rollup_list
            	    {
            	    COMMA470=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_or_rollup4673); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA470);


            	    pushFollow(FOLLOW_cube_rollup_list_in_cube_or_rollup4675);
            	    cube_rollup_list471=cube_rollup_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cube_rollup_list.add(cube_rollup_list471.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            // AST REWRITE
            // elements: cube_rollup_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:17: -> ( cube_rollup_list )+
            {
                if ( !(stream_cube_rollup_list.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cube_rollup_list.hasNext() ) {
                    adaptor.addChild(root_0, stream_cube_rollup_list.nextTree());

                }
                stream_cube_rollup_list.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_or_rollup"


    public static class cube_rollup_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_rollup_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:614:1: cube_rollup_list : ( CUBE | ROLLUP ) ^ cube_by_expr_list ;
    public final QueryParser.cube_rollup_list_return cube_rollup_list() throws RecognitionException {
        QueryParser.cube_rollup_list_return retval = new QueryParser.cube_rollup_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set472=null;
        QueryParser.cube_by_expr_list_return cube_by_expr_list473 =null;


        Object set472_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:614:18: ( ( CUBE | ROLLUP ) ^ cube_by_expr_list )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:614:20: ( CUBE | ROLLUP ) ^ cube_by_expr_list
            {
            root_0 = (Object)adaptor.nil();


            set472=(Token)input.LT(1);

            set472=(Token)input.LT(1);

            if ( input.LA(1)==CUBE||input.LA(1)==ROLLUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set472)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_cube_by_expr_list_in_cube_rollup_list4719);
            cube_by_expr_list473=cube_by_expr_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cube_by_expr_list473.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_rollup_list"


    public static class cube_by_expr_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_by_expr_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:617:1: cube_by_expr_list : LEFT_PAREN cube_by_expr ( COMMA cube_by_expr )* RIGHT_PAREN -> ( cube_by_expr )+ ;
    public final QueryParser.cube_by_expr_list_return cube_by_expr_list() throws RecognitionException {
        QueryParser.cube_by_expr_list_return retval = new QueryParser.cube_by_expr_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN474=null;
        Token COMMA476=null;
        Token RIGHT_PAREN478=null;
        QueryParser.cube_by_expr_return cube_by_expr475 =null;

        QueryParser.cube_by_expr_return cube_by_expr477 =null;


        Object LEFT_PAREN474_tree=null;
        Object COMMA476_tree=null;
        Object RIGHT_PAREN478_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_cube_by_expr=new RewriteRuleSubtreeStream(adaptor,"rule cube_by_expr");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:617:19: ( LEFT_PAREN cube_by_expr ( COMMA cube_by_expr )* RIGHT_PAREN -> ( cube_by_expr )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:617:21: LEFT_PAREN cube_by_expr ( COMMA cube_by_expr )* RIGHT_PAREN
            {
            LEFT_PAREN474=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cube_by_expr_list4728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN474);


            pushFollow(FOLLOW_cube_by_expr_in_cube_by_expr_list4730);
            cube_by_expr475=cube_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cube_by_expr.add(cube_by_expr475.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:617:45: ( COMMA cube_by_expr )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==COMMA) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:617:47: COMMA cube_by_expr
            	    {
            	    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_cube_by_expr_list4734); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA476);


            	    pushFollow(FOLLOW_cube_by_expr_in_cube_by_expr_list4736);
            	    cube_by_expr477=cube_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cube_by_expr.add(cube_by_expr477.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            RIGHT_PAREN478=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cube_by_expr_list4741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN478);


            // AST REWRITE
            // elements: cube_by_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:20: -> ( cube_by_expr )+
            {
                if ( !(stream_cube_by_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cube_by_expr.hasNext() ) {
                    adaptor.addChild(root_0, stream_cube_by_expr.nextTree());

                }
                stream_cube_by_expr.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_by_expr_list"


    public static class cube_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_by_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:621:1: cube_by_expr : ( col_range | expr | STAR );
    public final QueryParser.cube_by_expr_return cube_by_expr() throws RecognitionException {
        QueryParser.cube_by_expr_return retval = new QueryParser.cube_by_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR481=null;
        QueryParser.col_range_return col_range479 =null;

        QueryParser.expr_return expr480 =null;


        Object STAR481_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:621:14: ( col_range | expr | STAR )
            int alt131=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA131_1 = input.LA(2);

                if ( (LA131_1==DOUBLE_PERIOD) ) {
                    alt131=1;
                }
                else if ( (LA131_1==EOF||LA131_1==COMMA||(LA131_1 >= DIV && LA131_1 <= DOLLAR)||LA131_1==LEFT_PAREN||LA131_1==MINUS||(LA131_1 >= PERCENT && LA131_1 <= POUND)||LA131_1==RIGHT_PAREN||LA131_1==STAR) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA131_2 = input.LA(2);

                if ( (LA131_2==DOUBLE_PERIOD) ) {
                    alt131=1;
                }
                else if ( (LA131_2==EOF||LA131_2==COMMA||(LA131_2 >= DIV && LA131_2 <= DOLLAR)||LA131_2==LEFT_PAREN||LA131_2==MINUS||(LA131_2 >= PERCENT && LA131_2 <= POUND)||LA131_2==RIGHT_PAREN||LA131_2==STAR) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA131_3 = input.LA(2);

                if ( (LA131_3==DOUBLE_PERIOD) ) {
                    alt131=1;
                }
                else if ( (LA131_3==EOF||LA131_3==COMMA||(LA131_3 >= DIV && LA131_3 <= DOLLAR)||LA131_3==LEFT_PAREN||LA131_3==MINUS||(LA131_3 >= PERCENT && LA131_3 <= POUND)||LA131_3==RIGHT_PAREN||LA131_3==STAR) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA131_4 = input.LA(2);

                if ( (LA131_4==DOUBLE_PERIOD) ) {
                    alt131=1;
                }
                else if ( (LA131_4==EOF||LA131_4==COMMA||LA131_4==DIV||LA131_4==MINUS||(LA131_4 >= PERCENT && LA131_4 <= POUND)||LA131_4==RIGHT_PAREN||LA131_4==STAR) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 4, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt131=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DATETIME:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case ROLLUP:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
            case BOOL_COND:
            case REALIAS:
                {
                alt131=2;
                }
                break;
            case STAR:
                {
                alt131=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:621:16: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_cube_by_expr4774);
                    col_range479=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range479.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:621:29: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_cube_by_expr4779);
                    expr480=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr480.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:621:36: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR481=(Token)match(input,STAR,FOLLOW_STAR_in_cube_by_expr4783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR481_tree = 
                    (Object)adaptor.create(STAR481)
                    ;
                    adaptor.addChild(root_0, STAR481_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_by_expr"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:624:1: nested_blk : LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY482=null;
        Token SEMI_COLON485=null;
        Token RIGHT_CURLY486=null;
        QueryParser.nested_command_list_return nested_command_list483 =null;

        QueryParser.generate_clause_return generate_clause484 =null;


        Object LEFT_CURLY482_tree=null;
        Object SEMI_COLON485_tree=null;
        Object RIGHT_CURLY486_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:624:12: ( LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:624:14: LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY482=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_nested_blk4792); if (state.failed) return retval;

            pushFollow(FOLLOW_nested_command_list_in_nested_blk4795);
            nested_command_list483=nested_command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_command_list483.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:624:46: ( generate_clause SEMI_COLON !)
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:624:48: generate_clause SEMI_COLON !
            {
            pushFollow(FOLLOW_generate_clause_in_nested_blk4799);
            generate_clause484=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause484.getTree());

            SEMI_COLON485=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk4801); if (state.failed) return retval;

            }


            RIGHT_CURLY486=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_nested_blk4806); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:627:1: generate_clause : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.generate_clause_return generate_clause() throws RecognitionException {
        QueryParser.generate_clause_return retval = new QueryParser.generate_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE487=null;
        Token COMMA489=null;
        QueryParser.flatten_generated_item_return flatten_generated_item488 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item490 =null;


        Object GENERATE487_tree=null;
        Object COMMA489_tree=null;
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:627:17: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:627:19: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE487=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause4816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE487);


            pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4818);
            flatten_generated_item488=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item488.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:627:51: ( COMMA flatten_generated_item )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:627:53: COMMA flatten_generated_item
            	    {
            	    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_generate_clause4822); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA489);


            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4824);
            	    flatten_generated_item490=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item490.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            // AST REWRITE
            // elements: GENERATE, flatten_generated_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:19: -> ^( GENERATE ( flatten_generated_item )+ )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:628:22: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:1: nested_command_list : ( ( nested_command SEMI_COLON )* -> ( nested_command )* |);
    public final QueryParser.nested_command_list_return nested_command_list() throws RecognitionException {
        QueryParser.nested_command_list_return retval = new QueryParser.nested_command_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON492=null;
        QueryParser.nested_command_return nested_command491 =null;


        Object SEMI_COLON492_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:21: ( ( nested_command SEMI_COLON )* -> ( nested_command )* |)
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==IDENTIFIER_L) ) {
                alt134=1;
            }
            else if ( (LA134_0==GENERATE) ) {
                int LA134_2 = input.LA(2);

                if ( (synpred213_QueryParser()) ) {
                    alt134=1;
                }
                else if ( (true) ) {
                    alt134=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:23: ( nested_command SEMI_COLON )*
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:23: ( nested_command SEMI_COLON )*
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==IDENTIFIER_L) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:25: nested_command SEMI_COLON
                    	    {
                    	    pushFollow(FOLLOW_nested_command_in_nested_command_list4867);
                    	    nested_command491=nested_command();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command491.getTree());

                    	    SEMI_COLON492=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_command_list4869); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON492);


                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: nested_command
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 632:20: -> ( nested_command )*
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:632:23: ( nested_command )*
                        while ( stream_nested_command.hasNext() ) {
                            adaptor.addChild(root_0, stream_nested_command.nextTree());

                        }
                        stream_nested_command.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:634:21: 
                    {
                    root_0 = (Object)adaptor.nil();


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command_list"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL494=null;
        Token EQUAL497=null;
        Token EQUAL500=null;
        QueryParser.identifier_return identifier493 =null;

        QueryParser.nested_proj_return nested_proj495 =null;

        QueryParser.identifier_return identifier496 =null;

        QueryParser.expr_return expr498 =null;

        QueryParser.identifier_return identifier499 =null;

        QueryParser.nested_op_return nested_op501 =null;


        Object EQUAL494_tree=null;
        Object EQUAL497_tree=null;
        Object EQUAL500_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:16: ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) )
            int alt135=3;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj )
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:103: ( identifier EQUAL nested_proj )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:105: identifier EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4947);
                    identifier493=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier493.getTree());

                    EQUAL494=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL494);


                    pushFollow(FOLLOW_nested_proj_in_nested_command4951);
                    nested_proj495=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj495.getTree());

                    }


                    // AST REWRITE
                    // elements: identifier, nested_proj
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 637:15: -> ^( NESTED_CMD identifier nested_proj )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:637:18: ^( NESTED_CMD identifier nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:638:18: identifier EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4998);
                    identifier496=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier496.getTree());

                    EQUAL497=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command5000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL497);


                    pushFollow(FOLLOW_expr_in_nested_command5002);
                    expr498=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr498.getTree());

                    // AST REWRITE
                    // elements: identifier, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 639:15: -> ^( NESTED_CMD_ASSI identifier expr )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:639:18: ^( NESTED_CMD_ASSI identifier expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:640:18: identifier EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command5047);
                    identifier499=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier499.getTree());

                    EQUAL500=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command5049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL500);


                    pushFollow(FOLLOW_nested_op_in_nested_command5051);
                    nested_op501=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op501.getTree());

                    // AST REWRITE
                    // elements: nested_op, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 641:15: -> ^( NESTED_CMD identifier nested_op )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:641:18: ^( NESTED_CMD identifier nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:644:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter502 =null;

        QueryParser.nested_sort_return nested_sort503 =null;

        QueryParser.nested_distinct_return nested_distinct504 =null;

        QueryParser.nested_limit_return nested_limit505 =null;

        QueryParser.nested_cross_return nested_cross506 =null;

        QueryParser.nested_foreach_return nested_foreach507 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:644:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt136=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt136=1;
                }
                break;
            case ORDER:
                {
                alt136=2;
                }
                break;
            case DISTINCT:
                {
                alt136=3;
                }
                break;
            case LIMIT:
                {
                alt136=4;
                }
                break;
            case CROSS:
                {
                alt136=5;
                }
                break;
            case FOREACH:
                {
                alt136=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }

            switch (alt136) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:644:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op5086);
                    nested_filter502=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter502.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:645:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op5100);
                    nested_sort503=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort503.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:646:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op5114);
                    nested_distinct504=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct504.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:647:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op5128);
                    nested_limit505=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit505.getTree());

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:648:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op5142);
                    nested_cross506=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross506.getTree());

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:649:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op5156);
                    nested_foreach507=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach507.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:652:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD509=null;
        QueryParser.col_ref_return col_ref508 =null;

        QueryParser.col_ref_list_return col_ref_list510 =null;


        Object PERIOD509_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:652:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:652:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj5165);
            col_ref508=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref508.getTree());

            PERIOD509=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj5167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD509);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj5169);
            col_ref_list510=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list510.getTree());

            // AST REWRITE
            // elements: col_ref, col_ref_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:653:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN512=null;
        Token COMMA514=null;
        Token RIGHT_PAREN516=null;
        QueryParser.col_ref_return col_ref511 =null;

        QueryParser.col_ref_return col_ref513 =null;

        QueryParser.col_ref_return col_ref515 =null;


        Object LEFT_PAREN512_tree=null;
        Object COMMA514_tree=null;
        Object RIGHT_PAREN516_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==CUBE||LA138_0==DOLLARVAR||LA138_0==GROUP||LA138_0==IDENTIFIER_L) ) {
                alt138=1;
            }
            else if ( (LA138_0==LEFT_PAREN) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list5203);
                    col_ref511=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref511.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN512=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list5209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN512);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list5211);
                    col_ref513=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref513.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:49: ( COMMA col_ref )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:656:51: COMMA col_ref
                    	    {
                    	    COMMA514=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list5215); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA514);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list5217);
                    	    col_ref515=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref515.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    RIGHT_PAREN516=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list5222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN516);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:660:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER517=null;
        Token BY519=null;
        QueryParser.nested_op_input_return nested_op_input518 =null;

        QueryParser.cond_return cond520 =null;


        Object FILTER517_tree=null;
        Object BY519_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:660:15: ( FILTER ^ nested_op_input BY ! cond )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:660:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER517=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter5252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER517_tree = 
            (Object)adaptor.create(FILTER517)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER517_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter5255);
            nested_op_input518=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input518.getTree());

            BY519=(Token)match(input,BY,FOLLOW_BY_in_nested_filter5257); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter5260);
            cond520=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond520.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:663:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER521=null;
        Token BY523=null;
        Token USING525=null;
        QueryParser.nested_op_input_return nested_op_input522 =null;

        QueryParser.order_by_clause_return order_by_clause524 =null;

        QueryParser.func_clause_return func_clause526 =null;


        Object ORDER521_tree=null;
        Object BY523_tree=null;
        Object USING525_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:663:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:663:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER521=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort5269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER521_tree = 
            (Object)adaptor.create(ORDER521)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER521_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort5272);
            nested_op_input522=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input522.getTree());

            BY523=(Token)match(input,BY,FOLLOW_BY_in_nested_sort5274); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort5278);
            order_by_clause524=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause524.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:663:59: ( USING ! func_clause )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==USING) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:663:61: USING ! func_clause
                    {
                    USING525=(Token)match(input,USING,FOLLOW_USING_in_nested_sort5282); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort5285);
                    func_clause526=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause526.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:666:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT527=null;
        QueryParser.nested_op_input_return nested_op_input528 =null;


        Object DISTINCT527_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:666:17: ( DISTINCT ^ nested_op_input )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:666:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT527=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct5297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT527_tree = 
            (Object)adaptor.create(DISTINCT527)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT527_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct5300);
            nested_op_input528=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input528.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT529=null;
        Token INTEGER531=null;
        QueryParser.nested_op_input_return nested_op_input530 =null;

        QueryParser.expr_return expr532 =null;


        Object LIMIT529_tree=null;
        Object INTEGER531_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT529=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit5309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT529_tree = 
            (Object)adaptor.create(LIMIT529)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT529_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit5312);
            nested_op_input530=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input530.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==INTEGER) ) {
                int LA140_1 = input.LA(2);

                if ( (synpred224_QueryParser()) ) {
                    alt140=1;
                }
                else if ( (true) ) {
                    alt140=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA140_0 >= ALL && LA140_0 <= BAG)||(LA140_0 >= BY && LA140_0 <= COGROUP)||(LA140_0 >= CROSS && LA140_0 <= DATETIME)||LA140_0==DEFINE||LA140_0==DESC||LA140_0==DISTINCT||(LA140_0 >= DOLLARVAR && LA140_0 <= DOUBLENUMBER)||(LA140_0 >= FALSE && LA140_0 <= FLOAT)||(LA140_0 >= FLOATNUMBER && LA140_0 <= GROUP)||(LA140_0 >= IDENTIFIER_L && LA140_0 <= INT)||(LA140_0 >= INTO && LA140_0 <= LEFT_PAREN)||(LA140_0 >= LIMIT && LA140_0 <= MINUS)||LA140_0==NOT||(LA140_0 >= OR && LA140_0 <= ORDER)||(LA140_0 >= OUTER && LA140_0 <= PARTITION)||LA140_0==QUOTEDSTRING||(LA140_0 >= RETURNS && LA140_0 <= RIGHT)||(LA140_0 >= ROLLUP && LA140_0 <= SAMPLE)||LA140_0==SHIP||LA140_0==SPLIT||(LA140_0 >= STDERROR && LA140_0 <= USING)||(LA140_0 >= BOOL && LA140_0 <= BOOL_COND)||LA140_0==REALIAS) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER531=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit5324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER531_tree = 
                    (Object)adaptor.create(INTEGER531)
                    ;
                    adaptor.addChild(root_0, INTEGER531_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit5328);
                    expr532=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr532.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:672:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS533=null;
        QueryParser.nested_op_input_list_return nested_op_input_list534 =null;


        Object CROSS533_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:672:14: ( CROSS ^ nested_op_input_list )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:672:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS533=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross5339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS533_tree = 
            (Object)adaptor.create(CROSS533)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS533_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross5342);
            nested_op_input_list534=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list534.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:675:1: nested_foreach : FOREACH ^ nested_op_input generate_clause ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH535=null;
        QueryParser.nested_op_input_return nested_op_input536 =null;

        QueryParser.generate_clause_return generate_clause537 =null;


        Object FOREACH535_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:675:15: ( FOREACH ^ nested_op_input generate_clause )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:675:17: FOREACH ^ nested_op_input generate_clause
            {
            root_0 = (Object)adaptor.nil();


            FOREACH535=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach5350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH535_tree = 
            (Object)adaptor.create(FOREACH535)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH535_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_foreach5353);
            nested_op_input536=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input536.getTree());

            pushFollow(FOLLOW_generate_clause_in_nested_foreach5355);
            generate_clause537=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause537.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:678:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref538 =null;

        QueryParser.nested_proj_return nested_proj539 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:678:17: ( col_ref | nested_proj )
            int alt141=2;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==EOF||(LA141_1 >= ALL && LA141_1 <= BAG)||(LA141_1 >= BY && LA141_1 <= COGROUP)||(LA141_1 >= COMMA && LA141_1 <= DATETIME)||LA141_1==DEFINE||LA141_1==DESC||LA141_1==DISTINCT||(LA141_1 >= DOLLARVAR && LA141_1 <= DOUBLENUMBER)||(LA141_1 >= FALSE && LA141_1 <= FLOAT)||(LA141_1 >= FLOATNUMBER && LA141_1 <= GROUP)||(LA141_1 >= IDENTIFIER_L && LA141_1 <= LEFT_PAREN)||(LA141_1 >= LIMIT && LA141_1 <= MINUS)||LA141_1==NOT||(LA141_1 >= OR && LA141_1 <= ORDER)||(LA141_1 >= OUTER && LA141_1 <= PARTITION)||LA141_1==QUOTEDSTRING||(LA141_1 >= RETURNS && LA141_1 <= RIGHT)||(LA141_1 >= ROLLUP && LA141_1 <= SHIP)||LA141_1==SPLIT||(LA141_1 >= STDERROR && LA141_1 <= USING)||(LA141_1 >= BOOL && LA141_1 <= BOOL_COND)||LA141_1==REALIAS) ) {
                    alt141=1;
                }
                else if ( (LA141_1==PERIOD) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;

                }
                }
                break;
            case CUBE:
                {
                int LA141_2 = input.LA(2);

                if ( (LA141_2==EOF||(LA141_2 >= ALL && LA141_2 <= BAG)||(LA141_2 >= BY && LA141_2 <= COGROUP)||(LA141_2 >= COMMA && LA141_2 <= DATETIME)||LA141_2==DEFINE||LA141_2==DESC||LA141_2==DISTINCT||(LA141_2 >= DOLLARVAR && LA141_2 <= DOUBLENUMBER)||(LA141_2 >= FALSE && LA141_2 <= FLOAT)||(LA141_2 >= FLOATNUMBER && LA141_2 <= GROUP)||(LA141_2 >= IDENTIFIER_L && LA141_2 <= LEFT_PAREN)||(LA141_2 >= LIMIT && LA141_2 <= MINUS)||LA141_2==NOT||(LA141_2 >= OR && LA141_2 <= ORDER)||(LA141_2 >= OUTER && LA141_2 <= PARTITION)||LA141_2==QUOTEDSTRING||(LA141_2 >= RETURNS && LA141_2 <= RIGHT)||(LA141_2 >= ROLLUP && LA141_2 <= SHIP)||LA141_2==SPLIT||(LA141_2 >= STDERROR && LA141_2 <= USING)||(LA141_2 >= BOOL && LA141_2 <= BOOL_COND)||LA141_2==REALIAS) ) {
                    alt141=1;
                }
                else if ( (LA141_2==PERIOD) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA141_3 = input.LA(2);

                if ( (LA141_3==EOF||(LA141_3 >= ALL && LA141_3 <= BAG)||(LA141_3 >= BY && LA141_3 <= COGROUP)||(LA141_3 >= COMMA && LA141_3 <= DATETIME)||LA141_3==DEFINE||LA141_3==DESC||LA141_3==DISTINCT||(LA141_3 >= DOLLARVAR && LA141_3 <= DOUBLENUMBER)||(LA141_3 >= FALSE && LA141_3 <= FLOAT)||(LA141_3 >= FLOATNUMBER && LA141_3 <= GROUP)||(LA141_3 >= IDENTIFIER_L && LA141_3 <= LEFT_PAREN)||(LA141_3 >= LIMIT && LA141_3 <= MINUS)||LA141_3==NOT||(LA141_3 >= OR && LA141_3 <= ORDER)||(LA141_3 >= OUTER && LA141_3 <= PARTITION)||LA141_3==QUOTEDSTRING||(LA141_3 >= RETURNS && LA141_3 <= RIGHT)||(LA141_3 >= ROLLUP && LA141_3 <= SHIP)||LA141_3==SPLIT||(LA141_3 >= STDERROR && LA141_3 <= USING)||(LA141_3 >= BOOL && LA141_3 <= BOOL_COND)||LA141_3==REALIAS) ) {
                    alt141=1;
                }
                else if ( (LA141_3==PERIOD) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA141_4 = input.LA(2);

                if ( (LA141_4==EOF||(LA141_4 >= ALL && LA141_4 <= BAG)||(LA141_4 >= BY && LA141_4 <= COGROUP)||(LA141_4 >= COMMA && LA141_4 <= DATETIME)||LA141_4==DEFINE||LA141_4==DESC||LA141_4==DISTINCT||(LA141_4 >= DOLLARVAR && LA141_4 <= DOUBLENUMBER)||(LA141_4 >= FALSE && LA141_4 <= FLOAT)||(LA141_4 >= FLOATNUMBER && LA141_4 <= GROUP)||(LA141_4 >= IDENTIFIER_L && LA141_4 <= LEFT_PAREN)||(LA141_4 >= LIMIT && LA141_4 <= MINUS)||LA141_4==NOT||(LA141_4 >= OR && LA141_4 <= ORDER)||(LA141_4 >= OUTER && LA141_4 <= PARTITION)||LA141_4==QUOTEDSTRING||(LA141_4 >= RETURNS && LA141_4 <= RIGHT)||(LA141_4 >= ROLLUP && LA141_4 <= SHIP)||LA141_4==SPLIT||(LA141_4 >= STDERROR && LA141_4 <= USING)||(LA141_4 >= BOOL && LA141_4 <= BOOL_COND)||LA141_4==REALIAS) ) {
                    alt141=1;
                }
                else if ( (LA141_4==PERIOD) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:678:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input5364);
                    col_ref538=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref538.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:678:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input5368);
                    nested_proj539=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj539.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:681:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA541=null;
        QueryParser.nested_op_input_return nested_op_input540 =null;

        QueryParser.nested_op_input_return nested_op_input542 =null;


        Object COMMA541_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:681:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:681:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list5377);
            nested_op_input540=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input540.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:681:40: ( COMMA nested_op_input )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:681:42: COMMA nested_op_input
            	    {
            	    COMMA541=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list5381); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA541);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list5383);
            	    nested_op_input542=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input542.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 682:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM543=null;
        Token THROUGH545=null;
        Token EXECCOMMAND546=null;
        QueryParser.rel_return rel544 =null;

        QueryParser.alias_return alias547 =null;

        QueryParser.as_clause_return as_clause548 =null;


        Object STREAM543_tree=null;
        Object THROUGH545_tree=null;
        Object EXECCOMMAND546_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM543=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause5408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM543_tree = 
            (Object)adaptor.create(STREAM543)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM543_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause5411);
            rel544=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel544.getTree());

            THROUGH545=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause5413); if (state.failed) return retval;

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:38: ( EXECCOMMAND | alias )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==EXECCOMMAND) ) {
                alt143=1;
            }
            else if ( (LA143_0==IDENTIFIER_L) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:40: EXECCOMMAND
                    {
                    EXECCOMMAND546=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause5418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND546_tree = 
                    (Object)adaptor.create(EXECCOMMAND546)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND546_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:54: alias
                    {
                    pushFollow(FOLLOW_alias_in_stream_clause5422);
                    alias547=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias547.getTree());

                    }
                    break;

            }


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:62: ( as_clause )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==AS) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:685:62: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause5426);
                    as_clause548=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause548.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE549=null;
        Token QUOTEDSTRING550=null;
        Token LEFT_PAREN551=null;
        Token RIGHT_PAREN553=null;
        Token EXECCOMMAND556=null;
        QueryParser.path_list_return path_list552 =null;

        QueryParser.store_clause_return store_clause554 =null;

        QueryParser.load_clause_return load_clause555 =null;


        Object MAPREDUCE549_tree=null;
        Object QUOTEDSTRING550_tree=null;
        Object LEFT_PAREN551_tree=null;
        Object RIGHT_PAREN553_tree=null;
        Object EXECCOMMAND556_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE549=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause5436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE549_tree = 
            (Object)adaptor.create(MAPREDUCE549)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE549_tree, root_0);
            }

            QUOTEDSTRING550=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause5439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING550_tree = 
            (Object)adaptor.create(QUOTEDSTRING550)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING550_tree);
            }

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LEFT_PAREN) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN551=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause5443); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause5446);
                    path_list552=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list552.getTree());

                    RIGHT_PAREN553=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause5448); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause5454);
            store_clause554=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause554.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause5456);
            load_clause555=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause555.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:102: ( EXECCOMMAND )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==EXECCOMMAND) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:688:102: EXECCOMMAND
                    {
                    EXECCOMMAND556=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause5458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND556_tree = 
                    (Object)adaptor.create(EXECCOMMAND556)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND556_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:1: split_clause : SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT557=null;
        Token INTO559=null;
        Token COMMA561=null;
        Token COMMA563=null;
        Token COMMA565=null;
        QueryParser.rel_return rel558 =null;

        QueryParser.split_branch_return split_branch560 =null;

        QueryParser.split_branch_return split_branch562 =null;

        QueryParser.split_branch_return split_branch564 =null;

        QueryParser.split_otherwise_return split_otherwise566 =null;


        Object SPLIT557_tree=null;
        Object INTO559_tree=null;
        Object COMMA561_tree=null;
        Object COMMA563_tree=null;
        Object COMMA565_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_SPLIT=new RewriteRuleTokenStream(adaptor,"token SPLIT");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_split_otherwise=new RewriteRuleSubtreeStream(adaptor,"rule split_otherwise");
        RewriteRuleSubtreeStream stream_split_branch=new RewriteRuleSubtreeStream(adaptor,"rule split_branch");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:14: ( SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:16: SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            {
            SPLIT557=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause5468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SPLIT.add(SPLIT557);


            pushFollow(FOLLOW_rel_in_split_clause5470);
            rel558=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel558.getTree());

            INTO559=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause5472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO559);


            pushFollow(FOLLOW_split_branch_in_split_clause5474);
            split_branch560=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_split_branch.add(split_branch560.getTree());

            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:44: ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==COMMA) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred232_QueryParser()) ) {
                    alt149=1;
                }
                else if ( (true) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }
            switch (alt149) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:46: ( COMMA split_branch )+
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:46: ( COMMA split_branch )+
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==COMMA) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:48: COMMA split_branch
                    	    {
                    	    COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5480); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA561);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5482);
                    	    split_branch562=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch562.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:74: ( COMMA split_branch )* COMMA split_otherwise
                    {
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:74: ( COMMA split_branch )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==COMMA) ) {
                            int LA148_1 = input.LA(2);

                            if ( (LA148_1==IDENTIFIER_L) ) {
                                int LA148_2 = input.LA(3);

                                if ( (LA148_2==IF) ) {
                                    alt148=1;
                                }


                            }


                        }


                        switch (alt148) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:76: COMMA split_branch
                    	    {
                    	    COMMA563=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5493); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA563);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5495);
                    	    split_branch564=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch564.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);


                    COMMA565=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA565);


                    pushFollow(FOLLOW_split_otherwise_in_split_clause5502);
                    split_otherwise566=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_split_otherwise.add(split_otherwise566.getTree());

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: split_otherwise, SPLIT, rel, split_branch
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:13: -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:692:16: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_SPLIT.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                if ( !(stream_split_branch.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_split_branch.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_branch.nextTree());

                }
                stream_split_branch.reset();

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:692:43: ( split_otherwise )?
                if ( stream_split_otherwise.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_otherwise.nextTree());

                }
                stream_split_otherwise.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:695:1: split_branch : alias IF cond -> ^( SPLIT_BRANCH alias cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF568=null;
        QueryParser.alias_return alias567 =null;

        QueryParser.cond_return cond569 =null;


        Object IF568_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:695:14: ( alias IF cond -> ^( SPLIT_BRANCH alias cond ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:695:16: alias IF cond
            {
            pushFollow(FOLLOW_alias_in_split_branch5542);
            alias567=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias567.getTree());

            IF568=(Token)match(input,IF,FOLLOW_IF_in_split_branch5544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF568);


            pushFollow(FOLLOW_cond_in_split_branch5546);
            cond569=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond569.getTree());

            // AST REWRITE
            // elements: cond, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:13: -> ^( SPLIT_BRANCH alias cond )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:696:16: ^( SPLIT_BRANCH alias cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:699:1: split_otherwise : alias OTHERWISE -> ^( OTHERWISE alias ) ;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE571=null;
        QueryParser.alias_return alias570 =null;


        Object OTHERWISE571_tree=null;
        RewriteRuleTokenStream stream_OTHERWISE=new RewriteRuleTokenStream(adaptor,"token OTHERWISE");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:699:17: ( alias OTHERWISE -> ^( OTHERWISE alias ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:699:19: alias OTHERWISE
            {
            pushFollow(FOLLOW_alias_in_split_otherwise5579);
            alias570=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias570.getTree());

            OTHERWISE571=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise5581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OTHERWISE.add(OTHERWISE571);


            // AST REWRITE
            // elements: OTHERWISE, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 700:13: -> ^( OTHERWISE alias )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:700:16: ^( OTHERWISE alias )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_OTHERWISE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:703:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.alias_col_ref_return alias_col_ref572 =null;

        QueryParser.dollar_col_ref_return dollar_col_ref573 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:703:9: ( alias_col_ref | dollar_col_ref )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==CUBE||LA150_0==GROUP||LA150_0==IDENTIFIER_L) ) {
                alt150=1;
            }
            else if ( (LA150_0==DOLLARVAR) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }
            switch (alt150) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:703:11: alias_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_col_ref_in_col_ref5612);
                    alias_col_ref572=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_col_ref572.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:703:27: dollar_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref5616);
                    dollar_col_ref573=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dollar_col_ref573.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:706:1: alias_col_ref : ( GROUP | CUBE | identifier );
    public final QueryParser.alias_col_ref_return alias_col_ref() throws RecognitionException {
        QueryParser.alias_col_ref_return retval = new QueryParser.alias_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP574=null;
        Token CUBE575=null;
        QueryParser.identifier_return identifier576 =null;


        Object GROUP574_tree=null;
        Object CUBE575_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:706:15: ( GROUP | CUBE | identifier )
            int alt151=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                alt151=1;
                }
                break;
            case CUBE:
                {
                alt151=2;
                }
                break;
            case IDENTIFIER_L:
                {
                alt151=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;

            }

            switch (alt151) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:706:17: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP574=(Token)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref5625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP574_tree = 
                    (Object)adaptor.create(GROUP574)
                    ;
                    adaptor.addChild(root_0, GROUP574_tree);
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:706:25: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE575=(Token)match(input,CUBE,FOLLOW_CUBE_in_alias_col_ref5629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE575_tree = 
                    (Object)adaptor.create(CUBE575)
                    ;
                    adaptor.addChild(root_0, CUBE575_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:706:32: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_alias_col_ref5633);
                    identifier576=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier576.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:709:1: dollar_col_ref : DOLLARVAR ;
    public final QueryParser.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        QueryParser.dollar_col_ref_return retval = new QueryParser.dollar_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR577=null;

        Object DOLLARVAR577_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:709:16: ( DOLLARVAR )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:709:18: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR577=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref5642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR577_tree = 
            (Object)adaptor.create(DOLLARVAR577)
            ;
            adaptor.addChild(root_0, DOLLARVAR577_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:712:1: const_expr : literal ;
    public final QueryParser.const_expr_return const_expr() throws RecognitionException {
        QueryParser.const_expr_return retval = new QueryParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.literal_return literal578 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:712:12: ( literal )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:712:14: literal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_literal_in_const_expr5651);
            literal578=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal578.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:1: literal : ( scalar | map | bag | tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar579 =null;

        QueryParser.map_return map580 =null;

        QueryParser.bag_return bag581 =null;

        QueryParser.tuple_return tuple582 =null;



        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:9: ( scalar | map | bag | tuple )
            int alt152=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case IDENTIFIER_L:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt152=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt152=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt152=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt152=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }

            switch (alt152) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal5660);
                    scalar579=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar579.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:20: map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_in_literal5664);
                    map580=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map580.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:26: bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_in_literal5668);
                    bag581=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag581.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:715:32: tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_in_literal5672);
                    tuple582=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple582.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:1: scalar : ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING584=null;
        Token TRUE586=null;
        Token FALSE587=null;
        QueryParser.num_scalar_return num_scalar583 =null;

        QueryParser.null_keyword_return null_keyword585 =null;


        Object QUOTEDSTRING584_tree=null;
        Object TRUE586_tree=null;
        Object FALSE587_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:8: ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE )
            int alt153=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt153=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt153=2;
                }
                break;
            case IDENTIFIER_L:
                {
                alt153=3;
                }
                break;
            case TRUE:
                {
                alt153=4;
                }
                break;
            case FALSE:
                {
                alt153=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }

            switch (alt153) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:10: num_scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_num_scalar_in_scalar5682);
                    num_scalar583=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num_scalar583.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:23: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING584=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar5686); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING584_tree = 
                    (Object)adaptor.create(QUOTEDSTRING584)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING584_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:38: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_scalar5690);
                    null_keyword585=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword585.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:53: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE586=(Token)match(input,TRUE,FOLLOW_TRUE_in_scalar5694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE586_tree = 
                    (Object)adaptor.create(TRUE586)
                    ;
                    adaptor.addChild(root_0, TRUE586_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:719:60: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE587=(Token)match(input,FALSE,FOLLOW_FALSE_in_scalar5698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE587_tree = 
                    (Object)adaptor.create(FALSE587)
                    ;
                    adaptor.addChild(root_0, FALSE587_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:722:1: num_scalar : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final QueryParser.num_scalar_return num_scalar() throws RecognitionException {
        QueryParser.num_scalar_return retval = new QueryParser.num_scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS588=null;
        Token set589=null;

        Object MINUS588_tree=null;
        Object set589_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:722:12: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:722:14: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (Object)adaptor.nil();


            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:722:14: ( MINUS )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==MINUS) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:722:14: MINUS
                    {
                    MINUS588=(Token)match(input,MINUS,FOLLOW_MINUS_in_num_scalar5707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS588_tree = 
                    (Object)adaptor.create(MINUS588)
                    ;
                    adaptor.addChild(root_0, MINUS588_tree);
                    }

                    }
                    break;

            }


            set589=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set589)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:725:1: map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.map_return map() throws RecognitionException {
        QueryParser.map_return retval = new QueryParser.map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET590=null;
        Token COMMA592=null;
        Token RIGHT_BRACKET594=null;
        Token LEFT_BRACKET595=null;
        Token RIGHT_BRACKET596=null;
        QueryParser.keyvalue_return keyvalue591 =null;

        QueryParser.keyvalue_return keyvalue593 =null;


        Object LEFT_BRACKET590_tree=null;
        Object COMMA592_tree=null;
        Object RIGHT_BRACKET594_tree=null;
        Object LEFT_BRACKET595_tree=null;
        Object RIGHT_BRACKET596_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:725:5: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LEFT_BRACKET) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==RIGHT_BRACKET) ) {
                    alt156=2;
                }
                else if ( (LA156_1==QUOTEDSTRING) ) {
                    alt156=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:725:7: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET590=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET590);


                    pushFollow(FOLLOW_keyvalue_in_map5737);
                    keyvalue591=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue591.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:725:29: ( COMMA keyvalue )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==COMMA) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:725:31: COMMA keyvalue
                    	    {
                    	    COMMA592=(Token)match(input,COMMA,FOLLOW_COMMA_in_map5741); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA592);


                    	    pushFollow(FOLLOW_keyvalue_in_map5743);
                    	    keyvalue593=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue593.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    RIGHT_BRACKET594=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET594);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 726:4: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:726:7: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:727:7: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET595=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET595);


                    RIGHT_BRACKET596=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET596);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 728:4: -> ^( MAP_VAL )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:728:7: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:731:1: keyvalue : map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND598=null;
        QueryParser.map_key_return map_key597 =null;

        QueryParser.const_expr_return const_expr599 =null;


        Object POUND598_tree=null;
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        RewriteRuleSubtreeStream stream_map_key=new RewriteRuleSubtreeStream(adaptor,"rule map_key");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:731:10: ( map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:731:12: map_key POUND const_expr
            {
            pushFollow(FOLLOW_map_key_in_keyvalue5792);
            map_key597=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_map_key.add(map_key597.getTree());

            POUND598=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND598);


            pushFollow(FOLLOW_const_expr_in_keyvalue5796);
            const_expr599=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_const_expr.add(const_expr599.getTree());

            // AST REWRITE
            // elements: const_expr, map_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 732:9: -> ^( KEY_VAL_PAIR map_key const_expr )
            {
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:732:12: ^( KEY_VAL_PAIR map_key const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, stream_map_key.nextTree());

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:735:1: map_key : QUOTEDSTRING ;
    public final QueryParser.map_key_return map_key() throws RecognitionException {
        QueryParser.map_key_return retval = new QueryParser.map_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING600=null;

        Object QUOTEDSTRING600_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:735:9: ( QUOTEDSTRING )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:735:11: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING600=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key5825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING600_tree = 
            (Object)adaptor.create(QUOTEDSTRING600)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING600_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:738:1: bag : ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.bag_return bag() throws RecognitionException {
        QueryParser.bag_return retval = new QueryParser.bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY601=null;
        Token COMMA603=null;
        Token RIGHT_CURLY605=null;
        Token LEFT_CURLY606=null;
        Token RIGHT_CURLY607=null;
        QueryParser.tuple_return tuple602 =null;

        QueryParser.tuple_return tuple604 =null;


        Object LEFT_CURLY601_tree=null;
        Object COMMA603_tree=null;
        Object RIGHT_CURLY605_tree=null;
        Object LEFT_CURLY606_tree=null;
        Object RIGHT_CURLY607_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple=new RewriteRuleSubtreeStream(adaptor,"rule tuple");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:738:5: ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==LEFT_CURLY) ) {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==RIGHT_CURLY) ) {
                    alt158=2;
                }
                else if ( (LA158_1==LEFT_PAREN) ) {
                    alt158=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }
            switch (alt158) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:738:7: LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY601=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY601);


                    pushFollow(FOLLOW_tuple_in_bag5836);
                    tuple602=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple.add(tuple602.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:738:24: ( COMMA tuple )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==COMMA) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:738:26: COMMA tuple
                    	    {
                    	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_bag5840); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA603);


                    	    pushFollow(FOLLOW_tuple_in_bag5842);
                    	    tuple604=tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_tuple.add(tuple604.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    RIGHT_CURLY605=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY605);


                    // AST REWRITE
                    // elements: tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 739:4: -> ^( BAG_VAL ( tuple )+ )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:739:7: ^( BAG_VAL ( tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple.nextTree());

                        }
                        stream_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:740:7: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY606=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY606);


                    RIGHT_CURLY607=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY607);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 741:4: -> ^( BAG_VAL )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:741:7: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:744:1: tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.tuple_return tuple() throws RecognitionException {
        QueryParser.tuple_return retval = new QueryParser.tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN608=null;
        Token COMMA610=null;
        Token RIGHT_PAREN612=null;
        Token LEFT_PAREN613=null;
        Token RIGHT_PAREN614=null;
        QueryParser.literal_return literal609 =null;

        QueryParser.literal_return literal611 =null;


        Object LEFT_PAREN608_tree=null;
        Object COMMA610_tree=null;
        Object RIGHT_PAREN612_tree=null;
        Object LEFT_PAREN613_tree=null;
        Object RIGHT_PAREN614_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:744:7: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LEFT_PAREN) ) {
                int LA160_1 = input.LA(2);

                if ( (LA160_1==RIGHT_PAREN) ) {
                    alt160=2;
                }
                else if ( (LA160_1==DOUBLENUMBER||LA160_1==FALSE||LA160_1==FLOATNUMBER||LA160_1==IDENTIFIER_L||LA160_1==INTEGER||(LA160_1 >= LEFT_BRACKET && LA160_1 <= LEFT_PAREN)||LA160_1==LONGINTEGER||LA160_1==MINUS||LA160_1==QUOTEDSTRING||LA160_1==TRUE) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;

            }
            switch (alt160) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:744:9: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN608=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN608);


                    pushFollow(FOLLOW_literal_in_tuple5893);
                    literal609=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal609.getTree());

                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:744:28: ( COMMA literal )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==COMMA) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:744:30: COMMA literal
                    	    {
                    	    COMMA610=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple5897); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA610);


                    	    pushFollow(FOLLOW_literal_in_tuple5899);
                    	    literal611=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal611.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    RIGHT_PAREN612=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN612);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 745:6: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:745:9: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:746:9: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN613=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN613);


                    RIGHT_PAREN614=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN614);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 747:6: -> ^( TUPLE_VAL )
                    {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:747:9: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:751:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | CUBE | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | DATETIME | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS | BOOL_COND );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT616=null;
        Token RETURNS617=null;
        Token DEFINE618=null;
        Token LOAD619=null;
        Token FILTER620=null;
        Token FOREACH621=null;
        Token CUBE622=null;
        Token ROLLUP623=null;
        Token ORDER624=null;
        Token DISTINCT625=null;
        Token COGROUP626=null;
        Token JOIN627=null;
        Token CROSS628=null;
        Token UNION629=null;
        Token SPLIT630=null;
        Token INTO631=null;
        Token IF632=null;
        Token ALL633=null;
        Token AS634=null;
        Token BY635=null;
        Token USING636=null;
        Token INNER637=null;
        Token OUTER638=null;
        Token PARALLEL639=null;
        Token PARTITION640=null;
        Token GROUP641=null;
        Token AND642=null;
        Token OR643=null;
        Token NOT644=null;
        Token GENERATE645=null;
        Token FLATTEN646=null;
        Token ASC647=null;
        Token DESC648=null;
        Token BOOL649=null;
        Token INT650=null;
        Token LONG651=null;
        Token FLOAT652=null;
        Token DOUBLE653=null;
        Token DATETIME654=null;
        Token CHARARRAY655=null;
        Token BYTEARRAY656=null;
        Token BAG657=null;
        Token TUPLE658=null;
        Token MAP659=null;
        Token IS660=null;
        Token STREAM661=null;
        Token THROUGH662=null;
        Token STORE663=null;
        Token MAPREDUCE664=null;
        Token SHIP665=null;
        Token CACHE666=null;
        Token INPUT667=null;
        Token OUTPUT668=null;
        Token STDERROR669=null;
        Token STDIN670=null;
        Token STDOUT671=null;
        Token LIMIT672=null;
        Token SAMPLE673=null;
        Token LEFT674=null;
        Token RIGHT675=null;
        Token FULL676=null;
        Token TRUE679=null;
        Token FALSE680=null;
        Token REALIAS681=null;
        Token BOOL_COND682=null;
        QueryParser.rel_str_op_return rel_str_op615 =null;

        QueryParser.identifier_return identifier677 =null;

        QueryParser.null_keyword_return null_keyword678 =null;


        Object IMPORT616_tree=null;
        Object RETURNS617_tree=null;
        Object DEFINE618_tree=null;
        Object LOAD619_tree=null;
        Object FILTER620_tree=null;
        Object FOREACH621_tree=null;
        Object CUBE622_tree=null;
        Object ROLLUP623_tree=null;
        Object ORDER624_tree=null;
        Object DISTINCT625_tree=null;
        Object COGROUP626_tree=null;
        Object JOIN627_tree=null;
        Object CROSS628_tree=null;
        Object UNION629_tree=null;
        Object SPLIT630_tree=null;
        Object INTO631_tree=null;
        Object IF632_tree=null;
        Object ALL633_tree=null;
        Object AS634_tree=null;
        Object BY635_tree=null;
        Object USING636_tree=null;
        Object INNER637_tree=null;
        Object OUTER638_tree=null;
        Object PARALLEL639_tree=null;
        Object PARTITION640_tree=null;
        Object GROUP641_tree=null;
        Object AND642_tree=null;
        Object OR643_tree=null;
        Object NOT644_tree=null;
        Object GENERATE645_tree=null;
        Object FLATTEN646_tree=null;
        Object ASC647_tree=null;
        Object DESC648_tree=null;
        Object BOOL649_tree=null;
        Object INT650_tree=null;
        Object LONG651_tree=null;
        Object FLOAT652_tree=null;
        Object DOUBLE653_tree=null;
        Object DATETIME654_tree=null;
        Object CHARARRAY655_tree=null;
        Object BYTEARRAY656_tree=null;
        Object BAG657_tree=null;
        Object TUPLE658_tree=null;
        Object MAP659_tree=null;
        Object IS660_tree=null;
        Object STREAM661_tree=null;
        Object THROUGH662_tree=null;
        Object STORE663_tree=null;
        Object MAPREDUCE664_tree=null;
        Object SHIP665_tree=null;
        Object CACHE666_tree=null;
        Object INPUT667_tree=null;
        Object OUTPUT668_tree=null;
        Object STDERROR669_tree=null;
        Object STDIN670_tree=null;
        Object STDOUT671_tree=null;
        Object LIMIT672_tree=null;
        Object SAMPLE673_tree=null;
        Object LEFT674_tree=null;
        Object RIGHT675_tree=null;
        Object FULL676_tree=null;
        Object TRUE679_tree=null;
        Object FALSE680_tree=null;
        Object REALIAS681_tree=null;
        Object BOOL_COND682_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:751:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | CUBE | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | DATETIME | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS | BOOL_COND )
            int alt161=68;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:751:7: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid5955);
                    rel_str_op615=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op615.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:752:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT616=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid5963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT616_tree = 
                    (Object)adaptor.create(IMPORT616)
                    ;
                    adaptor.addChild(root_0, IMPORT616_tree);
                    }

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:753:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS617=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid5971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS617_tree = 
                    (Object)adaptor.create(RETURNS617)
                    ;
                    adaptor.addChild(root_0, RETURNS617_tree);
                    }

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:754:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE618=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid5979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE618_tree = 
                    (Object)adaptor.create(DEFINE618)
                    ;
                    adaptor.addChild(root_0, DEFINE618_tree);
                    }

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:755:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD619=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid5987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD619_tree = 
                    (Object)adaptor.create(LOAD619)
                    ;
                    adaptor.addChild(root_0, LOAD619_tree);
                    }

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:756:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER620=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid5995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER620_tree = 
                    (Object)adaptor.create(FILTER620)
                    ;
                    adaptor.addChild(root_0, FILTER620_tree);
                    }

                    }
                    break;
                case 7 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:757:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH621=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid6003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH621_tree = 
                    (Object)adaptor.create(FOREACH621)
                    ;
                    adaptor.addChild(root_0, FOREACH621_tree);
                    }

                    }
                    break;
                case 8 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:758:7: CUBE
                    {
                    root_0 = (Object)adaptor.nil();


                    CUBE622=(Token)match(input,CUBE,FOLLOW_CUBE_in_eid6011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CUBE622_tree = 
                    (Object)adaptor.create(CUBE622)
                    ;
                    adaptor.addChild(root_0, CUBE622_tree);
                    }

                    }
                    break;
                case 9 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:759:7: ROLLUP
                    {
                    root_0 = (Object)adaptor.nil();


                    ROLLUP623=(Token)match(input,ROLLUP,FOLLOW_ROLLUP_in_eid6019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROLLUP623_tree = 
                    (Object)adaptor.create(ROLLUP623)
                    ;
                    adaptor.addChild(root_0, ROLLUP623_tree);
                    }

                    }
                    break;
                case 10 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:760:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER624=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid6027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER624_tree = 
                    (Object)adaptor.create(ORDER624)
                    ;
                    adaptor.addChild(root_0, ORDER624_tree);
                    }

                    }
                    break;
                case 11 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:761:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT625=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid6035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT625_tree = 
                    (Object)adaptor.create(DISTINCT625)
                    ;
                    adaptor.addChild(root_0, DISTINCT625_tree);
                    }

                    }
                    break;
                case 12 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:762:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP626=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid6043); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP626_tree = 
                    (Object)adaptor.create(COGROUP626)
                    ;
                    adaptor.addChild(root_0, COGROUP626_tree);
                    }

                    }
                    break;
                case 13 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:763:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN627=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid6051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN627_tree = 
                    (Object)adaptor.create(JOIN627)
                    ;
                    adaptor.addChild(root_0, JOIN627_tree);
                    }

                    }
                    break;
                case 14 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:764:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS628=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid6059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS628_tree = 
                    (Object)adaptor.create(CROSS628)
                    ;
                    adaptor.addChild(root_0, CROSS628_tree);
                    }

                    }
                    break;
                case 15 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:765:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION629=(Token)match(input,UNION,FOLLOW_UNION_in_eid6067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION629_tree = 
                    (Object)adaptor.create(UNION629)
                    ;
                    adaptor.addChild(root_0, UNION629_tree);
                    }

                    }
                    break;
                case 16 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:766:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT630=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid6075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT630_tree = 
                    (Object)adaptor.create(SPLIT630)
                    ;
                    adaptor.addChild(root_0, SPLIT630_tree);
                    }

                    }
                    break;
                case 17 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:767:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO631=(Token)match(input,INTO,FOLLOW_INTO_in_eid6083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO631_tree = 
                    (Object)adaptor.create(INTO631)
                    ;
                    adaptor.addChild(root_0, INTO631_tree);
                    }

                    }
                    break;
                case 18 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:768:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF632=(Token)match(input,IF,FOLLOW_IF_in_eid6091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF632_tree = 
                    (Object)adaptor.create(IF632)
                    ;
                    adaptor.addChild(root_0, IF632_tree);
                    }

                    }
                    break;
                case 19 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:769:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL633=(Token)match(input,ALL,FOLLOW_ALL_in_eid6099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL633_tree = 
                    (Object)adaptor.create(ALL633)
                    ;
                    adaptor.addChild(root_0, ALL633_tree);
                    }

                    }
                    break;
                case 20 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:770:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS634=(Token)match(input,AS,FOLLOW_AS_in_eid6107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS634_tree = 
                    (Object)adaptor.create(AS634)
                    ;
                    adaptor.addChild(root_0, AS634_tree);
                    }

                    }
                    break;
                case 21 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:771:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY635=(Token)match(input,BY,FOLLOW_BY_in_eid6115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY635_tree = 
                    (Object)adaptor.create(BY635)
                    ;
                    adaptor.addChild(root_0, BY635_tree);
                    }

                    }
                    break;
                case 22 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:772:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING636=(Token)match(input,USING,FOLLOW_USING_in_eid6123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING636_tree = 
                    (Object)adaptor.create(USING636)
                    ;
                    adaptor.addChild(root_0, USING636_tree);
                    }

                    }
                    break;
                case 23 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:773:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER637=(Token)match(input,INNER,FOLLOW_INNER_in_eid6131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER637_tree = 
                    (Object)adaptor.create(INNER637)
                    ;
                    adaptor.addChild(root_0, INNER637_tree);
                    }

                    }
                    break;
                case 24 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:774:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER638=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid6139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER638_tree = 
                    (Object)adaptor.create(OUTER638)
                    ;
                    adaptor.addChild(root_0, OUTER638_tree);
                    }

                    }
                    break;
                case 25 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:775:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL639=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid6147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL639_tree = 
                    (Object)adaptor.create(PARALLEL639)
                    ;
                    adaptor.addChild(root_0, PARALLEL639_tree);
                    }

                    }
                    break;
                case 26 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:776:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION640=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid6155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION640_tree = 
                    (Object)adaptor.create(PARTITION640)
                    ;
                    adaptor.addChild(root_0, PARTITION640_tree);
                    }

                    }
                    break;
                case 27 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:777:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP641=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid6163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP641_tree = 
                    (Object)adaptor.create(GROUP641)
                    ;
                    adaptor.addChild(root_0, GROUP641_tree);
                    }

                    }
                    break;
                case 28 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:778:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND642=(Token)match(input,AND,FOLLOW_AND_in_eid6171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND642_tree = 
                    (Object)adaptor.create(AND642)
                    ;
                    adaptor.addChild(root_0, AND642_tree);
                    }

                    }
                    break;
                case 29 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:779:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR643=(Token)match(input,OR,FOLLOW_OR_in_eid6179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR643_tree = 
                    (Object)adaptor.create(OR643)
                    ;
                    adaptor.addChild(root_0, OR643_tree);
                    }

                    }
                    break;
                case 30 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:780:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT644=(Token)match(input,NOT,FOLLOW_NOT_in_eid6187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT644_tree = 
                    (Object)adaptor.create(NOT644)
                    ;
                    adaptor.addChild(root_0, NOT644_tree);
                    }

                    }
                    break;
                case 31 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:781:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE645=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid6195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE645_tree = 
                    (Object)adaptor.create(GENERATE645)
                    ;
                    adaptor.addChild(root_0, GENERATE645_tree);
                    }

                    }
                    break;
                case 32 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:782:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN646=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid6203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN646_tree = 
                    (Object)adaptor.create(FLATTEN646)
                    ;
                    adaptor.addChild(root_0, FLATTEN646_tree);
                    }

                    }
                    break;
                case 33 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:783:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC647=(Token)match(input,ASC,FOLLOW_ASC_in_eid6211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC647_tree = 
                    (Object)adaptor.create(ASC647)
                    ;
                    adaptor.addChild(root_0, ASC647_tree);
                    }

                    }
                    break;
                case 34 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:784:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC648=(Token)match(input,DESC,FOLLOW_DESC_in_eid6219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC648_tree = 
                    (Object)adaptor.create(DESC648)
                    ;
                    adaptor.addChild(root_0, DESC648_tree);
                    }

                    }
                    break;
                case 35 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:785:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL649=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid6227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL649_tree = 
                    (Object)adaptor.create(BOOL649)
                    ;
                    adaptor.addChild(root_0, BOOL649_tree);
                    }

                    }
                    break;
                case 36 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:786:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT650=(Token)match(input,INT,FOLLOW_INT_in_eid6235); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT650_tree = 
                    (Object)adaptor.create(INT650)
                    ;
                    adaptor.addChild(root_0, INT650_tree);
                    }

                    }
                    break;
                case 37 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:787:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG651=(Token)match(input,LONG,FOLLOW_LONG_in_eid6243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG651_tree = 
                    (Object)adaptor.create(LONG651)
                    ;
                    adaptor.addChild(root_0, LONG651_tree);
                    }

                    }
                    break;
                case 38 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:788:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT652=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid6251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT652_tree = 
                    (Object)adaptor.create(FLOAT652)
                    ;
                    adaptor.addChild(root_0, FLOAT652_tree);
                    }

                    }
                    break;
                case 39 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:789:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE653=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid6259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE653_tree = 
                    (Object)adaptor.create(DOUBLE653)
                    ;
                    adaptor.addChild(root_0, DOUBLE653_tree);
                    }

                    }
                    break;
                case 40 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:790:7: DATETIME
                    {
                    root_0 = (Object)adaptor.nil();


                    DATETIME654=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_eid6267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DATETIME654_tree = 
                    (Object)adaptor.create(DATETIME654)
                    ;
                    adaptor.addChild(root_0, DATETIME654_tree);
                    }

                    }
                    break;
                case 41 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:791:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY655=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid6275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY655_tree = 
                    (Object)adaptor.create(CHARARRAY655)
                    ;
                    adaptor.addChild(root_0, CHARARRAY655_tree);
                    }

                    }
                    break;
                case 42 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:792:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY656=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid6283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY656_tree = 
                    (Object)adaptor.create(BYTEARRAY656)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY656_tree);
                    }

                    }
                    break;
                case 43 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:793:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG657=(Token)match(input,BAG,FOLLOW_BAG_in_eid6291); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG657_tree = 
                    (Object)adaptor.create(BAG657)
                    ;
                    adaptor.addChild(root_0, BAG657_tree);
                    }

                    }
                    break;
                case 44 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:794:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE658=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid6299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE658_tree = 
                    (Object)adaptor.create(TUPLE658)
                    ;
                    adaptor.addChild(root_0, TUPLE658_tree);
                    }

                    }
                    break;
                case 45 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:795:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP659=(Token)match(input,MAP,FOLLOW_MAP_in_eid6307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP659_tree = 
                    (Object)adaptor.create(MAP659)
                    ;
                    adaptor.addChild(root_0, MAP659_tree);
                    }

                    }
                    break;
                case 46 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:796:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS660=(Token)match(input,IS,FOLLOW_IS_in_eid6315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS660_tree = 
                    (Object)adaptor.create(IS660)
                    ;
                    adaptor.addChild(root_0, IS660_tree);
                    }

                    }
                    break;
                case 47 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:797:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM661=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid6323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM661_tree = 
                    (Object)adaptor.create(STREAM661)
                    ;
                    adaptor.addChild(root_0, STREAM661_tree);
                    }

                    }
                    break;
                case 48 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:798:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH662=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid6331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH662_tree = 
                    (Object)adaptor.create(THROUGH662)
                    ;
                    adaptor.addChild(root_0, THROUGH662_tree);
                    }

                    }
                    break;
                case 49 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:799:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE663=(Token)match(input,STORE,FOLLOW_STORE_in_eid6339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE663_tree = 
                    (Object)adaptor.create(STORE663)
                    ;
                    adaptor.addChild(root_0, STORE663_tree);
                    }

                    }
                    break;
                case 50 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:800:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE664=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid6347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE664_tree = 
                    (Object)adaptor.create(MAPREDUCE664)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE664_tree);
                    }

                    }
                    break;
                case 51 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:801:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP665=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid6355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP665_tree = 
                    (Object)adaptor.create(SHIP665)
                    ;
                    adaptor.addChild(root_0, SHIP665_tree);
                    }

                    }
                    break;
                case 52 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:802:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE666=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid6363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE666_tree = 
                    (Object)adaptor.create(CACHE666)
                    ;
                    adaptor.addChild(root_0, CACHE666_tree);
                    }

                    }
                    break;
                case 53 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:803:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT667=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid6371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT667_tree = 
                    (Object)adaptor.create(INPUT667)
                    ;
                    adaptor.addChild(root_0, INPUT667_tree);
                    }

                    }
                    break;
                case 54 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:804:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT668=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid6379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT668_tree = 
                    (Object)adaptor.create(OUTPUT668)
                    ;
                    adaptor.addChild(root_0, OUTPUT668_tree);
                    }

                    }
                    break;
                case 55 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:805:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR669=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid6387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR669_tree = 
                    (Object)adaptor.create(STDERROR669)
                    ;
                    adaptor.addChild(root_0, STDERROR669_tree);
                    }

                    }
                    break;
                case 56 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:806:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN670=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid6395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN670_tree = 
                    (Object)adaptor.create(STDIN670)
                    ;
                    adaptor.addChild(root_0, STDIN670_tree);
                    }

                    }
                    break;
                case 57 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:807:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT671=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid6403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT671_tree = 
                    (Object)adaptor.create(STDOUT671)
                    ;
                    adaptor.addChild(root_0, STDOUT671_tree);
                    }

                    }
                    break;
                case 58 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:808:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT672=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid6411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT672_tree = 
                    (Object)adaptor.create(LIMIT672)
                    ;
                    adaptor.addChild(root_0, LIMIT672_tree);
                    }

                    }
                    break;
                case 59 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:809:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE673=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid6419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE673_tree = 
                    (Object)adaptor.create(SAMPLE673)
                    ;
                    adaptor.addChild(root_0, SAMPLE673_tree);
                    }

                    }
                    break;
                case 60 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:810:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT674=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid6427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT674_tree = 
                    (Object)adaptor.create(LEFT674)
                    ;
                    adaptor.addChild(root_0, LEFT674_tree);
                    }

                    }
                    break;
                case 61 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:811:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT675=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid6435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT675_tree = 
                    (Object)adaptor.create(RIGHT675)
                    ;
                    adaptor.addChild(root_0, RIGHT675_tree);
                    }

                    }
                    break;
                case 62 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:812:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL676=(Token)match(input,FULL,FOLLOW_FULL_in_eid6443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL676_tree = 
                    (Object)adaptor.create(FULL676)
                    ;
                    adaptor.addChild(root_0, FULL676_tree);
                    }

                    }
                    break;
                case 63 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:813:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_eid6451);
                    identifier677=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier677.getTree());

                    }
                    break;
                case 64 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:814:7: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_eid6459);
                    null_keyword678=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword678.getTree());

                    }
                    break;
                case 65 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:815:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE679=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid6467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE679_tree = 
                    (Object)adaptor.create(TRUE679)
                    ;
                    adaptor.addChild(root_0, TRUE679_tree);
                    }

                    }
                    break;
                case 66 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:816:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE680=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid6475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE680_tree = 
                    (Object)adaptor.create(FALSE680)
                    ;
                    adaptor.addChild(root_0, FALSE680_tree);
                    }

                    }
                    break;
                case 67 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:817:7: REALIAS
                    {
                    root_0 = (Object)adaptor.nil();


                    REALIAS681=(Token)match(input,REALIAS,FOLLOW_REALIAS_in_eid6483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIAS681_tree = 
                    (Object)adaptor.create(REALIAS681)
                    ;
                    adaptor.addChild(root_0, REALIAS681_tree);
                    }

                    }
                    break;
                case 68 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:818:7: BOOL_COND
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL_COND682=(Token)match(input,BOOL_COND,FOLLOW_BOOL_COND_in_eid6491); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL_COND682_tree = 
                    (Object)adaptor.create(BOOL_COND682)
                    ;
                    adaptor.addChild(root_0, BOOL_COND682_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:822:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STR_OP_MATCHES689=null;
        QueryParser.rel_op_eq_return rel_op_eq683 =null;

        QueryParser.rel_op_ne_return rel_op_ne684 =null;

        QueryParser.rel_op_gt_return rel_op_gt685 =null;

        QueryParser.rel_op_gte_return rel_op_gte686 =null;

        QueryParser.rel_op_lt_return rel_op_lt687 =null;

        QueryParser.rel_op_lte_return rel_op_lte688 =null;


        Object STR_OP_MATCHES689_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:822:8: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt162=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt162=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt162=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt162=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt162=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt162=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt162=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt162=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;

            }

            switch (alt162) {
                case 1 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:822:10: rel_op_eq
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_eq_in_rel_op6501);
                    rel_op_eq683=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_eq683.getTree());

                    }
                    break;
                case 2 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:823:10: rel_op_ne
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_ne_in_rel_op6512);
                    rel_op_ne684=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_ne684.getTree());

                    }
                    break;
                case 3 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:824:10: rel_op_gt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gt_in_rel_op6523);
                    rel_op_gt685=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gt685.getTree());

                    }
                    break;
                case 4 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:825:10: rel_op_gte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gte_in_rel_op6534);
                    rel_op_gte686=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gte686.getTree());

                    }
                    break;
                case 5 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:826:10: rel_op_lt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lt_in_rel_op6545);
                    rel_op_lt687=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lt687.getTree());

                    }
                    break;
                case 6 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:827:10: rel_op_lte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lte_in_rel_op6556);
                    rel_op_lte688=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lte688.getTree());

                    }
                    break;
                case 7 :
                    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:828:10: STR_OP_MATCHES
                    {
                    root_0 = (Object)adaptor.nil();


                    STR_OP_MATCHES689=(Token)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op6567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES689_tree = 
                    (Object)adaptor.create(STR_OP_MATCHES689)
                    ;
                    adaptor.addChild(root_0, STR_OP_MATCHES689_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:831:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final QueryParser.rel_op_eq_return rel_op_eq() throws RecognitionException {
        QueryParser.rel_op_eq_return retval = new QueryParser.rel_op_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set690=null;

        Object set690_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:831:11: ( STR_OP_EQ | NUM_OP_EQ )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set690=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set690)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:834:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final QueryParser.rel_op_ne_return rel_op_ne() throws RecognitionException {
        QueryParser.rel_op_ne_return retval = new QueryParser.rel_op_ne_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set691=null;

        Object set691_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:834:11: ( STR_OP_NE | NUM_OP_NE )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set691=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set691)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:837:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final QueryParser.rel_op_gt_return rel_op_gt() throws RecognitionException {
        QueryParser.rel_op_gt_return retval = new QueryParser.rel_op_gt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set692=null;

        Object set692_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:837:11: ( STR_OP_GT | NUM_OP_GT )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set692=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set692)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:840:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final QueryParser.rel_op_gte_return rel_op_gte() throws RecognitionException {
        QueryParser.rel_op_gte_return retval = new QueryParser.rel_op_gte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set693=null;

        Object set693_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:840:12: ( STR_OP_GTE | NUM_OP_GTE )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set693=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set693)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:843:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final QueryParser.rel_op_lt_return rel_op_lt() throws RecognitionException {
        QueryParser.rel_op_lt_return retval = new QueryParser.rel_op_lt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set694=null;

        Object set694_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:843:11: ( STR_OP_LT | NUM_OP_LT )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set694=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set694)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:846:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final QueryParser.rel_op_lte_return rel_op_lte() throws RecognitionException {
        QueryParser.rel_op_lte_return retval = new QueryParser.rel_op_lte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set695=null;

        Object set695_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:846:12: ( STR_OP_LTE | NUM_OP_LTE )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set695=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set695)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:849:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set696=null;

        Object set696_tree=null;

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:849:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set696=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set696)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class null_keyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_keyword"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:858:1: null_keyword :{...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] ;
    public final QueryParser.null_keyword_return null_keyword() throws RecognitionException {
        QueryParser.null_keyword_return retval = new QueryParser.null_keyword_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L697=null;

        Object IDENTIFIER_L697_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:858:14: ({...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:858:16: {...}? IDENTIFIER_L
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "null_keyword", "input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L697=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_null_keyword6755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L697);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 859:6: -> NULL[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NULL, IDENTIFIER_L697)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_keyword"


    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:862:1: identifier :{...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] ;
    public final QueryParser.identifier_return identifier() throws RecognitionException {
        QueryParser.identifier_return retval = new QueryParser.identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L698=null;

        Object IDENTIFIER_L698_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:862:12: ({...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] )
            // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:862:14: {...}? IDENTIFIER_L
            {
            if ( !((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "identifier", "!input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L698=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_identifier6776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L698);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 863:5: -> IDENTIFIER[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(IDENTIFIER, IDENTIFIER_L698)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier"

    // $ANTLR start synpred13_QueryParser
    public final void synpred13_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:23: ( alias EQUAL )? FOREACH rel LEFT_CURLY
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:23: ( alias EQUAL )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( (LA164_0==IDENTIFIER_L) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:188:25: alias EQUAL
                {
                pushFollow(FOLLOW_alias_in_synpred13_QueryParser661);
                alias();

                state._fsp--;
                if (state.failed) return ;

                match(input,EQUAL,FOLLOW_EQUAL_in_synpred13_QueryParser663); if (state.failed) return ;

                }
                break;

        }


        match(input,FOREACH,FOLLOW_FOREACH_in_synpred13_QueryParser669); if (state.failed) return ;

        pushFollow(FOLLOW_rel_in_synpred13_QueryParser671);
        rel();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred13_QueryParser673); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_QueryParser

    // $ANTLR start synpred15_QueryParser
    public final void synpred15_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:69: ( SEMI_COLON )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:192:69: SEMI_COLON
        {
        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred15_QueryParser721); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_QueryParser

    // $ANTLR start synpred68_QueryParser
    public final void synpred68_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:18: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:18: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:18: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:305:20: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred68_QueryParser1785); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred68_QueryParser1788);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred68_QueryParser1790); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred68_QueryParser

    // $ANTLR start synpred86_QueryParser
    public final void synpred86_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: ( ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: ( BAG )? LEFT_CURLY ( null_keyword COLON ( tuple_type )? ) RIGHT_CURLY
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: ( BAG )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==BAG) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:12: BAG
                {
                match(input,BAG,FOLLOW_BAG_in_synpred86_QueryParser2014); if (state.failed) return ;

                }
                break;

        }


        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred86_QueryParser2017); if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:28: ( null_keyword COLON ( tuple_type )? )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:30: null_keyword COLON ( tuple_type )?
        {
        pushFollow(FOLLOW_null_keyword_in_synpred86_QueryParser2021);
        null_keyword();

        state._fsp--;
        if (state.failed) return ;

        match(input,COLON,FOLLOW_COLON_in_synpred86_QueryParser2023); if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:49: ( tuple_type )?
        int alt173=2;
        int LA173_0 = input.LA(1);

        if ( (LA173_0==LEFT_PAREN||LA173_0==TUPLE) ) {
            alt173=1;
        }
        switch (alt173) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:328:49: tuple_type
                {
                pushFollow(FOLLOW_tuple_type_in_synpred86_QueryParser2025);
                tuple_type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_synpred86_QueryParser2030); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred86_QueryParser

    // $ANTLR start synpred107_QueryParser
    public final void synpred107_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:21: ( foreach_clause_complex )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:368:21: foreach_clause_complex
        {
        pushFollow(FOLLOW_foreach_clause_complex_in_synpred107_QueryParser2426);
        foreach_clause_complex();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred107_QueryParser

    // $ANTLR start synpred110_QueryParser
    public final void synpred110_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:51: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred110_QueryParser2470); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred110_QueryParser2473);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred110_QueryParser2475); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred110_QueryParser

    // $ANTLR start synpred112_QueryParser
    public final void synpred112_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:26: ( flatten_clause ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )? )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:26: flatten_clause ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        {
        pushFollow(FOLLOW_flatten_clause_in_synpred112_QueryParser2459);
        flatten_clause();

        state._fsp--;
        if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:41: ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        int alt177=2;
        int LA177_0 = input.LA(1);

        if ( (LA177_0==AS) ) {
            alt177=1;
        }
        switch (alt177) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:43: AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                {
                match(input,AS,FOLLOW_AS_in_synpred112_QueryParser2463); if (state.failed) return ;

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:47: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==LEFT_PAREN) ) {
                    int LA176_1 = input.LA(2);

                    if ( (synpred110_QueryParser()) ) {
                        alt176=1;
                    }
                    else if ( (true) ) {
                        alt176=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 176, 1, input);

                        throw nvae;

                    }
                }
                else if ( ((LA176_0 >= BAG && LA176_0 <= BOOLEAN)||LA176_0==BYTEARRAY||LA176_0==CHARARRAY||LA176_0==DATETIME||LA176_0==DOUBLE||LA176_0==FLOAT||LA176_0==IDENTIFIER_L||LA176_0==INT||(LA176_0 >= LEFT_BRACKET && LA176_0 <= LEFT_CURLY)||LA176_0==LONG||LA176_0==MAP||LA176_0==TUPLE) ) {
                    alt176=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 0, input);

                    throw nvae;

                }
                switch (alt176) {
                    case 1 :
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:51: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred112_QueryParser2470); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred112_QueryParser2473);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred112_QueryParser2475); if (state.failed) return ;

                        }


                        }
                        break;
                    case 2 :
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:371:95: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred112_QueryParser2482);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred112_QueryParser

    // $ANTLR start synpred113_QueryParser
    public final void synpred113_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:46: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred113_QueryParser2525); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred113_QueryParser2528);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred113_QueryParser2530); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred113_QueryParser

    // $ANTLR start synpred115_QueryParser
    public final void synpred115_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:26: ( col_range ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )? )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:26: col_range ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        {
        pushFollow(FOLLOW_col_range_in_synpred115_QueryParser2514);
        col_range();

        state._fsp--;
        if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:36: ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        int alt180=2;
        int LA180_0 = input.LA(1);

        if ( (LA180_0==AS) ) {
            alt180=1;
        }
        switch (alt180) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:38: AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                {
                match(input,AS,FOLLOW_AS_in_synpred115_QueryParser2518); if (state.failed) return ;

                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:42: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==LEFT_PAREN) ) {
                    int LA179_1 = input.LA(2);

                    if ( (synpred113_QueryParser()) ) {
                        alt179=1;
                    }
                    else if ( (true) ) {
                        alt179=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 1, input);

                        throw nvae;

                    }
                }
                else if ( ((LA179_0 >= BAG && LA179_0 <= BOOLEAN)||LA179_0==BYTEARRAY||LA179_0==CHARARRAY||LA179_0==DATETIME||LA179_0==DOUBLE||LA179_0==FLOAT||LA179_0==IDENTIFIER_L||LA179_0==INT||(LA179_0 >= LEFT_BRACKET && LA179_0 <= LEFT_CURLY)||LA179_0==LONG||LA179_0==MAP||LA179_0==TUPLE) ) {
                    alt179=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 0, input);

                    throw nvae;

                }
                switch (alt179) {
                    case 1 :
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:46: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred115_QueryParser2525); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred115_QueryParser2528);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred115_QueryParser2530); if (state.failed) return ;

                        }


                        }
                        break;
                    case 2 :
                        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:372:90: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred115_QueryParser2537);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred115_QueryParser

    // $ANTLR start synpred117_QueryParser
    public final void synpred117_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:26: ( expr ( AS field_def )? )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:26: expr ( AS field_def )?
        {
        pushFollow(FOLLOW_expr_in_synpred117_QueryParser2569);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:31: ( AS field_def )?
        int alt181=2;
        int LA181_0 = input.LA(1);

        if ( (LA181_0==AS) ) {
            alt181=1;
        }
        switch (alt181) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:373:33: AS field_def
                {
                match(input,AS,FOLLOW_AS_in_synpred117_QueryParser2573); if (state.failed) return ;

                pushFollow(FOLLOW_field_def_in_synpred117_QueryParser2576);
                field_def();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred117_QueryParser

    // $ANTLR start synpred118_QueryParser
    public final void synpred118_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:39: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:39: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:39: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:374:41: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred118_QueryParser2617); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred118_QueryParser2620);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred118_QueryParser2622); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred118_QueryParser

    // $ANTLR start synpred123_QueryParser
    public final void synpred123_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:395:14: ( expr rel_op expr )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:395:14: expr rel_op expr
        {
        pushFollow(FOLLOW_expr_in_synpred123_QueryParser2754);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_rel_op_in_synpred123_QueryParser2756);
        rel_op();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred123_QueryParser2759);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred123_QueryParser

    // $ANTLR start synpred124_QueryParser
    public final void synpred124_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:396:14: ( LEFT_PAREN cond RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:396:14: LEFT_PAREN cond RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred124_QueryParser2774); if (state.failed) return ;

        pushFollow(FOLLOW_cond_in_synpred124_QueryParser2777);
        cond();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred124_QueryParser2779); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred124_QueryParser

    // $ANTLR start synpred125_QueryParser
    public final void synpred125_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:397:14: ( not_cond )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:397:14: not_cond
        {
        pushFollow(FOLLOW_not_cond_in_synpred125_QueryParser2795);
        not_cond();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred125_QueryParser

    // $ANTLR start synpred126_QueryParser
    public final void synpred126_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:398:14: ( func_eval )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:398:14: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred126_QueryParser2810);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred126_QueryParser

    // $ANTLR start synpred127_QueryParser
    public final void synpred127_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:399:14: ( null_check_cond )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:399:14: null_check_cond
        {
        pushFollow(FOLLOW_null_check_cond_in_synpred127_QueryParser2825);
        null_check_cond();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_QueryParser

    // $ANTLR start synpred138_QueryParser
    public final void synpred138_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:432:13: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:432:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred138_QueryParser3055); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_in_synpred138_QueryParser3057);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred138_QueryParser3059); if (state.failed) return ;

        pushFollow(FOLLOW_unary_expr_in_synpred138_QueryParser3061);
        unary_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred138_QueryParser

    // $ANTLR start synpred145_QueryParser
    public final void synpred145_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:448:14: ( expr_eval )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:448:14: expr_eval
        {
        pushFollow(FOLLOW_expr_eval_in_synpred145_QueryParser3221);
        expr_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_QueryParser

    // $ANTLR start synpred146_QueryParser
    public final void synpred146_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:449:14: ( LEFT_PAREN expr RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:449:14: LEFT_PAREN expr RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred146_QueryParser3237); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred146_QueryParser3239);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred146_QueryParser3241); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred146_QueryParser

    // $ANTLR start synpred147_QueryParser
    public final void synpred147_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:13: ( const_expr )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:454:13: const_expr
        {
        pushFollow(FOLLOW_const_expr_in_synpred147_QueryParser3285);
        const_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred147_QueryParser

    // $ANTLR start synpred150_QueryParser
    public final void synpred150_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:19: ( func_eval )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:19: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred150_QueryParser3317);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred150_QueryParser

    // $ANTLR start synpred151_QueryParser
    public final void synpred151_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:31: ( col_ref )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:31: col_ref
        {
        pushFollow(FOLLOW_col_ref_in_synpred151_QueryParser3321);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred151_QueryParser

    // $ANTLR start synpred152_QueryParser
    public final void synpred152_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:41: ( bin_expr )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:460:41: bin_expr
        {
        pushFollow(FOLLOW_bin_expr_in_synpred152_QueryParser3325);
        bin_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred152_QueryParser

    // $ANTLR start synpred164_QueryParser
    public final void synpred164_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:29: ( INTEGER SEMI_COLON )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:30: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred164_QueryParser3800); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred164_QueryParser3802); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred164_QueryParser

    // $ANTLR start synpred165_QueryParser
    public final void synpred165_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:63: ( LONGINTEGER SEMI_COLON )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:503:64: LONGINTEGER SEMI_COLON
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred165_QueryParser3812); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred165_QueryParser3814); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred165_QueryParser

    // $ANTLR start synpred166_QueryParser
    public final void synpred166_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:31: ( DOUBLENUMBER SEMI_COLON )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:506:32: DOUBLENUMBER SEMI_COLON
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred166_QueryParser3842); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred166_QueryParser3844); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred166_QueryParser

    // $ANTLR start synpred199_QueryParser
    public final void synpred199_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:19: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred199_QueryParser4298);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:53: ( OUTER )?
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( (LA190_0==OUTER) ) {
            alt190=1;
        }
        switch (alt190) {
            case 1 :
                // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:562:53: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred199_QueryParser4314); if (state.failed) return ;

                }
                break;

        }


        match(input,COMMA,FOLLOW_COMMA_in_synpred199_QueryParser4317); if (state.failed) return ;

        pushFollow(FOLLOW_join_item_in_synpred199_QueryParser4320);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred199_QueryParser

    // $ANTLR start synpred202_QueryParser
    public final void synpred202_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:27: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred202_QueryParser4413); if (state.failed) return ;

        pushFollow(FOLLOW_join_group_by_expr_in_synpred202_QueryParser4415);
        join_group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:57: ( COMMA join_group_by_expr )*
        loop191:
        do {
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==COMMA) ) {
                alt191=1;
            }


            switch (alt191) {
        	case 1 :
        	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:576:59: COMMA join_group_by_expr
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred202_QueryParser4419); if (state.failed) return ;

        	    pushFollow(FOLLOW_join_group_by_expr_in_synpred202_QueryParser4421);
        	    join_group_by_expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop191;
            }
        } while (true);


        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred202_QueryParser4426); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred202_QueryParser

    // $ANTLR start synpred213_QueryParser
    public final void synpred213_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:23: ( ( nested_command SEMI_COLON )* )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:23: ( nested_command SEMI_COLON )*
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:23: ( nested_command SEMI_COLON )*
        loop192:
        do {
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==IDENTIFIER_L) ) {
                alt192=1;
            }


            switch (alt192) {
        	case 1 :
        	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:631:25: nested_command SEMI_COLON
        	    {
        	    pushFollow(FOLLOW_nested_command_in_synpred213_QueryParser4867);
        	    nested_command();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred213_QueryParser4869); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop192;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred213_QueryParser

    // $ANTLR start synpred214_QueryParser
    public final void synpred214_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:636:20: identifier EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_in_synpred214_QueryParser4929);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred214_QueryParser4931); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred214_QueryParser4933);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred214_QueryParser4935); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred214_QueryParser4937);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred214_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred214_QueryParser

    // $ANTLR start synpred215_QueryParser
    public final void synpred215_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:638:18: ( identifier EQUAL expr )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:638:18: identifier EQUAL expr
        {
        pushFollow(FOLLOW_identifier_in_synpred215_QueryParser4998);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred215_QueryParser5000); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred215_QueryParser5002);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred215_QueryParser

    // $ANTLR start synpred224_QueryParser
    public final void synpred224_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:41: ( INTEGER SEMI_COLON )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:669:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred224_QueryParser5317); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred224_QueryParser5319); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred224_QueryParser

    // $ANTLR start synpred232_QueryParser
    public final void synpred232_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:46: ( ( COMMA split_branch )+ )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:46: ( COMMA split_branch )+
        {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:46: ( COMMA split_branch )+
        int cnt193=0;
        loop193:
        do {
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==COMMA) ) {
                alt193=1;
            }


            switch (alt193) {
        	case 1 :
        	    // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:691:48: COMMA split_branch
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred232_QueryParser5480); if (state.failed) return ;

        	    pushFollow(FOLLOW_split_branch_in_synpred232_QueryParser5482);
        	    split_branch();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt193 >= 1 ) break loop193;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(193, input);
                    throw eee;
            }
            cnt193++;
        } while (true);


        }

    }
    // $ANTLR end synpred232_QueryParser

    // $ANTLR start synpred316_QueryParser
    public final void synpred316_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:813:7: ( identifier )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:813:7: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred316_QueryParser6451);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred316_QueryParser

    // $ANTLR start synpred317_QueryParser
    public final void synpred317_QueryParser_fragment() throws RecognitionException {
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:814:7: ( null_keyword )
        // /home/iman/workspace/reStoreV3/src/org/apache/pig/parser/QueryParser.g:814:7: null_keyword
        {
        pushFollow(FOLLOW_null_keyword_in_synpred317_QueryParser6459);
        null_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred317_QueryParser

    // Delegated rules

    public final boolean synpred316_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA51 dfa51 = new DFA51(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA161 dfa161 = new DFA161(this);
    static final String DFA51_eotS =
        "\u00ce\uffff";
    static final String DFA51_eofS =
        "\1\uffff\103\105\4\uffff\u0086\105";
    static final String DFA51_minS =
        "\1\4\103\6\1\4\2\uffff\1\4\u0086\6";
    static final String DFA51_maxS =
        "\1\u009b\103\142\1\u009b\2\uffff\1\u009b\u0086\142";
    static final String DFA51_acceptS =
        "\105\uffff\1\1\1\2\u0087\uffff";
    static final String DFA51_specialS =
        "\u00ce\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\23\1\34\1\24\1\41\1\53\1\uffff\1\25\1\52\1\64\1\51\1\14\2"+
            "\uffff\1\16\1\10\1\50\1\uffff\1\4\1\uffff\1\42\1\uffff\1\13"+
            "\3\uffff\1\47\4\uffff\1\101\1\6\1\40\1\46\2\uffff\1\7\1\76\1"+
            "\37\1\33\1\uffff\1\77\1\22\1\2\1\27\1\65\1\44\1\uffff\1\21\1"+
            "\56\1\15\1\74\4\uffff\1\72\1\5\1\45\1\uffff\1\55\1\62\3\uffff"+
            "\1\36\7\uffff\1\35\1\12\1\uffff\1\30\1\66\1\31\1\32\7\uffff"+
            "\1\3\1\75\3\uffff\1\11\1\73\1\uffff\1\63\2\uffff\1\20\1\uffff"+
            "\1\67\1\70\1\71\1\61\1\57\7\1\1\60\1\100\1\54\1\17\1\26\7\uffff"+
            "\1\43\1\103\31\uffff\1\102",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\132\1\143\1\133\1\150\1\162\1\uffff\1\134\1\161\1\173\1"+
            "\160\1\123\2\uffff\1\125\1\117\1\157\1\uffff\1\113\1\uffff\1"+
            "\151\1\uffff\1\122\3\uffff\1\156\4\uffff\1\u0088\1\115\1\147"+
            "\1\155\2\uffff\1\116\1\u0085\1\146\1\142\1\uffff\1\u0086\1\131"+
            "\1\111\1\136\1\174\1\153\1\uffff\1\130\1\165\1\124\1\u0083\4"+
            "\uffff\1\u0081\1\114\1\154\1\uffff\1\164\1\171\3\uffff\1\145"+
            "\7\uffff\1\144\1\121\1\uffff\1\137\1\175\1\140\1\141\7\uffff"+
            "\1\112\1\u0084\3\uffff\1\120\1\u0082\1\uffff\1\172\2\uffff\1"+
            "\127\1\uffff\1\176\1\177\1\u0080\1\170\1\166\7\110\1\167\1\u0087"+
            "\1\163\1\126\1\135\7\uffff\1\152\1\u008a\31\uffff\1\u0089",
            "",
            "",
            "\1\u009d\1\u00a6\1\u009e\1\u00ab\1\u00b5\1\uffff\1\u009f\1"+
            "\u00b4\1\u00be\1\u00b3\1\u0096\2\uffff\1\u0098\1\u0092\1\u00b2"+
            "\1\uffff\1\u008e\1\uffff\1\u00ac\1\uffff\1\u0095\3\uffff\1\u00b1"+
            "\4\uffff\1\u00cb\1\u0090\1\u00aa\1\u00b0\2\uffff\1\u0091\1\u00c8"+
            "\1\u00a9\1\u00a5\1\uffff\1\u00c9\1\u009c\1\u008c\1\u00a1\1\u00bf"+
            "\1\u00ae\1\uffff\1\u009b\1\u00b8\1\u0097\1\u00c6\4\uffff\1\u00c4"+
            "\1\u008f\1\u00af\1\uffff\1\u00b7\1\u00bc\3\uffff\1\u00a8\7\uffff"+
            "\1\u00a7\1\u0094\1\uffff\1\u00a2\1\u00c0\1\u00a3\1\u00a4\7\uffff"+
            "\1\u008d\1\u00c7\3\uffff\1\u0093\1\u00c5\1\uffff\1\u00bd\2\uffff"+
            "\1\u009a\1\uffff\1\u00c1\1\u00c2\1\u00c3\1\u00bb\1\u00b9\7\u008b"+
            "\1\u00ba\1\u00ca\1\u00b6\1\u0099\1\u00a0\7\uffff\1\u00ad\1\u00cd"+
            "\31\uffff\1\u00cc",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\104\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\104\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105",
            "\1\105\11\uffff\1\105\12\uffff\1\107\5\uffff\1\105\30\uffff"+
            "\1\106\2\uffff\1\105\24\uffff\1\105\2\uffff\1\107\11\uffff\1"+
            "\105\2\uffff\1\105"
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "338:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA70_eotS =
        "\116\uffff";
    static final String DFA70_eofS =
        "\116\uffff";
    static final String DFA70_minS =
        "\1\4\5\0\110\uffff";
    static final String DFA70_maxS =
        "\1\u009b\5\0\110\uffff";
    static final String DFA70_acceptS =
        "\6\uffff\1\2\1\3\104\uffff\1\4\1\1";
    static final String DFA70_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\110\uffff}>";
    static final String[] DFA70_transitionS = {
            "\5\7\1\uffff\5\7\2\uffff\1\7\1\3\1\7\1\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\1\5\2\7\1\6\2\uffff\2\7\1\1\1\7\1\uffff"+
            "\4\7\1\2\1\uffff\1\4\15\7\1\uffff\7\7\2\uffff\1\7\7\uffff\2"+
            "\7\1\uffff\4\7\5\uffff\1\7\1\uffff\2\7\3\uffff\2\7\1\uffff\1"+
            "\7\2\uffff\1\7\1\114\21\7\7\uffff\2\7\31\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "371:1: flatten_generated_item : ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred112_QueryParser()) ) {s = 77;}

                        else if ( (synpred117_QueryParser()) ) {s = 7;}

                         
                        input.seek(index70_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_2 = input.LA(1);

                         
                        int index70_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred115_QueryParser()) ) {s = 6;}

                        else if ( (synpred117_QueryParser()) ) {s = 7;}

                         
                        input.seek(index70_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_3 = input.LA(1);

                         
                        int index70_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred115_QueryParser()) ) {s = 6;}

                        else if ( (synpred117_QueryParser()) ) {s = 7;}

                         
                        input.seek(index70_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA70_4 = input.LA(1);

                         
                        int index70_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred115_QueryParser()&&synpred115_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 6;}

                        else if ( (((synpred117_QueryParser()&&synpred117_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 7;}

                         
                        input.seek(index70_4);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA70_5 = input.LA(1);

                         
                        int index70_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred115_QueryParser()) ) {s = 6;}

                        else if ( (synpred117_QueryParser()) ) {s = 7;}

                         
                        input.seek(index70_5);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA74_eotS =
        "\121\uffff";
    static final String DFA74_eofS =
        "\121\uffff";
    static final String DFA74_minS =
        "\1\4\112\0\6\uffff";
    static final String DFA74_maxS =
        "\1\u009b\112\0\6\uffff";
    static final String DFA74_acceptS =
        "\113\uffff\1\1\1\2\1\5\1\6\1\4\1\3";
    static final String DFA74_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\6\uffff}>";
    static final String[] DFA74_transitionS = {
            "\1\34\1\45\1\35\1\52\1\64\1\uffff\1\36\1\63\1\75\1\62\1\25\2"+
            "\uffff\1\27\1\21\1\61\1\uffff\1\15\1\uffff\1\53\1\uffff\1\24"+
            "\2\uffff\1\112\1\60\1\3\3\uffff\1\7\1\17\1\51\1\57\1\uffff\1"+
            "\3\1\20\1\107\1\50\1\44\1\uffff\1\5\1\33\1\13\1\40\1\76\1\55"+
            "\1\3\1\32\1\67\1\26\1\105\1\10\1\11\1\1\1\uffff\1\103\1\16\1"+
            "\56\1\3\1\66\1\73\1\2\2\uffff\1\47\7\uffff\1\46\1\23\1\uffff"+
            "\1\41\1\77\1\42\1\43\5\uffff\1\4\1\uffff\1\14\1\106\3\uffff"+
            "\1\22\1\104\1\uffff\1\74\2\uffff\1\31\1\uffff\1\100\1\101\1"+
            "\102\1\72\1\70\7\12\1\71\1\6\1\65\1\30\1\37\7\uffff\1\54\1\111"+
            "\31\uffff\1\110",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "395:1: unary_cond : ( expr rel_op ^ expr | LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | func_eval | null_check_cond | bool_cond );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_1 = input.LA(1);

                         
                        int index74_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred124_QueryParser()) ) {s = 76;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA74_2 = input.LA(1);

                         
                        int index74_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA74_3 = input.LA(1);

                         
                        int index74_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA74_4 = input.LA(1);

                         
                        int index74_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_4);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA74_5 = input.LA(1);

                         
                        int index74_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))&&synpred123_QueryParser())) ) {s = 75;}

                        else if ( (((((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))&&synpred126_QueryParser())) ) {s = 79;}

                        else if ( (((synpred127_QueryParser()&&synpred127_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 77;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 78;}

                         
                        input.seek(index74_5);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA74_6 = input.LA(1);

                         
                        int index74_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_6);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA74_7 = input.LA(1);

                         
                        int index74_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_7);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA74_8 = input.LA(1);

                         
                        int index74_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_8);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA74_9 = input.LA(1);

                         
                        int index74_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_9);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA74_10 = input.LA(1);

                         
                        int index74_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_10);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA74_11 = input.LA(1);

                         
                        int index74_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_11);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA74_12 = input.LA(1);

                         
                        int index74_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_12);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA74_13 = input.LA(1);

                         
                        int index74_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_13);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA74_14 = input.LA(1);

                         
                        int index74_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_14);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA74_15 = input.LA(1);

                         
                        int index74_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_15);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA74_16 = input.LA(1);

                         
                        int index74_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_16);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA74_17 = input.LA(1);

                         
                        int index74_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_17);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA74_18 = input.LA(1);

                         
                        int index74_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_18);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA74_19 = input.LA(1);

                         
                        int index74_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_19);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA74_20 = input.LA(1);

                         
                        int index74_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_20);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA74_21 = input.LA(1);

                         
                        int index74_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_21);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA74_22 = input.LA(1);

                         
                        int index74_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_22);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA74_23 = input.LA(1);

                         
                        int index74_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_23);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA74_24 = input.LA(1);

                         
                        int index74_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_24);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA74_25 = input.LA(1);

                         
                        int index74_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_25);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA74_26 = input.LA(1);

                         
                        int index74_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_26);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA74_27 = input.LA(1);

                         
                        int index74_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_27);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA74_28 = input.LA(1);

                         
                        int index74_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_28);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA74_29 = input.LA(1);

                         
                        int index74_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_29);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA74_30 = input.LA(1);

                         
                        int index74_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_30);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA74_31 = input.LA(1);

                         
                        int index74_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_31);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA74_32 = input.LA(1);

                         
                        int index74_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_32);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA74_33 = input.LA(1);

                         
                        int index74_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_33);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA74_34 = input.LA(1);

                         
                        int index74_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_34);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA74_35 = input.LA(1);

                         
                        int index74_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_35);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA74_36 = input.LA(1);

                         
                        int index74_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_36);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA74_37 = input.LA(1);

                         
                        int index74_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_37);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA74_38 = input.LA(1);

                         
                        int index74_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_38);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA74_39 = input.LA(1);

                         
                        int index74_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred125_QueryParser()) ) {s = 80;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_39);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA74_40 = input.LA(1);

                         
                        int index74_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_40);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA74_41 = input.LA(1);

                         
                        int index74_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_41);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA74_42 = input.LA(1);

                         
                        int index74_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_42);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA74_43 = input.LA(1);

                         
                        int index74_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_43);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA74_44 = input.LA(1);

                         
                        int index74_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_44);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA74_45 = input.LA(1);

                         
                        int index74_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_45);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA74_46 = input.LA(1);

                         
                        int index74_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_46);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA74_47 = input.LA(1);

                         
                        int index74_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_47);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA74_48 = input.LA(1);

                         
                        int index74_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_48);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA74_49 = input.LA(1);

                         
                        int index74_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_49);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA74_50 = input.LA(1);

                         
                        int index74_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_50);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA74_51 = input.LA(1);

                         
                        int index74_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_51);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA74_52 = input.LA(1);

                         
                        int index74_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_52);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA74_53 = input.LA(1);

                         
                        int index74_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_53);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA74_54 = input.LA(1);

                         
                        int index74_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_54);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA74_55 = input.LA(1);

                         
                        int index74_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_55);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA74_56 = input.LA(1);

                         
                        int index74_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_56);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA74_57 = input.LA(1);

                         
                        int index74_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_57);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA74_58 = input.LA(1);

                         
                        int index74_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_58);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA74_59 = input.LA(1);

                         
                        int index74_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_59);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA74_60 = input.LA(1);

                         
                        int index74_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_60);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA74_61 = input.LA(1);

                         
                        int index74_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_61);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA74_62 = input.LA(1);

                         
                        int index74_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_62);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA74_63 = input.LA(1);

                         
                        int index74_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_63);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA74_64 = input.LA(1);

                         
                        int index74_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_64);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA74_65 = input.LA(1);

                         
                        int index74_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_65);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA74_66 = input.LA(1);

                         
                        int index74_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_66);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA74_67 = input.LA(1);

                         
                        int index74_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_67);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA74_68 = input.LA(1);

                         
                        int index74_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_68);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA74_69 = input.LA(1);

                         
                        int index74_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_69);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA74_70 = input.LA(1);

                         
                        int index74_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_70);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA74_71 = input.LA(1);

                         
                        int index74_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_71);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA74_72 = input.LA(1);

                         
                        int index74_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_72);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA74_73 = input.LA(1);

                         
                        int index74_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred126_QueryParser()) ) {s = 79;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_73);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA74_74 = input.LA(1);

                         
                        int index74_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred123_QueryParser()) ) {s = 75;}

                        else if ( (synpred127_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index74_74);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA81_eotS =
        "\114\uffff";
    static final String DFA81_eofS =
        "\114\uffff";
    static final String DFA81_minS =
        "\1\4\1\0\112\uffff";
    static final String DFA81_maxS =
        "\1\u009b\1\0\112\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\2\110\uffff\1\1";
    static final String DFA81_specialS =
        "\1\uffff\1\0\112\uffff}>";
    static final String[] DFA81_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1"+
            "\uffff\7\2\2\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\1\2\1"+
            "\uffff\2\2\3\uffff\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\21\2"+
            "\7\uffff\2\2\31\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "432:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_1 = input.LA(1);

                         
                        int index81_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred138_QueryParser()) ) {s = 75;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA86_eotS =
        "\115\uffff";
    static final String DFA86_eofS =
        "\115\uffff";
    static final String DFA86_minS =
        "\1\4\1\0\7\uffff\1\0\103\uffff";
    static final String DFA86_maxS =
        "\1\u009b\1\0\7\uffff\1\0\103\uffff";
    static final String DFA86_acceptS =
        "\2\uffff\1\1\110\uffff\1\3\1\2";
    static final String DFA86_specialS =
        "\1\uffff\1\0\7\uffff\1\1\103\uffff}>";
    static final String[] DFA86_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\11\1"+
            "\uffff\6\2\1\1\2\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\1"+
            "\2\1\uffff\2\2\3\uffff\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\21"+
            "\2\7\uffff\2\2\31\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "448:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred145_QueryParser()) ) {s = 2;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index86_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_9 = input.LA(1);

                         
                        int index86_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred145_QueryParser()) ) {s = 2;}

                        else if ( (synpred146_QueryParser()) ) {s = 76;}

                         
                        input.seek(index86_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA87_eotS =
        "\113\uffff";
    static final String DFA87_eofS =
        "\113\uffff";
    static final String DFA87_minS =
        "\1\4\3\uffff\6\0\101\uffff";
    static final String DFA87_maxS =
        "\1\u009b\3\uffff\6\0\101\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\100\uffff";
    static final String DFA87_specialS =
        "\4\uffff\1\0\1\1\1\2\1\3\1\4\1\5\101\uffff}>";
    static final String[] DFA87_transitionS = {
            "\5\12\1\uffff\5\12\2\uffff\3\12\1\uffff\1\12\1\uffff\1\12\1"+
            "\uffff\1\12\2\uffff\2\12\1\1\3\uffff\1\6\3\12\1\uffff\1\1\4"+
            "\12\1\uffff\1\4\5\12\1\1\4\12\1\7\1\10\1\11\1\uffff\3\12\1\1"+
            "\2\12\1\1\2\uffff\1\12\7\uffff\2\12\1\uffff\4\12\5\uffff\1\1"+
            "\1\uffff\2\12\3\uffff\2\12\1\uffff\1\12\2\uffff\1\12\1\uffff"+
            "\15\12\1\5\3\12\7\uffff\2\12\31\uffff\1\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "454:1: expr_eval : ( const_expr | var_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_4 = input.LA(1);

                         
                        int index87_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred147_QueryParser()&&synpred147_QueryParser())&&(input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 1;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 10;}

                         
                        input.seek(index87_4);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_5 = input.LA(1);

                         
                        int index87_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index87_5);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_6 = input.LA(1);

                         
                        int index87_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index87_6);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA87_7 = input.LA(1);

                         
                        int index87_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index87_7);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA87_8 = input.LA(1);

                         
                        int index87_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index87_8);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA87_9 = input.LA(1);

                         
                        int index87_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred147_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index87_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA89_eotS =
        "\111\uffff";
    static final String DFA89_eofS =
        "\111\uffff";
    static final String DFA89_minS =
        "\1\4\7\uffff\1\0\22\uffff\1\0\43\uffff\1\0\5\uffff\1\0\3\uffff";
    static final String DFA89_maxS =
        "\1\u009b\7\uffff\1\0\22\uffff\1\0\43\uffff\1\0\5\uffff\1\0\3\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\1\102\uffff\1\2\1\uffff\1\4\1\uffff\1\3";
    static final String DFA89_specialS =
        "\10\uffff\1\0\22\uffff\1\1\43\uffff\1\2\5\uffff\1\3\3\uffff}>";
    static final String[] DFA89_transitionS = {
            "\5\1\1\uffff\5\1\2\uffff\1\1\1\10\1\1\1\uffff\1\1\1\uffff\1"+
            "\1\1\uffff\1\1\2\uffff\1\104\1\1\4\uffff\4\1\2\uffff\3\1\1\33"+
            "\1\uffff\1\77\5\1\1\uffff\4\1\2\106\1\105\1\uffff\3\1\1\uffff"+
            "\2\1\3\uffff\1\1\7\uffff\2\1\1\uffff\4\1\7\uffff\2\1\3\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\21\1\7\uffff\2\1\31\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "460:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_8 = input.LA(1);

                         
                        int index89_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred150_QueryParser()) ) {s = 1;}

                        else if ( (synpred151_QueryParser()) ) {s = 68;}

                         
                        input.seek(index89_8);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_27 = input.LA(1);

                         
                        int index89_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred150_QueryParser()) ) {s = 1;}

                        else if ( (synpred151_QueryParser()) ) {s = 68;}

                         
                        input.seek(index89_27);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA89_63 = input.LA(1);

                         
                        int index89_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred150_QueryParser()&&synpred150_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 1;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred151_QueryParser())) ) {s = 68;}

                         
                        input.seek(index89_63);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA89_69 = input.LA(1);

                         
                        int index89_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred152_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index89_69);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA126_eotS =
        "\116\uffff";
    static final String DFA126_eofS =
        "\116\uffff";
    static final String DFA126_minS =
        "\1\4\1\0\114\uffff";
    static final String DFA126_maxS =
        "\1\u009b\1\0\114\uffff";
    static final String DFA126_acceptS =
        "\2\uffff\1\2\112\uffff\1\1";
    static final String DFA126_specialS =
        "\1\uffff\1\0\114\uffff}>";
    static final String[] DFA126_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\3\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\4\2\2\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1"+
            "\uffff\7\2\2\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\1\2\1"+
            "\uffff\2\2\3\uffff\2\2\1\uffff\1\2\2\uffff\23\2\7\uffff\2\2"+
            "\31\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "576:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_1 = input.LA(1);

                         
                        int index126_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred202_QueryParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index126_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA135_eotS =
        "\44\uffff";
    static final String DFA135_eofS =
        "\44\uffff";
    static final String DFA135_minS =
        "\1\55\1\40\1\4\4\32\1\uffff\6\22\1\4\1\22\1\uffff\4\0\1\22\3\0\1"+
        "\uffff\4\20\1\22\1\0\4\20";
    static final String DFA135_maxS =
        "\1\55\1\40\1\u009b\4\147\1\uffff\6\125\1\u009b\1\72\1\uffff\4\0"+
        "\1\55\3\0\1\uffff\4\137\1\55\1\0\4\137";
    static final String DFA135_acceptS =
        "\7\uffff\1\2\10\uffff\1\3\10\uffff\1\1\12\uffff";
    static final String DFA135_specialS =
        "\21\uffff\1\7\1\5\1\0\1\4\1\uffff\1\2\1\3\1\1\6\uffff\1\6\4\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1",
            "\1\2",
            "\5\7\1\uffff\5\7\2\uffff\1\14\1\4\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\13\2\uffff\1\6\2\7\3\uffff\1\7\1\10\2\7\1\uffff"+
            "\1\7\1\11\2\7\1\3\1\uffff\1\5\15\7\1\uffff\1\15\6\7\2\uffff"+
            "\1\7\7\uffff\1\7\1\12\1\uffff\4\7\5\uffff\1\7\1\uffff\2\7\3"+
            "\uffff\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\21\7\7\uffff\2\7"+
            "\31\uffff\1\7",
            "\2\7\36\uffff\1\7\7\uffff\1\7\21\uffff\1\7\1\16\2\7\12\uffff"+
            "\1\7\4\uffff\1\7",
            "\2\7\36\uffff\1\7\7\uffff\1\7\21\uffff\1\7\1\16\2\7\12\uffff"+
            "\1\7\4\uffff\1\7",
            "\2\7\36\uffff\1\7\7\uffff\1\7\21\uffff\1\7\1\16\2\7\12\uffff"+
            "\1\7\4\uffff\1\7",
            "\1\7\47\uffff\1\7\21\uffff\1\7\1\17\2\7\12\uffff\1\7\4\uffff"+
            "\1\7",
            "",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\1\20\10\uffff\1\7\1\20\16\uffff\1\20\1\uffff\1\20\14\uffff"+
            "\1\7\32\uffff\1\7",
            "\5\7\1\uffff\5\7\2\uffff\1\7\1\22\1\7\1\uffff\1\7\1\uffff\1"+
            "\7\1\uffff\1\7\2\uffff\1\24\1\7\4\uffff\4\7\2\uffff\3\7\1\21"+
            "\1\uffff\1\23\5\7\1\uffff\4\7\2\uffff\1\25\1\uffff\3\7\1\uffff"+
            "\2\7\3\uffff\1\7\7\uffff\2\7\1\uffff\4\7\7\uffff\2\7\3\uffff"+
            "\2\7\1\uffff\1\7\2\uffff\1\7\1\uffff\21\7\7\uffff\2\7\31\uffff"+
            "\1\7",
            "\1\27\11\uffff\1\24\16\uffff\1\26\1\uffff\1\30\14\uffff\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\33\11\uffff\1\35\16\uffff\1\32\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37",
            "\1\41\11\uffff\1\43\16\uffff\1\40\1\uffff\1\42",
            "\1\uffff",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37",
            "\1\36\116\uffff\1\37"
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "636:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_19 = input.LA(1);

                         
                        int index135_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_19);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_24 = input.LA(1);

                         
                        int index135_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_24);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA135_22 = input.LA(1);

                         
                        int index135_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_22);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA135_23 = input.LA(1);

                         
                        int index135_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_23);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA135_20 = input.LA(1);

                         
                        int index135_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_20);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA135_18 = input.LA(1);

                         
                        int index135_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_18);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA135_31 = input.LA(1);

                         
                        int index135_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_31);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA135_17 = input.LA(1);

                         
                        int index135_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred214_QueryParser())) ) {s = 25;}

                        else if ( (((synpred215_QueryParser()&&synpred215_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 7;}

                         
                        input.seek(index135_17);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA161_eotS =
        "\106\uffff";
    static final String DFA161_eofS =
        "\106\uffff";
    static final String DFA161_minS =
        "\1\4\76\uffff\1\0\6\uffff";
    static final String DFA161_maxS =
        "\1\u009b\76\uffff\1\0\6\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\uffff"+
        "\1\101\1\102\1\103\1\104\1\77\1\100";
    static final String DFA161_specialS =
        "\77\uffff\1\0\6\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\23\1\34\1\24\1\41\1\53\1\uffff\1\25\1\52\1\64\1\51\1\14\2"+
            "\uffff\1\16\1\10\1\50\1\uffff\1\4\1\uffff\1\42\1\uffff\1\13"+
            "\3\uffff\1\47\4\uffff\1\101\1\6\1\40\1\46\2\uffff\1\7\1\76\1"+
            "\37\1\33\1\uffff\1\77\1\22\1\2\1\27\1\65\1\44\1\uffff\1\21\1"+
            "\56\1\15\1\74\4\uffff\1\72\1\5\1\45\1\uffff\1\55\1\62\3\uffff"+
            "\1\36\7\uffff\1\35\1\12\1\uffff\1\30\1\66\1\31\1\32\7\uffff"+
            "\1\3\1\75\3\uffff\1\11\1\73\1\uffff\1\63\2\uffff\1\20\1\uffff"+
            "\1\67\1\70\1\71\1\61\1\57\7\1\1\60\1\100\1\54\1\17\1\26\7\uffff"+
            "\1\43\1\103\31\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "751:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | CUBE | ROLLUP | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | DATETIME | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE | REALIAS | BOOL_COND );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_63 = input.LA(1);

                         
                        int index161_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred316_QueryParser()&&synpred316_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 68;}

                        else if ( ((((input.LT(1).getText().equalsIgnoreCase("NULL"))&&(input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred317_QueryParser())) ) {s = 69;}

                         
                        input.seek(index161_63);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query363 = new BitSet(new long[]{0x3440A90802264000L,0x0080184604004002L});
    public static final BitSet FOLLOW_EOF_in_query366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_statement_in_statement450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_statement_in_statement486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_import_statement495 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_import_statement497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_inline_statement507 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_inline_statement509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement519 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_split_statement521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_general_statement533 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement535 = new BitSet(new long[]{0x3440080802264000L,0x0080180204004002L});
    public static final BitSet FOLLOW_op_clause_in_general_statement541 = new BitSet(new long[]{0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement543 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_general_statement548 = new BitSet(new long[]{0x3040080802264000L,0x0080180204004002L});
    public static final BitSet FOLLOW_op_clause_in_general_statement550 = new BitSet(new long[]{0x0000000000000000L,0x0000000080040000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement552 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_general_statement555 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_general_statement558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realias_clause_in_realias_statement601 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_realias_statement603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_realias_clause613 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_realias_clause615 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_identifier_in_realias_clause617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause641 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_complex_statement_in_foreach_statement679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_simple_statement_in_foreach_statement701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_complex_statement712 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_complex_statement714 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_foreach_complex_statement719 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_complex_statement721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_simple_statement771 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_simple_statement773 = new BitSet(new long[]{0x0400010000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement779 = new BitSet(new long[]{0x0000000000000000L,0x0000000400040000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement781 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_foreach_simple_statement835 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement837 = new BitSet(new long[]{0x0000000000000000L,0x0000000080040000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement839 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_foreach_simple_statement842 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_simple_statement845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_parameter917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_parameter926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_parameter934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_parameter942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_content951 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_content_in_content955 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_content959 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_content971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_clause_in_op_clause1023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_clause_in_op_clause1121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause1149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause1163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1200 = new BitSet(new long[]{0x0000200000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1204 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1207 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1209 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1243 = new BitSet(new long[]{0x0000200000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1247 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1250 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1252 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_content_in_macro_body_clause1286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1308 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1310 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1342 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1357 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1360 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1362 = new BitSet(new long[]{0x0000000100010000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1395 = new BitSet(new long[]{0x0008200050000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1399 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1402 = new BitSet(new long[]{0x0008200050000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1404 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1433 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_alias_in_inline_clause1435 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1462 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1474 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_alias_in_define_clause1477 = new BitSet(new long[]{0x74F7EF3E22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_cmd_in_define_clause1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd1499 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd1504 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd1508 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_input_clause_in_cmd1512 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_output_clause_in_cmd1516 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_error_clause_in_cmd1520 = new BitSet(new long[]{0x0002000000001002L,0x0000010800020000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause1532 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause1535 = new BitSet(new long[]{0x0000000000000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1551 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_path_list1555 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1557 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause1584 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause1587 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause1590 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause1602 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause1605 = new BitSet(new long[]{0x0000000000000000L,0x0000060002000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause1608 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1620 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list1624 = new BitSet(new long[]{0x0000000000000000L,0x0000060002000000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1626 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_stream_cmd1658 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_USING_in_stream_cmd1675 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd1680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause1694 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause1697 = new BitSet(new long[]{0x0000000000000000L,0x0000060002000000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause1700 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause1712 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause1715 = new BitSet(new long[]{0x0000000000000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause1720 = new BitSet(new long[]{0x1000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause1724 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause1727 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_filename_in_load_clause1748 = new BitSet(new long[]{0x0000000000000042L,0x0100000000000000L});
    public static final BitSet FOLLOW_USING_in_load_clause1752 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_clause_in_load_clause1755 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_load_clause1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename1770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause1778 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause1785 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_as_clause1797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_def1808 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COLON_in_field_def1812 = new BitSet(new long[]{0x4704002020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_type_in_field_def1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_field_def1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1881 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list1885 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1887 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_simple_type_in_type1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type1930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type1976 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type1979 = new BitSet(new long[]{0x4704202020082B00L,0x0040000080000001L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type2014 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type2017 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_null_keyword_in_bag_type2021 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bag_type2023 = new BitSet(new long[]{0x0400000000000000L,0x0040000040000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type2025 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type2062 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type2065 = new BitSet(new long[]{0x0400200000000000L,0x0040000040000000L});
    public static final BitSet FOLLOW_identifier_in_bag_type2071 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bag_type2073 = new BitSet(new long[]{0x0400000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type2078 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_map_type2114 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map_type2117 = new BitSet(new long[]{0x4704002020082B00L,0x0040000020000001L});
    public static final BitSet FOLLOW_type_in_map_type2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map_type2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2187 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2189 = new BitSet(new long[]{0x0000000000000000L,0x0000000082000010L});
    public static final BitSet FOLLOW_func_args_in_func_clause2191 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_in_func_name2227 = new BitSet(new long[]{0x0000000008000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_set_in_func_name2231 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_eid_in_func_name2241 = new BitSet(new long[]{0x0000000008000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2266 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2270 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000010L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2272 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_group_clause2298 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2309 = new BitSet(new long[]{0x0000000000000002L,0x0100000000080000L});
    public static final BitSet FOLLOW_USING_in_group_clause2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_group_type_in_group_clause2316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2340 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2344 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2346 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_group_item2378 = new BitSet(new long[]{0x0000000000000410L,0x0800000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2382 = new BitSet(new long[]{0x0001000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_ALL_in_group_item2386 = new BitSet(new long[]{0x0001000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_ANY_in_group_item2390 = new BitSet(new long[]{0x0001000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_alias_in_rel2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rel2421 = new BitSet(new long[]{0x3040090802264000L,0x0080180204004002L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_rel2426 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_op_clause_in_rel2434 = new BitSet(new long[]{0x0000000000000000L,0x0000000080040000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_rel2438 = new BitSet(new long[]{0x0000000000000000L,0x0000000080040000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel2442 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rel2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item2459 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2463 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2470 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item2514 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2518 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2525 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2528 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item2569 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2573 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item2606 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2610 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2617 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2620 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause2644 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause2647 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_flatten_clause2650 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause2652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2662 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_store_clause2665 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_INTO_in_store_clause2667 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_filename_in_store_clause2670 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_USING_in_store_clause2674 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_clause_in_store_clause2677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2689 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_filter_clause2692 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_filter_clause2694 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_filter_clause2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_cond_in_cond2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_OR_in_or_cond2720 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2735 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AND_in_and_cond2739 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2742 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_expr_in_unary_cond2754 = new BitSet(new long[]{0x0000000000000000L,0x000FE00000000FC0L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond2756 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_unary_cond2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond2774 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_unary_cond2777 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_unary_cond2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_unary_cond2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_check_cond_in_unary_cond2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_cond_in_unary_cond2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_bool_cond2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_not_cond2866 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_unary_cond_in_not_cond2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_eval2878 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_eval2880 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB9A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_list_in_func_eval2882 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_eval2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2917 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_real_arg_list2921 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2923 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_expr_in_real_arg2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_null_check_cond2970 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IS_in_null_check_cond2972 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NOT_in_null_check_cond2975 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_null_keyword_in_null_check_cond2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_expr_in_expr2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr2997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400004L});
    public static final BitSet FOLLOW_set_in_add_expr3001 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr3012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400004L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr3024 = new BitSet(new long[]{0x0000000004000002L,0x0000008000100000L});
    public static final BitSet FOLLOW_set_in_multi_expr3028 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr3043 = new BitSet(new long[]{0x0000000004000002L,0x0000008000100000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr3055 = new BitSet(new long[]{0x4104002020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_type_cast_in_cast_expr3057 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr3059 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr3096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_type_cast3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type_cast3126 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type_cast3128 = new BitSet(new long[]{0x4104002020082B00L,0x0040000080000001L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast3132 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple_type_cast3136 = new BitSet(new long[]{0x4104002020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast3138 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type_cast3146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type_cast3181 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type_cast3183 = new BitSet(new long[]{0x0000000000000000L,0x0040000040000000L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type_cast3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_unary_expr3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_expr3237 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_unary_expr3239 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_expr3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_expr_in_unary_expr3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_expr_eval3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr_eval3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr3298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000A00000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr3302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000A00000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr3306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000A00000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr3317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_conversion_in_projectable_expr3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_type_conversion3338 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3340 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_type_conversion3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_type_conversion3389 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3391 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_type_conversion3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_type_conversion3440 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3442 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_type_conversion3446 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3448 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_type_conversion3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj3491 = new BitSet(new long[]{0x0400280010040000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_dot_proj3520 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3522 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_dot_proj3526 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3528 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_dot_proj3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_col_alias3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_col_alias3582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_col_alias3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index3595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3608 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3610 = new BitSet(new long[]{0x0000280010040002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3657 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_ref_in_col_range3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_pound_proj3690 = new BitSet(new long[]{0x0000200000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_pound_proj3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_pound_proj3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_bin_expr3710 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_bin_expr3712 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_QMARK_in_bin_expr3714 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_bin_expr3720 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bin_expr3722 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_bin_expr3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_bin_expr3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_neg_expr3763 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cast_expr_in_neg_expr3765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause3792 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_limit_clause3795 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause3807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_limit_clause3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause3834 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_sample_clause3837 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause3849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_sample_clause3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANK_in_rank_clause3864 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_rank_clause3867 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_rank_by_statement_in_rank_clause3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_rank_by_statement3883 = new BitSet(new long[]{0x0000280090040000L,0x0000008000000000L});
    public static final BitSet FOLLOW_rank_by_clause_in_rank_by_statement3886 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_DENSE_in_rank_by_statement3890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_rank_by_clause3902 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_rank_list_in_rank_by_clause3923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3932 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_rank_list3936 = new BitSet(new long[]{0x0000280090040000L});
    public static final BitSet FOLLOW_rank_col_in_rank_list3938 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_col_range_in_rank_col3964 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_col_ref_in_rank_col3988 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_ORDER_in_order_clause4008 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_order_clause4011 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_order_clause4013 = new BitSet(new long[]{0x0400280090040000L,0x0000008000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause4016 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_USING_in_order_clause4020 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_clause_in_order_clause4023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause4035 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause4066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list4075 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list4079 = new BitSet(new long[]{0x0400280090040000L});
    public static final BitSet FOLLOW_order_col_in_order_col_list4081 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_col_range_in_order_col4112 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_col_ref_in_order_col4135 = new BitSet(new long[]{0x0000000000800082L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col4162 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_ref_in_order_col4165 = new BitSet(new long[]{0x0000000000800080L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause4188 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_distinct_clause4191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause4193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause4203 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_partition_clause4206 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_name_in_partition_clause4209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause4218 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause4221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause4223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list4233 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list4237 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_rel_list4239 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause4264 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause4267 = new BitSet(new long[]{0x0000000000000002L,0x0100000000080000L});
    public static final BitSet FOLLOW_USING_in_join_clause4271 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_join_type_in_join_clause4274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type4289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause4298 = new BitSet(new long[]{0x0080020000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_set_in_join_sub_clause4300 = new BitSet(new long[]{0x0000000000010000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause4314 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause4317 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_list_in_join_sub_clause4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4349 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_item_list4353 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4356 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_join_item4368 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause4401 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_join_group_by_expr_list_in_join_group_by_clause4404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4413 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4415 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_join_group_by_expr_list4419 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4421 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause4509 = new BitSet(new long[]{0x0400200000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause4512 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_list_in_union_clause4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_simple4524 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_simple4527 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_clause_simple4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan_simple4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_complex4576 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_complex4579 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_clause_complex4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_cube_clause4629 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_cube_item_in_cube_clause4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_cube_item4642 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_cube_by_clause_in_cube_item4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_cube_by_clause4657 = new BitSet(new long[]{0x0000000000040000L,0x0000000100000000L});
    public static final BitSet FOLLOW_cube_or_rollup_in_cube_by_clause4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_or_rollup4669 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_cube_or_rollup4673 = new BitSet(new long[]{0x0000000000040000L,0x0000000100000000L});
    public static final BitSet FOLLOW_cube_rollup_list_in_cube_or_rollup4675 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_cube_rollup_list4708 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_cube_by_expr_list_in_cube_rollup_list4719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cube_by_expr_list4728 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cube_by_expr_in_cube_by_expr_list4730 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_cube_by_expr_list4734 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cube_by_expr_in_cube_by_expr_list4736 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cube_by_expr_list4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_cube_by_expr4774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_cube_by_expr4779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_cube_by_expr4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_nested_blk4792 = new BitSet(new long[]{0x0000240000000000L});
    public static final BitSet FOLLOW_nested_command_list_in_nested_blk4795 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk4799 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk4801 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_nested_blk4806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause4816 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4818 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_generate_clause4822 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4824 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_nested_command_in_nested_command_list4867 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_command_list4869 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4947 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4949 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command4951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4998 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command5000 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_nested_command5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command5047 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command5049 = new BitSet(new long[]{0x1000010802020000L,0x0000000000004000L});
    public static final BitSet FOLLOW_nested_op_in_nested_command5051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op5100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op5128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op5142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op5156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj5165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj5167 = new BitSet(new long[]{0x0400280010040000L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj5169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list5209 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list5211 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list5215 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list5217 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list5222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter5252 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter5255 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_filter5257 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_nested_filter5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort5269 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort5272 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_sort5274 = new BitSet(new long[]{0x0400280090040000L,0x0000008000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort5278 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_USING_in_nested_sort5282 = new BitSet(new long[]{0x70F7EF3C22AE7DF0L,0x01FFFF4B180F6023L,0x0000000008000003L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct5297 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct5300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit5309 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit5312 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross5339 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross5342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach5350 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach5353 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach5355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input5368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list5377 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list5381 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list5383 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause5408 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_stream_clause5411 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause5413 = new BitSet(new long[]{0x0000200200000000L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause5418 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_alias_in_stream_clause5422 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause5436 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause5439 = new BitSet(new long[]{0x0400000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause5443 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause5446 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause5448 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause5454 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause5456 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause5458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause5468 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_split_clause5470 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_INTO_in_split_clause5472 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5474 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5480 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5482 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5493 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5495 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5500 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_branch5542 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch5544 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_split_branch5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_otherwise5579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise5581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref5625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_alias_col_ref5629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias_col_ref5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal5660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal5664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal5668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar5686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_scalar5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar5707 = new BitSet(new long[]{0x8008008040000000L});
    public static final BitSet FOLLOW_set_in_num_scalar5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5735 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keyvalue_in_map5737 = new BitSet(new long[]{0x0000000000010000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_map5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_keyvalue_in_map5743 = new BitSet(new long[]{0x0000000000010000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5770 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_key_in_keyvalue5792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5794 = new BitSet(new long[]{0x8708208440000000L,0x0020000002000004L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5834 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5836 = new BitSet(new long[]{0x0000000000010000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_bag5840 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5842 = new BitSet(new long[]{0x0000000000010000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5869 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5891 = new BitSet(new long[]{0x8708208440000000L,0x0020000002000004L});
    public static final BitSet FOLLOW_literal_in_tuple5893 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple5897 = new BitSet(new long[]{0x8708208440000000L,0x0020000002000004L});
    public static final BitSet FOLLOW_literal_in_tuple5899 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5930 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid5955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid5963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid5971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid5987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CUBE_in_eid6011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROLLUP_in_eid6019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid6051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid6059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid6075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid6083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid6091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid6115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid6147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid6155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid6163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid6179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid6187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid6195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid6203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid6211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid6219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid6227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid6235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid6243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_eid6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid6283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid6291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid6307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid6315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid6323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid6331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid6355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid6363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid6371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid6387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid6395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid6411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid6427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid6435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid6443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_eid6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_eid6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid6467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIAS_in_eid6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_COND_in_eid6491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op6501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op6523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op6534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op6545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op6567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_null_keyword6755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_identifier6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred13_QueryParser661 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred13_QueryParser663 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_FOREACH_in_synpred13_QueryParser669 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_rel_in_synpred13_QueryParser671 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred13_QueryParser673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred15_QueryParser721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred68_QueryParser1785 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred68_QueryParser1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred68_QueryParser1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_synpred86_QueryParser2014 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred86_QueryParser2017 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_null_keyword_in_synpred86_QueryParser2021 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_synpred86_QueryParser2023 = new BitSet(new long[]{0x0400000000000000L,0x0040000040000000L});
    public static final BitSet FOLLOW_tuple_type_in_synpred86_QueryParser2025 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_synpred86_QueryParser2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_synpred107_QueryParser2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred110_QueryParser2470 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred110_QueryParser2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred110_QueryParser2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_synpred112_QueryParser2459 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred112_QueryParser2463 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred112_QueryParser2470 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred112_QueryParser2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred112_QueryParser2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_synpred112_QueryParser2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred113_QueryParser2525 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred113_QueryParser2528 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred113_QueryParser2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_synpred115_QueryParser2514 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred115_QueryParser2518 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred115_QueryParser2525 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred115_QueryParser2528 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred115_QueryParser2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_synpred115_QueryParser2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred117_QueryParser2569 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred117_QueryParser2573 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_in_synpred117_QueryParser2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred118_QueryParser2617 = new BitSet(new long[]{0x4704202020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_synpred118_QueryParser2620 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred118_QueryParser2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred123_QueryParser2754 = new BitSet(new long[]{0x0000000000000000L,0x000FE00000000FC0L});
    public static final BitSet FOLLOW_rel_op_in_synpred123_QueryParser2756 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_synpred123_QueryParser2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred124_QueryParser2774 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_cond_in_synpred124_QueryParser2777 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred124_QueryParser2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_synpred125_QueryParser2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred126_QueryParser2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_check_cond_in_synpred127_QueryParser2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred138_QueryParser3055 = new BitSet(new long[]{0x4104002020082B00L,0x0040000000000001L});
    public static final BitSet FOLLOW_type_cast_in_synpred138_QueryParser3057 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred138_QueryParser3059 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_unary_expr_in_synpred138_QueryParser3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_synpred145_QueryParser3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred146_QueryParser3237 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_synpred146_QueryParser3239 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred146_QueryParser3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_synpred147_QueryParser3285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred150_QueryParser3317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_synpred151_QueryParser3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_synpred152_QueryParser3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred164_QueryParser3800 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred164_QueryParser3802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred165_QueryParser3812 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred165_QueryParser3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred166_QueryParser3842 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred166_QueryParser3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred199_QueryParser4298 = new BitSet(new long[]{0x0080020000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_set_in_synpred199_QueryParser4300 = new BitSet(new long[]{0x0000000000010000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OUTER_in_synpred199_QueryParser4314 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_synpred199_QueryParser4317 = new BitSet(new long[]{0x0400200000000000L});
    public static final BitSet FOLLOW_join_item_in_synpred199_QueryParser4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred202_QueryParser4413 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred202_QueryParser4415 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred202_QueryParser4419 = new BitSet(new long[]{0xF7FFEFBCF2AE7DF0L,0x01FFFFCB1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred202_QueryParser4421 = new BitSet(new long[]{0x0000000000010000L,0x0000000080000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred202_QueryParser4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_synpred213_QueryParser4867 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred213_QueryParser4869 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred214_QueryParser4929 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred214_QueryParser4931 = new BitSet(new long[]{0x0000280010040000L});
    public static final BitSet FOLLOW_col_ref_in_synpred214_QueryParser4933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred214_QueryParser4935 = new BitSet(new long[]{0x0400280010040000L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred214_QueryParser4937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred215_QueryParser4998 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred215_QueryParser5000 = new BitSet(new long[]{0xF7FFEFBC72AE7DF0L,0x01FFFF4B1A0F6027L,0x0000000008000003L});
    public static final BitSet FOLLOW_expr_in_synpred215_QueryParser5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred224_QueryParser5317 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred224_QueryParser5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred232_QueryParser5480 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_split_branch_in_synpred232_QueryParser5482 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_identifier_in_synpred316_QueryParser6451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_synpred317_QueryParser6459 = new BitSet(new long[]{0x0000000000000002L});

}